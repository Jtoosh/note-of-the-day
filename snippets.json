[
    {
        "text": "I found a neat website to give me a quick tutorial in Markdown syntax.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To _italicize_ a word, you just surround the word with an underscore '_'.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To make a word **bold** you surround it with two asterisks '**'.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "This can also span across _multiple words_, and you can make something _**both bold and italic**_.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "It doesn't matter what order the underscore and asterisks are in this case.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To make a header in Markdown, you place a # in front of that word, at the beginning of the line.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "There are six header sizes, and to change the size you simply add the corresponding number of #s. (header 1 uses #, header 6 uses ######)\nThere are two types of links that you can make in Markdown.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Inline links involve 2 parts: the link text, and the URL to link to.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "The link text is typed inside of square brackets '[]' and the URL is typed immediately after the brackets in parenthesis '()'.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Here is an example:\nI try to regularly check [MLB.com](https://www.mlb.com) to keep up on my favorite teams.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Bolding and italicizing can alos be applied to the link text, and you can add inline links to headers as well.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "First, you need to declare the reference, and the thing it links to.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Think of it as declaring a variable, whose value will be a page to visit.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "The advantage of this type of link is that if you link to a page multiple times, you can create the reference and then only ever have to edit the link once.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Here is my example:\nI am super excited for March Madness, so I can make a good [bracket][tournament-challenge]\n[tournament-challenge]: https://fantasy.espn.com/games/tournament-challenge-bracket-2024/\nThe syntax for a reference is \"[reference Name]: www.linktowebsite.com\"\nImages have the exact same syntax as links in Markdown, with only one minor addition: you precede them with a '!'.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "The two types of images are the exact same as links: inline image links, and reference image links.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Also, and exclamation point is only needed with reference image links in the \"call\" to the reference, not the instantiation of the reference itself.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To call special attetntion to some text in a Markdown file, the _blockquote_ syntax can be used.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To do a multi-paragraph blockquote, simply put a > at the beginning of each line, including blank ones.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "If you don't do this, they will be 2 separate block quotes instead of 1 total.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "You can make ordered and unordered lists, and they can be nested within one another.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To make an unordered list, you simply place an asterisk '*' at the beginning of the line.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To make an ordered list, you simply place the number 1. at the start of the line, or whatever number is next in the list.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Tears of the Kingdom  \n    This one might be ranked higher, but I haven't finished it yet.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Unfortunately, the list does not auto continue in all compilers.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "To nest a list you simply put the cursor in front of the bullet/number and indent, then resume making the list as normal.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "As I displayed above, you can also just have a simple paragraph nested in a list item, not another sublist.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Similar to HTML, Markdown renders code as all one line,\neven when words are on adjacent lines.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "THere are two ways to create a space between lines upon rendering.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "The other way is to simply press the spacebar twice after a line, then the next line will render on the line directly below, as it appears in the code.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "I demonstrated it here a few times, but it is hard to see visually.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Anytime you see adjacent lines that are separated, like in this paragraph, you can know it is a soft break.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "This can be really useful in creating subparagraphs in lists.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "text": "Thanks for visiting [The Markdown Guide](https://www.markdownguide.org)!",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "text": "This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements.",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "text": "It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax/) and [extended syntax](https://www.markdownguide.org/extended-syntax/).",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "text": "These are the elements outlined in John Gruber\u2019s original design document.",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "text": "Third item\nFirst item\nSecond item\nThird item\n`code`\n---\n[Markdown Guide](https://www.markdownguide.org)\n!",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "text": "It requires a server to run, and is used one its own to build robust applications, or with HTML to create dynamic websites.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Some of the capabilities of PHP include:\nAccess input into web forms and utilize it.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Find out broswer and operating system of users\nDisplay alternate web page layouts for other users, such as mobile users\nBasic and advanced math\nCreate global HTML templates\nPHP scripts can be placed anywhere within a document, HTML, for example.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Using these tags, PHP scripts are placed inside of HTML documents just like any other HTML element.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The only thing that is case-sensitive in PHP are the variables and constants.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The syntax for variable instantiation in PHP is a $, followed by the variable name, =, and then the variable value.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The value of a variable can be printed by simply putting the variable name in argument of the print function.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Side note: the $ needs to be included in each instance of variable use, it is literally part of the variable name.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Constants can be defined in PHP scripts using the `define` function.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This is the syntax: `define(\"CONST_NAME\", \"Constant value\");` Constants, like variables, are case sensitive, and by convention are always given all-caps names.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "From the \"Getting your Hands Dirty\" lesson, here are a few notes:\nWhen using the `date()` method, PHP has to know the timezone where the server resides, in order to output the correct hour and date for that geographical location.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The date_default_timezone_set() method takes a string that locates the server.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The list of supported timezones can be found at [here] (<http://php.net/manual/en/timezones.php>)\nAnother note on the `date()` method, the arguments passed dictate how the date is displayed.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Arrays work similarly in PHP as they do in other languages: they must contain elements of the same data type, each element has an index, starting at 0 and moving up.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Arrays are created similarly to how variables are in PHP: `$my_array = array(\"value1\", \"value2\", \"value3\", \"value4\");` This will create an array of strings with those 4 values.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "In these arrays, you can set the value of the key, and its corresponding element.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is an example:\nSo, the way that a key is assigned to a value is by putting the key on the left side, followed by an equal sign and greater than sign (`=>`), with the value, whatever its data type, on the right side.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Another common type of arrays in PHP are **Multi-dimensional Arrays**.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Multi-dimensionals are simply arrays that contain other arrays as their elements.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Each array is separated by a comma, just like each element in any normal array.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "In multi-dimensional arrays, the inner arrays do not need semi-colons following them, just commas.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax for a conditional statement in PHP:\n>Side note, `random_int(int min, int max)` can be used in PHP to give a random integer in the given range.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This checks if the values are equal and of the same data type.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nIt is also worth mentioning that integers can be incremented or decrementing in php using the `++` and `--` operators.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Typing `$a++` will increment the value of `$a` by 1, and `$a--` will decrement the value of `$a` by 1.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nThese are useful when you know how many times you want to loop through a block of code, or you have an iterable data type, such as an array.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nThis will print each value in the array, one at a time.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "So, Do while loops will always execute the first iteration, and while loops won't even start unless the condition is TRUE to begin with.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nThere are two types of functions in PHP: built-in functions and user-defined functions.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "There are thosuands of built-in functions in PHP, and they are used to perform specific tasks.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "These functions are used to perform specific tasks, and can be used in conjunction with user-defined functions to create more complex applications.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nThe function is then called like normal.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "To create parameters for the function is the same as other languages as well, you simply put the parameter name in the parentheses of the function definition.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "I can follow this pattern in other websites I may make, to better organize and style them.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This is mainly driven by the PHP `include` function, which allows me to include the contents of one file in another file.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This is a great way to keep the website consistent and organized.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "For example, in the website from the course, instead of coding the header and footer in the `index.php` file, I made separate `header.php` and `footer.php` files.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "I made an associative array in an `arrays.php` file, and then used a `foreach` loop to iterate over that array in my `nav.php` file.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Then I simply included the `nav.php` file in the `header.php` file.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "So, with this setup, to and a new page, I simply code that page in its own php file, and then enter that file name and the page title into the array in `arrays.php` and then the PHP script in `nav.php` will automatically add that page to the nav bar.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "If I read the documentation I should be able to get it to work though.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The underlying skill to learn here is using the documentation and analysis of the code in plugins that I include to improve my ability to include and use plugins in my projects.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Thus, when getting the array for a certain item, the key and the value was needed, so the `foreach` syntax of `foreach($array as $key => $value)` was used.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Creating these templates is useful, because now, all I need to do is create one template page for a dish, and then whenever I want to add a new dish, I simply input the info into the array.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This can have great applications for other use cases, such as templating new page to a website, products in a store, or others.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The query string is usually added to the end of a URL, and begins with a question mark, for example: `dish.php?item=mexican-barbacoa`.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The word after the ?, `item` in this example, is the name of a variable, and the value following the equals sign is the value of that variable.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `$_GET` superglobal is used to collect that data from the query string.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "In the above stated example, the key would be `item`, so `$_GET['item']`would return the variable value, `mexican-barbacoa`.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The method `isset()` is used to check if a variable is set, and works with `$_GET` to check if a variable is set in the query string.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Another method used to protect against header injections (this was a more advanced move), is the `preg_replace` method, which takes in three arguments, first a regex pattern, second what to replace with, and third, the input string to examine.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The form element is used to create the form, the input element is used to create the input fields, and the label element is used to create labels for the input fields.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The form element has an `action` attribute, which is the URL of the page that will process the form data.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `method` attribute is used to specify how the form data should be sent.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `GET` method sends the form data in the URL, and the `POST` method sends the form data in the HTTP request body.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `POST` method is more secure than the `GET` method, because the form data is not visible in the URL.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `input` element is one of the most powerful HTML elements, driven mostly by its attributes.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `type` attribute is used to specify the type of input field, such as text, date, email, etc.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `name` attribute is used to specify the name of the input field, which also sets the key for the `$_POST` superglobal, with the inputted text being the value.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Another common attribute is the `required` attribute, which is used to specify that the input field is required.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "To view a full list of the attributes, consult [MDN Web Docs] (<https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input>).",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `label` element is used to create labels for the input fields.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `for` attribute is used to specify which input element the label is for.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `for` attribute should have the same value as the `id` attribute of the input element.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "This also makes the form more accessible, as it allows screen readers to read the label when the input field is focused, and lets users click on the label to focus on the input field, which is often larger and easier to click on than the input field itself.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "The `$_POST` superglobal is used to collect form data that is sent with the `POST` method to either the current PHP page or another page.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Like `$_GET`, the `$_POST` superglobal is an associative array, so the value of the variable is accessed by using the key.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Another thing that emails need to be sent are the email headers.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Email headers are like the envelope that describe the message.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "They are written in plain text, in specifications that adhere to internet protocols.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Here is an example from this site:\nLastly, the `mail()` function is used to actually send the email.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "It takes in at least 4 parameters, in this order: `mail($recipient_email, $subject, $message_of_email, $email_headers)`\n**Web Hosting**\nHosting my site on the web requires that I pay for hosting services to buy a domain.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "text": "Author: **Brad Hussey**\n---\nLatest Update: **October 6, 2014**\nUpdated all associative arrays to include a string ( \"\" ) wrapping text within the square brackets ( [] ).",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Update: **August 14, 2014**\nUpdated all instances of `\"/assets\"` to `\"../assets\"`, except in **26_Final/Instructor** where `\"/assets\"` is  now `\"../../assets\"`.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "My ambient flashcard app: note of the day\nI find myself often taking diligent notes in my college classes,  but not as often going back to review them.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Over time, I've tried to get better and only putting the most precise and needed pieces of info into my notes, to keep fluff out.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "I also feel that many of the most important things I've learned in my classes are things that I fundamentally understand, but when I'm not using them consistently, I forget them.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If I review my notes real fast things click again, but I don't find myself doing that as much as I'd like.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "This app is my attempt to remedy that, or at least alleviate it.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Note of the day is meant to act like a \"quote of the day\" service, but for your notes.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "My vision is to allow a user to pick a file or directory, and have a simple desktop GUI display selected snippets of notes.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "BSD 3-Clause License\nCopyright (c) 2013-2024, Kim Davies and contributors.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n1.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "text": "For documentation, please visit [nltk.org](https://www.nltk.org/).",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Please read [CONTRIBUTING.md](CONTRIBUTING.md) for more details.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "See also [how to contribute to NLTK](https://www.nltk.org/contribute.html).",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Please support NLTK development by donating\nto the project via PayPal, using the link on the NLTK homepage.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you publish work that uses NLTK, please cite the NLTK book, as follows:\n    Bird, Steven, Edward Loper and Ewan Klein (2009).",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Copyright (C) 2001-2024 NLTK Project\nFor license information, see [LICENSE.txt](LICENSE.txt).",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "NLTK source code is distributed under the Apache 2.0 License.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "NLTK documentation is distributed under the Creative Commons\n  Attribution-Noncommercial-No Derivative Works 3.0 United States license.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "NLTK corpora are provided under the terms given in the README file for each\n  corpus; all are redistributable and available for non-commercial use.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "NLTK may be freely redistributed, subject to the provisions of these licenses.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "The `webbrowser.open('url')` method will open the passed in URL in the default browser.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `webbrowser.open_new_tab('url')` method will open the passed in URL in a new tab in the default browser.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The main method is `requests.get('url')` which downloads the webpage for the passed in URL.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The result of that method is an object of class \"response\" Response objects have some useful methods such as `response.status_code` which returns the status code of the request (200 is OK, 404 is not found, etc.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "Another method of response objects is `response.text` which returns the HTML of the webpage in a string.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `iter_content()` method downloads files in chunks, by iterating over the response object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can specify the size of the chunks with the `chunk_size` method parameter.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can create a BeautifulSoup object by passing in the HTML string and the parser you want to use into the `bs4.BeautifulSoup()` method (case sensitive).",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "HTML string is most easily passed in by passing a response object using the `.text` method.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The parser is specified using '', like \"html.parser\" for example.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `prettify()` method of a BeautifulSoup object will return a nicely formatted string of the HTML.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The prettify method will also add newlines and indentation to the HTML string, improving readability.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "When you make a BeautifulSoup object, each HTML tag in the document is turned into an object of the **tag** class.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can use the `tag` attribute to return the first tag object of the BeautifulSoup object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can also use the `tags` attribute to get a list of all the tags in the soup object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `tags` attribute will return a list of all the tags in the object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can use the `get()` method of a tag object to get the value of an attribute of the tag.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `get()` method takes the name of the attribute as a string, and returns the value of the attribute.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "You can also use the `attrs` attribute of a tag object to get a dictionary of all the attributes of the tag.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `attrs` attribute will return a dictionary of all the attributes of the tag.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "Two main methods for parsing using bs4 are `find()` and `select()` methods.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find()` method will return the first tag that matches the passed in string.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `select()` method will return a **list** of all tags that match the passed in string.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "A sort of middle ground to these tow is the `find.all()` method.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find_all()` method will return a list of all tags that match the passed in string, and take the same type of parameters as the `find()` method (excluding the `limit` parameter, which is exclusive to `find.all`.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "It dictates how many of the corresponding elements will be returned when found.).",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find_all()` method is more powerful than the `find()` method, but the `select()` method is still more powerful than both, because the use of CSS selectors enables extremely specific searches.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The Selenium Module is one that allows programs to control browser windows.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `webdriver.Firefox()` method will open a new Firefox window.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `webdriver.Chrome()` method will open a new Chrome window.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `webdriver.Ie()` method will open a new Internet Explorer window.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `webdriver.Safari()` method will open a new Safari window, and so on with ther browsers.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `get()` method of a webdriver object will open the passed in URL in the browser window.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `back()` method will go back to the previous page, and the `forward()` method will go forward to the next page.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The following paragraph describes some methods that were deprecated when Selenium 4 was released:\n    >The `find_element_by_css_selector()` method of a webdriver object will return the first element that matches the passed in CSS selector.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find_elements_by_css_selector()` method will return a list of all elements that match the passed in CSS selector.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "This relationship also applies for the `find_element_by_name()` method and the `find_elements_by_name()` method.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The same applies for `find_element_by_tag_name()` and `find_elements_by_tag_name()`; `find_element_by_class_name()` and `find_elements_by_class_name()`, and similar methods.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The way that elements are found using Selenium 4 includes using a class called `By`.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `By` class has a number of methods that can be used to find elements.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `By.CSS_SELECTOR` method can be used to find elements by CSS selector.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `By.ID` for an element's ID, the `By.TAG_NAME` method for tag name, and etc.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "An example would be: `element = driver.find_element(By.CSS_SELECTOR, 'p')`.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find_element()` method of a webdriver object will return the first element that matches the passed in method and selector.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `find_elements()` method will return a list of all elements that match the passed in method and selector.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `openpyxl.load_workbook('filemname.xlsx')` method will load an Excel file as a Workbook object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "To get a specific sheet from the workbook, use `workbook['Sheet1']` or whatever the sheet name (the `get_sheet_by_name()` method has been deprecated, as well as the `get_sheet_names()` method).",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "Use `workbook.sheetnames` to get a list of all the sheet names in the workbook.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "When a sheet is accessed, it is returned as a Worksheet object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "To access a specific Cell (the Excel term for the intersection of a row and column), use `workbook['Sheet1']['A1']`.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `value` attribute of a Cell object will return the value of the cell.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `row` attribute will return the row number of the cell, and the `column` attribute will return the column letter of the cell.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "Another way to access a cell is to use the `cell()` method of a Worksheet object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `cell()` method takes two parameters, the row number and the column number(1-26, with 1 being A and 26 being Z), and returns a Cell object.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "An example would be `workbook['Sheet1'].cell(row=1, column=1)`.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The Worksheet object's `max_row` and `max_column` attributes will return the number of rows and columns in the worksheet, respectively.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `iter_rows()` method of a Worksheet object will return a generator object that will iterate over all the rows in the worksheet.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `iter_cols()` method will return a generator object that will iterate over all the columns in the worksheet.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `rows` attribute of a Worksheet object will return a tuple of all the rows in the worksheet.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "The `columns` attribute will return a tuple of all the columns in the worksheet.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "To convert the columns numbers to letters, use the `openpyxl.utils.get_column_letter()` method.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "This method takes an integer as an argument and returns the corresponding column letter.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "To convert column letters to numbers, use the `openpyxl.utils.column_index_from_string()` method.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "This method takes a string as an argument and returns the corresponding column number.",
        "header": null,
        "file": "python_notes.md",
        "last_seen": null
    },
    {
        "text": "Steps of the program:\nTake in the URL as command line argument\nMake sure to pass in the URL as a string with quotes, otherwise a terminal error keeps getting upset at the '&' characters in the URL.",
        "header": null,
        "file": "job_parse.md",
        "last_seen": null
    },
    {
        "text": "Download the page using the requests module\nBecause it will first go to the login page, find a way to keep the session open, or use Selenium to log in.",
        "header": null,
        "file": "job_parse.md",
        "last_seen": null
    },
    {
        "text": "Create a list of the URls of the job listings that contain the keywords\nEither Open the URLs in the browser, or write them to an output file with hyperlinks.",
        "header": null,
        "file": "job_parse.md",
        "last_seen": null
    },
    {
        "text": "In the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Project maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "This Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Representation of a project may be\nfurther defined and clarified by project maintainers.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Further details of specific enforcement policies may be posted separately.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Project maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "text": "Simply provide your GitHub username, and GitProfile will automatically generate a portfolio.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Best of all, you can easily deploy your portfolio to GitHub Pages with just a few clicks, making it accessible to the world in no time.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you want to host your portfolio at `https://<USERNAME>.github.io/<REPO_NAME>` (e.g.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you are deploying to `https://<USERNAME>.github.io`, set `base` to `'/'`.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you are deploying to `https://<USERNAME>.github.io/<REPO_NAME>` (e.g.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Wait a few minutes so that the CI/CD pipeline can publish your website to GitHub Pages.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "You can check the progress in the [Actions](https://github.com/arifszn/gitprofile/actions) tab.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Any time you commit a change to the **main** branch, the website will be automatically updated.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you face any issue viewing the website, double-check the `base` value in the `gitprofile.config.ts` file.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Also, check if **Source** is set to **GitHub Actions** in **Settings** \u279c **Pages** \u279c **Build and deployment**.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you wish to add a custom domain, no CNAME file is required.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Just add it to your repo's **Settings** \u279c **Pages** \u279c **Custom domain**.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "As this is a Vite project, you can also host your website to Netlify, Vercel, Heroku, or other popular services.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Please refer to this [doc](https://vitejs.dev/guide/static-deploy.html) for a detailed deployment guide to other services.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Finally, visit `http://localhost:5173/gitprofile/` from your browser.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "You can leave most of the sections empty if you don't want to display them on your portfolio.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "There are 37 themes available that can be selected from the dropdown.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you do not want to use Google Analytics, keep the `id` empty.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "Besides tracking visitors, it will track `click events` on projects and blog posts, and send them to Google Analytics.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "You can link your social media services you're using, including LinkedIn, X, Mastodon, ResearchGate, Facebook, Instagram, Reddit, Threads, YouTube, Udemy, Dribbble, Behance, Medium, dev, Stack Overflow, Discord, Telegram, personal website, phone and email.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "If you have [medium](https://medium.com) or [dev](https://dev.to) account, you can show your recent blog posts in here just by providing your medium/dev username.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "text": "See below for information on getting started with development and submitting pull requests.",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "Please note we have a [code of conduct](https://github.com/arifszn/gitprofile/blob/main/CODE_OF_CONDUCT.md), please follow it in all your interactions with the project.",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "If you find a bug in the source code or a mistake in the documentation, you can help us by\nsubmitting an issue to our [GitHub Repository](https://github.com/arifszn/gitprofile/issues/new).",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "Make sure that the contribution you want to make is explained or detailed in a GitHub issue!",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "Find an [existing issue](https://github.com/arifszn/gitprofile/issues) or [open a new one](https://github.com/arifszn/gitprofile/issues/new).",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "Once done, [fork the repository](https://github.com/arifszn/gitprofile/fork) in your own GitHub account.",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "To fix lint and prettier errors, run `npm run lint:fix` and `npm run prettier:fix`.",
        "header": null,
        "file": "CONTRIBUTING.md",
        "last_seen": null
    },
    {
        "text": "When we tell them that math is easy, when we encounter difficulty with them they get the message that the difficulty is not with the math but with them as people.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "When he really does expect that of us, he will request that we do so.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This is hard to do with various online resources, so getting the understanding with the book first is good.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Think about setting a limit of how many lines I code before testing.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Both mean \"power set\"\n*The* symbol for and is \"*\u2227*\" and for or is \"*\u2228*\"\n*set* difference is written as \"-\" or \"\\\"\n\"*\u222a*\" and \"*\u2229*\" are union and intersection respectively.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Lowercase letters are usually used to denote elements of sets.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This done by listing the elements of the set within curly braces.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "For example, the set of all vowels in the English alphabet, V can be written as V = {a, e, i, o, u}.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A datatype is the name of a set where all the elements of the set have satisfy certain properties, and can have certain operations performed on them.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Subsets\n: *A* is a subset of *B* if every element of *A* is also an element of *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "To say that *B* is a superset of *A*, use the symbol *B* \u2287 *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Cardinality of a Set\n: The cardinality of a set *A*, denoted |*A*|, is the number of *distinct* elements in *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Power Set\n: The power set of a set *A*, denoted P(*A*), is the set of all subsets of *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If a set has *n* elements, then its power set has 2^n elements.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Ordered Pairs (Ordered n-tuples)\n: A pair of objects in a specific order.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It is equal to {b1, b2, ... bn} if and only if a1 = b1, a2 = b2, ... an = bn.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The ordered pair (a, b) is equal to the ordered pair (c, d) if and only if a = c and b = d.\nCartesian Product\n: The *set of ordered pairs* where each element {*(a,b)* | a \u2208 *A* \u2227 b \u2208 *B*}.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The order of the sets in the Cartesian Product determines which values are the first coordinates and which are the second.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The Cartesian Product of the sets *A1*, *A2*, ... *An* is an ordered tuple (*a1*, *a2*, ... *an*), such that *ai* \u2208 *Ai* for all *i*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A relation from set *A* to set *B* is a subset of the Cartesian Product *A* x *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A relation from set *A* to itself is called a relation on *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A relation does not need to contain every element of the Cartesian Product.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Intersection\n: The intersection of two sets *A* and *B* is the set of all elements that are in both *A* and *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Difference\n: The difference of two sets *A* and *B* is the set of all elements that are in *A* but not in *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This is denoted *A* - *B*, and can also be called the compliment of *B* with respect to *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The set of all elements that are in *B* but not in *A* is denoted *B* - *A*, and is called the compliment of *A* with respect to *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Complement\n: The complement of a set *A*, denoted *A* (with a line above it lol), is also the compliment of *A* with respect to the universal set, *U*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Here is some important information about Python type annotations from the Project 0 starter code:\nHere is a link to the commit message guidelines to follow for this class: [Git Commit Message Guidelines](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53)\nFunctions\n: Given two nonempty sets, *A* and *B*, a function *f* from *A* to *B* assigns exactly one element of *B* to each element of *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The element of *B* assigned to an element *a* of *A* is denoted *f(a)*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The set *A* is called the domain of *f*, and the set *B* is called the codomain of *f*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The range of *f* is the set of all elements of *B* that are assigned to elements of *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The image of *a* under *f* is the element of *B* assigned to *a*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *f* is a function from *A* to *B*, we write *f*: *A* \u2192 *B*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A function is called a one-to-one function, or an injective function, if each element of the domain is assigned to a distinct element of the codomain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A function is called an onto function, or a surjective function, if each element of the codomain is assigned to an element of the domain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "In other words, there are no leftover elements in the codomain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This means the range of the function and the codomain are the same.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A function is called a one-to-one correspondence, or a bijective function, if it is both one-to-one and onto.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A function is called an invertible function if it is a bijection.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The inverse of a function *f*, denoted *f*^-1, is a function from the codomain of *f* to the domain of *f*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The composition of two functions *g*: *A* \u2192 *B* and *f*: *B* \u2192 *C* is *f*(*g*(a)).",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "For this to be defined, the range of *g* must be a subset of the domain of *f*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A partial function is a function that maps *A* to *B*, but the domain of the function is a subset of *A*, not the whole set.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Partial functions are undefined for some elements of the domain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A function where the domain is the whole set is called a total function.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Finite State Machines\n: Something that finds patterns and outputs something.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It is something that be a mathematical model, or a computer program.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It involes a few parts:\nThe set of states *S*\nthe set of inputs *I*\nthe set of outputs *O*\nthe transition function *f*\nand the output function *g*\nStates have a small amount of memory, *s1* remembers that a 'c' has been seen, in the lecture example.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "However, *s2* will only remember that a 'o' has been seen, but it will know that a requirement of getting to *s2* is to come from *s1* where a 'c' must have been seen.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "There can also be an error state, labeled *sERR* in the lecture example.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Having the state machine be defined as an object with methods for each state, rather than a slew of if-else suites, maintains the flow control, but is more readable and maintainable.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It maintains the flow control because that code obviously doesn't do anything until the function is called.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Symbols include \":\"\n*Facts* are things we know about the world.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Symbols include \":-\"\n*Queries* are the things we want to know.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It also has user-defined commenets, strings, and identifiers.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Token\n: A token consists of 3 parts: the type, the value, and the position (i.e.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This means that any keyword will match the token of the keyword, and an ID token.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I'll create a FSM for each specific pattern I want to recognize.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If two FSMs have an read a pattern, the one that \"wins\" or the token type that gets added to the list is the one that has the longest pattern.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Line 62 on `fsm.py` is an example of the Ternary operator in Python.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I have discovered that this is happening because of the fsm.py implementation\nThe `match` keyword needs to be used for pattern matching for the tokens that take in a literal as declared in their class definitions.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A static method is one called on the class itself, not an instance of the class.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "These methods can be called without passing their parameters, and are used to create utility functions that don't need to be called on an instance of the class.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "There is a very handy method for strings and chars called `isalnum()`.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This method returns True if all the characters in the string are alphanumeric, meaning they are either letters or numbers.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Another thing that helped a ton was drawing out the FSMs on paper.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This made writing out the code and the state functions much easier.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Formal Definition:\nA finite set of states *S*\nA finite set of input symbols *I*\nA transition function *f*: *S* x *I* -> *S*\nA start state *s0* \u2208 *S*\nA set of accept states *F*\nSome symbols:\nA double circle is an accept state\nThe lambda symbol is the empty string\nRegular Expressions and FSA are cousins, both pattern manager tools.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If V is the vocabulary of a language, then V* is the set of all strings that can be made from the symbols in V. This includes the empty string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "String\n: A sequence of elements of *V*, the accepted characters.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Generators\n: Tools used to create all strings in a language, or the set V* in this example.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Recognizers\n: Tools used to determine if a certain string is in a language.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Regular Expression Base Cases are: *a*, *\u03bb*, and *\u2205*, where *a* is a set {*a*}, *\u03bb* is the empty string, and *\u2205* is the empty set.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Regular expression operations are concatenation, union, and Kleene star.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Concatenation is the operation of putting two regular expressions together.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Union is the operation of combining two regular expressions.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Kleene star is the operation of concatenating a regular expression with itself zero or more times.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It is possible that no regex can be written to generate certain patterns, such as matching parenthesis or curly braces.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This is because regexes are not powerful enough to match these patterns.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Grammar\n: *G* = (*V*, *T*, *P*, *S*), where *V* is the vocabulary, *T* is the set of terminals in the vocab, *V*-*T* is the set of nonterminals, *S* is the starting nonterminal and *P* is the set of productions.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Terminal\n: A symbol that is used to build up a string\nNonterminal\n: A symbol that is used to build up a string, but is not in the final string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Production\n: A rule that describes how to build up a string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Derivation\n: A sequence of strings that starts with the start nonterminal and ends with a string of terminals.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Derivation cannot stop when nonterminals are present in the string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Leftmost derivations start at the leftmost nonterminal and work their way to the right.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Rightmost derivations start at the rightmost nonterminal and work their way to the left.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The root is the start nonterminal, and the leaves are the terminals.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Parse Trees are read from left to right, reading only the leaf nodes.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Backus-Naur Form (BNF)\n: A notation for describing the syntax of a language.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Project 2 uses lowercase for the nonterminals and all caps for the terminals.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The right side can be any string of terminals and nonterminals.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Context-Sensitive Grammar\n: A grammar where the left side of the production can be a string of terminals and nonterminals.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Parse Tree\n: A tree that shows the production rules used to derive a valid string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A grammar is ambiguous is there exists a terminal string that has more than one valid parse string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Ambiguity in computer science is bad because it leads to inconsistent outputs.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Operators with higher precedence need to be lower in the parse tree.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Precedence ambiguity is fixed by creating new nonterminals that push the higher precedence operators lower in the parse tree.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Associativity\n: The order in which operators are evaluated when they have the same precedence.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Addition and subtraction are left associative, meaning they are evaluated from left to right.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Exponentiation is right associative, meaning they are evaluated from right to left.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Associativity ambiguity is fixed by creating new nonterminals that push the execution into the correct order.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Left associativity is fixed by using left recursion, and right associativity is fixed by using right recursion.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The facts and rules can be empty, but there must be at least one query also.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The 'Schemes:' part is required for each of these 4\nThe function-like parts of the datalog program are called predicates.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Gives meaning to the string\nPrefix notation, infix notation, and postfix notation.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The FIRST set of a nonterminal is the set of leftmost terminals that can be derived from that nonterminal.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "AKA, the first letter of the strings that can be produced from that nonterminal.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The FIRST set of a string is the set of leftmost terminals that can be derived from that string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A grammar is LL(1) if\nFor all nonterminals *N*\nthe FIRST sets of all RHS of rules using N don't overlap (in other words, none of the productions have the same elements as their left most terminals)\nLL stands for Left-to-right input, Leftmost derivation.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Review the parts and rules of Recursion:\nParts of recursion:\nInitial call\nBase case check\nRecursive call\nRules of Recursion:\n  0.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Assume the recursive call worked and solve the k --> k + 1 challenge.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Make sure that the number of recursive calls is reasonable\n  5.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Show that if it works correctly for k, then it will work correctly for k + 1.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The heading row is for the input character that is being read, and the heading column is for the nonterminal that is at the top of the stack.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The cell at the intersection tells what to push onto the stack (and implies that the nonterminal of that row is to be popped off the stack).",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Trace\n: A record/history of the productions used to parse a string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "It is a record of the stack and the input string at each step.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Head predicates have parameters of ID types, and queries and other predicates can have parameters of string or ID types.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "In Project 2, I'll have to develop a way to check if the next input character is in the first set of any of the productions for the nonterminal at the top of the stack.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "When I apply recursion, I'll have to use the input char being in the follow set of the nonterminal on the top of the stack as the base case.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "FOLLOW Sets\n: A set of all of the terminals that can legally follow that production.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Formal definition: FOLLOW(A) = *t* \u2208 *T* : *S* =>* *wAtn*, where *w* is all of the terminals that preceed *A*, and *n* is all of the terminals that follow *t*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A lambda in the parse table indicates to pop the stack, and not advance the input.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *p* and *q* are statements, then *p* ^ *q* is the conjunction of *p* and *q*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *p* and *q* are statements, then *p* v *q* is the disjunction of *p* and *q*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *p* and *q* are statements, then *p* -> *q* is the conditional of *p* and *q*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Implication\n: The relationship between the antecedent and the consequent in a conditional.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Conditional-disjunction equivalence\n: The conditional *p* -> *q* is logically equivalent to *~p* v *q*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Essentially, trade and implication for a disjunction (with a negation up front).",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *p* and *q* are statements, then *p* <-> *q* is the bi-conditional of *p* and *q*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Compound Proposition\n: A proposition that is formed by combining two or more propositions with logical operators (negation, conjunction, disjunction, conditional, bi-conditional).",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Tautology\n: A compound proposition that is always true, no matter the truth values of the propositional variables within it.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Contradiction\n: A compound proposition that is always false, no matter the truth values of the propositional variables within it.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Contingency\n: A compound proposition that is neither a tautology nor a contradiction.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Logical Equivalence\n: Two compound propositions are logically equivalent if they are their bi-conditional is a tautology.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Proof\n: Identifying facts in the world, then using logic to derive from them new facts, and then concluding an interesting fact.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "In propositional logic, facts are represented as propositions.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Regardless of what facts are true, a substitution using logical equivalences can always be done.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Two Proof tools:\n**Logical Equivalences**: Used to replace one fact with another, foundation is tautology.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Common Rules of Inference:\nModus Ponens\n: The basic concept of implication.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Three proofs patterns:\nDeduction: *Deducing* a conclusion from existing premises to create new facts, using logical equivalences and rules of inference.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Contradiction: Negating desired conclusion, then deducing new facts until we reach a *contradiction*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *p* V q and *~p* V r, then q V r. Works with multiple premises too.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Using resolution and contradiction, anything that is provable can be proven.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The triple quote operators `\"\"\" \"\"\"` can be used on a string with new lines, to insert the newline characters when comparing a string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A new variable must be used to store the return when working with other iterables, like a set.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Use this when dealing with iterables to have elements added to the list, rather than the iterable itself.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "To then assert the exception, use the `excinfo` fixture to access the exception object.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Syntax looks like this:\nReminder: tautology is a proposition that is true in all possible worlds, contradiction is false in all possible worlds.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Logical Equivalences can always be used and counted on, rules of inferenece can be used in worlds where the premises are true.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "State the contradiction\nRules for CNF:\nPropositions are grouped by disjunction and separated by conjunction\nNegations can only precede a propositional pariable\nImplication not allowed in CNF\nA *predicate* is a parameterized proposition.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Values for which the predicate is true\nThe Schemes section of a datalog program declares the predicates, and the Facts section declares the values for which the predicates are true.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "In the rules section, the commas signify conjuction, and the colon-dash signifies implication (towards the direction of the colon).",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Universal Quantifier\n: The symbol \u2200 is the universal quantifier.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *P(x)* is a predicate, then \u2200*x* *P(x)* is true if *P(x)* is true for every value of *x* in the domain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Existential Quantifier\n: The symbol \u2203 is the existential quantifier.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "If *P(x)* is a predicate, then \u2203*x* *P(x)* is true if *P(x)* is true for at least one value of *x* in the domain.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Universal and existential quantifiers have the highest precedence of all propositional operators.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "A variable is said to be *free* if it does not have a quantifier.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "De Morgan's Laws with Quantifiers:\nNegation flips the affected quantifier when moved inside the quantifier to the proposition variable.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "There can be nested quantifiers, where there are multiple quantifiers consecutively.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "To jump from quantified variables to specific instances of them is called **universal instantiation**.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Moving from specific to general is **universal generalization**.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Nesting quantifiers is needed when dealing with multiple variables.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The order of the quantifiers is important, and the order of the quantifiers is the order in which they are written.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Repeat\nWhen converting to CNF, getting rid of implications is a good first step.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Using universal generalization in a proof usually includes universal instantiation, because most of the rules of inference don't work well with quantifiers.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Also, when using universal instantiation, think of it as bringing in an arbitrary and specific instance of the domain, \"*an* instance\" not \"*the* instance\".",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Closed-world assumption\n: Don't have the full definition, but Prof. Goodrich explained that this is what allows us to know that the bound variableds x and y have the same domain in the proof.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I am still having significant challenges with the testing pane in VSCode.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I think it has to do with the pytest config that I did in project 1, and where I have Pytest installed.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I'm just using the terminal to run the tests for now, I'll figure out the testing pane later.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "DO NOT OVERLOOK***\nThe testing pane in VSCode was not working with my usual dev set up because it can't access the project directory to configure the pytests.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "To resolve this, open the project directory in a new window, and then the testing pane should work.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "For some reason, the definition of the `RelationTuple` type made it so that I couldn't use the standard `tuple()` constructor.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This wasn't necessarily a problem, but I want to eventually try and understand why this is the case.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "An issue that I ran into later in `Interpreter.py` , was the relation that I was passing in was not actually populated with anything, it wasn't accessing the values in the Interpreter object's `relations` dictionary.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I wanted to avoid memory issues, but I also needed changes to compound when I would have queries that require multiple relational operations.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "So, I assigned the relation I was passing to the methods to the deep copy I made, and then had it update itself as methods were called.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Now the only bug I seem to have left is that the interpreter is not able to find answers to queries where every single parameter is a constant/string.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I solved this one, by determining that in the case where the query was asking for all strings, and all the same strings, because I was using the `index()` list method, it was returning the index of the *first* occurence of the passed in value.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I simply fixed this by using a variable to keep count of the number of variable that I was on for that query, and using that to correctly index the list of headers for the select operations.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Now, it appears that the only other bug I have is with `select_eq_col`, returning too many matches, so that should be the last bug.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Here is a useful reference of how to write the MyPy type annotations for different types: [Built-in Types](https://mypy.readthedocs.io/en/stable/builtin_types.html)\nSomething important I've learned is that sets are non-indexable.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "But, they are able to be made easily into lists, using the `list()` constructor.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Tuples, although imutable, can actually be added using just the normal addition operator.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Case 5  - two common headers with duplicate values\nThis case works, but I need to dig more to understand exactly why, I thought the .remove() method that I used with some lists would cause problems.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I learned while working with `eval_rules()` about the StopIteration exception with iterators.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "My understanding is that these are thrown when `next()` is called on the iterator, but it has not yielded anything else.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I learned that `yield` pauses execution and later resumes at the same point, while `return` ends the function and returns a value.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "So with iterators, The number of times `next()` can be called before a `StopIteration` exception is thrown is the number of times that a `yield` statement is executed, either through loops or subsequent calls to the function.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I need to begin the habit of commenting my code as I go along, this will make things much easier.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I went to the TA lab, and I started this last night but had it reiterated there, that clean code is important.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "In some cases the complex issues caused by unclean code are what break a program.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The 2 specific principles that the TA taught me were 1: Don't define a nested method, just define it at the top level and use it in the method I need, and 2: don't define methods in for loops.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "One of the TAs helped me learn that the `-k` flag in pytest lets me run a certain case of a parameterized test.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "My big bug that was the majority of failures was the way that I was looping through the rules, using my \"rule queue\".",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "The problem with that method was that if the initial evaluation does not change anything, it is never evaluated again, but the evaluation of a later rule could change the relation so that the initial rule would now be able to produce something.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Or, to use more proper terms, if one rule was evaluated before its dependencies were, it would not be evaluated again after the dependencies were evaluated.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "I fixed this by using a while loop that would continue until the relation was no longer changing.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "Text for Project 5a:\nLooping through a dictionary in Python is a bit particular.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "By default, when using `for entry in MyDict`, the loop will iterate through the keys of the dictionary.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "To iterate through the values, use `for entry in MyDict.values()`, and to iterate through both the keys and values, use `for key, value in MyDict.items()`.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "text": "This class is meant to take me from saying to myself \"I trust that this works, but I don't know how\" to \"I know how this works, and what happens behind the scenes\".",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This will be accomplished for the topics in this class, but I will still always be in the \"I trust that this works\" stage for some topic until I learn it better.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Abstraction\n: A model of something that hides or ignores a certain level of detail.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "C's Data types are:\nWhole number types:\n`char`: smallest, enough space to represent a single character (all the ASCII characters), and numbers up to 256.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Floating point numbers:\n`float`: normal size\n`double`: higher precision, due to more decimal places and more space.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To output variables in C, format strings are used, unlike in C++ where variable names can be used.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When this is done, the full string with the format string character is the first argument, and the variable name is the second argument.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Common format strings:\n`%d`: integer\n`%f`: float\n`%c`: char\n`%s`: string\n`%x`: hexadecimal\n`%l`: double\n`%p`: pointer\nInstead of `cin` from C++, `scanf` is used in C to read from `stdin`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The arguments similar to `printf`, with the format string first, but then it needs the address of the variable to assign the value to, not the variable name itself.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "You can also scan in multiple variables at once, separated by commas.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Heres an example:\nA format code needs to be included for each variable being scanned in, regardless of if the data types are the same.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each data type in C has a specific size:\n`char`: 1 byte\n`int`: 4 bytes\n`short`: 2 bytes\n`long`: 8 bytes\n`float`: 4 bytes\n`double`: 8 bytes\nBecause of discrepancies in data type sizes across various hardware, the `stdint.h` library was created.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This library contains data types that are guaranteed to be a certain size, regardless of the hardware.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Examples:\n`int32_t`: 4 bytes\n`int64_t`: 8 bytes\n> **Aside**: Processors are referred to by their _word size_, which is the size of an individual memory address, and how many bits are processed by the CPU at one time.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Hexadecimal is often used to represent memory addresses, because it is more compact than binary, as 1 letter of hexadecimal represents 4 bits, _so 2 letters represent 1 byte._\nHexadecimal numbers usally have a leading `x` or `0x` to indicate that they are in hexadecimal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The most significant byte is stored in the highest address, and the least significant byte is stored in the lowest address.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "One important thing about arrays in C, is that nothing stops you from accessing indeces outside the array range.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If you try and access an index outside the array, it compiles and will return a zero.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Typecasting is done by putting the new type in parentheses before the variable, such as `(char *)ip`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In different bases, the value of a place is determined by raising the base to the power of the place.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In base 10, you raise 10 to the power of the place, with the one's place starting at 0.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Hexadecimal is 16^i (hex does get more complicated in other ways, though).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The number in each place tells how many of that place there are.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When converting from binary to hex, start from the right (least significant) and evaluate in groups of 4 into hex characters, through the whole binary number.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When converting from hex to binary, expand each hex digit into the corresponding nibble.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Modulo divide n by 2 (without changing n), the result is the bit for the next least significant digit.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In addition, when you would need to \"carry a 1\" in base 10, you do that same thing in other number bases.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Multiplication and division can be tricky when done arbitrarily, but multiplying and dividing by the base is easy, because you simply add or subtract a place to the number, adding a 0 to the right if multiplying by the base, or remove the rightmost 0 when dividing.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Recap: **Bit-shifting** is multiplying or dividing by 2 in base 2.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This can be done with the `<<` and `>>` operators, respectively.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Using these operators in other number bases will simply multiply by 2, not add or remove number places like in binary.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So far, we've just been dealing with unsigned data types when converting between decimal, hex, and binary.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Now, we are going to focus on how to represent signed, or negative, numbers in binary and hexadecimal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "We want to shoot for a method of represntation that **1**, does not waste or duplicate values, **2**, makes numbers easy to negate, and **3**, allows the addition circuitry to be used for subtraction.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The representation method that computers use is called **Two's Compliment (2C)**.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "With this method, the most significant place value becomes negative, and the rest of the place vales are positive.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Adding the values in the present place values gives the number being represented.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To negate a number in 2C notation, flip the binary digits, and then add 1.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When converting between signed and unsigned, the bits themselves stay the same, they just get interpreted differently.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "And, because 2C focuses on not wasting spaces, any bits for positive numbers will be unaffected.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When an expression in C mixes signed and unsigned numbers, the compiler implicitly casts to unsigned number.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This is a cause of lots of strange bugs and non-intuitive behavior.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Conversions between sizes are referred to as _truncating_ for moving to a smaller type, and _expanding_ for moving to a larger size.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When expanding, the lower order bits stay the same, and the higher order bits are filled in.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "With unsigned numbers, these higher orders are filled in with 0.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, if pointer arithmetic is being used to get a value from a certain address, the resulting dereferencing operator should be used with a cast to the type used in the type declaration of the variable being used.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "For example:\nAnother issue is overflow when doing arithmetic, and assigning results to intermediate values.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This can cause overflow if data types aren't watched carefully.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This can be avoided by declaring intermediate values as larger data types, or using one-line expressions that don't require intermediate values.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This is equivalent to multiplying by 2^i, where i is the number of places shifted.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Right shift `>>`\n: Shifts the bits of a number _to the right_ by a certain number of bits.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This is equivalent to dividing by 2^i, where i is the number of places shifted.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Includes the logical right shift and the arithmetic right shift.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The logical right shift fills in the leftmost bits with 0s, and the arithmetic right shift fills in the leftmost bits with the sign bit.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Bitwise AND `&`\n: Compares the bits of two numbers, and returns a number with a 1 in the place where both numbers have a 1, and a 0 otherwise.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Bitwise OR `|`\n: Compares the bits of two numbers, and returns a number with a 1 in the place where either number has a 1, and a 0 otherwise.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Bitwise XOR `^`\n: Compares the bits of two numbers, and returns a number with a 1 in the place where only one number has a 1, and a 0 otherwise.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Bitwise operators are mostly used for 2 reasons: **1** to extract some of the bits of some type, or **2** to set some of the bits to a type.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When focusing on a bit, there are 3 main goals I can have: **1** set the bit to 1, **2** set the bit to 0, or **3** leave the bit unchanged\nTo achieve one of these goals, use the AND + OR operators between the target variable and a mask to get the desired goal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To set all bits to 0, perform AND with something with the value 0.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To set all values to 1, perform OR with something with the value 1.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Example: you want to know what bits 0-3 of the following char are.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, bits 0-3 we want unchanged, and all others we want to be 0 So, this is what follows:\nAs opposed to the bitwise operators, there are the logical operators in C: `&&` for AND, `||` for OR, and `!` for NOT.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Rather than working bit-by-bit, they treat the argument as a whole, and evaluate it as True (non-zero) or False(zero).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It represents logic that all of computation can be built off of.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It can be represented mechanically (hole punched or not, punch cards), and electronically (charge or no charge, etc).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "One of the physical building blocks of implementing boolean algebra is the electronic switch, which would open or close a gate based on if there is electric current.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The next step after the electronic switch, as they were slow and failed with wear and tear, was the vacuum tube.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "ENIAC was a famous/historical computer that used vacuum tubes, and broke almost daily.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Made out of semiconductors, able to switch 10,000 times per second, was smaller and cheaper.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Moore's law: number of _transistors_ on a computer chip(CPU), doubles every 2 years\nToday, transistors are < 50 nanometers thick, and can switch millions of times per second.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Transistors will essentially, keep a gate open if voltage is high, or shut off the gate if voltage is low.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "From the boolean transistor gates NOT, OR, and AND, we can create all other functions needed.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Y86-64 is an assembly language called \"simple assembly\"\nX86-64 is \"real assembly\" or what all code gets compiled down to.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Processor state: The current status of execution in the processor.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Includes:\nMemory: stores bytes for data, programs\nRegisters: The \"scratch paper\" for the CPU.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Processor status: Includes:\nProgram Counter (PC); Address of next instruction\nCondition Codes: 1-bit flags that show results of most recent math/logic operation.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Include ZF (zero), SF (sign), and OF (overflow)\nProgram Status (Stat): Status codes for a program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Include: `AOK` (normal operation), `HLT` (operation halted by instructions), `ADR` (invalid address encountered), and `INS` (invalid instruction encountered)\nAssembly instructions directly manipulate the processor state.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It does this with actions like moving values, performing operations on values, writing new values, checking conditions, etc.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "All instructions are extremely simple, they do exactly 1 basic step.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some assembly notations:\n`q`: quad-word, 64 bit/8 byte\n`b`: byte, 8 bit/1 byte\n`w`: word, 16 bit/2 bytes\n`l`: double-word, 32 bit/4 bytes\nY86-64 only works on quad-word values.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each instruction has an binary encoding to perform the instruction in the hardware.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Syntax for these instruction names encode **the source and destination, in that order.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "You can also specify an address a certain number of bytes away from something.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "One of the registers must be overwritten, the destination register is one of the sources.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When using binary/bitwise operators, the destination, is the **left** operand.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, the right operand in assembly is the **left** operand in normal C code (in both bitwise and arithmethic instructions)\nA bit more info about these:\n**ZF**: results in 1 if the last ALU operation is exactly 0.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To remember these combinations that allow for boolean logic, imagine that the flag is set to 0 or 1 based on the output of the last ALU operation.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The destination, `Dest` can be a hardcoded address, like `24`, `8(%rax)`, or a label, like `loop`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Using the stack instructions, `pushq` and `popq` both have the same syntax and do 2 things.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This will resume execution from where the function was called.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Assembly source code essentially tells the simulator how to fill up memory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, when I run instructions on the simulator and see the values pop up on the lines of memory where each instruction is on the right panel, those are the encodings for their encodings.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each register also has its own encoding, so that the registers being used can be included in instruction encodings in one digit.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The sequential architecture is organized in **stages**, and each stage performs a part of the necessary steps for an instruction.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "These 6 stages are repeated until the `halt` instruction is given, or an error occurs.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Details about each stage for different instructions are given in _computation tables_.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "These can be found in the textbook in chapter 4, and are a type of pseudocode for how instructions work at a lower level.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "To pipeline, registers are made to store values between multiple stages.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This allows for multiple instructions to move through a pipeline at once.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This helps processors work faster, but does have some challenges, like branch prediction (waiting on a previous instruction), and the fact that different instructions need different amounts of time to execute.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Using a stack is useful for computer programs, because it naturally fits the procedural nature of programs.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Whatever is stored in the register `%rax` is what will be returned at the end of a function call in Y86.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "However, all of the 32/16/8 bit registrs can still be accessed (this is why x86 is backwards compatible).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "For example, the 32/16/8 bit registers of `%rax` are `%eax`, `%ax`, and `%al`, respectively.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If I change `%al`, I am actually also changing `%ax`, `%eax`, and `%rax`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This picture shows the corresponding alternate bit registers:\n!",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Just `movq` with different types of operands, and x86 interprets what the operands are.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Uses `b`, `w`, `l`, or `q` in place of `x` to compare values of the corresponding data size.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, `movq 6(%rdx), %ax` would move the value 6 bytes, or 6 memory addresses.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Basically, an object in the struct of size _L_ bytes needs to be at an address that is a multiple of _L_.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Gaps or empty memory locations are used to fulfill this requirement.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Users can specifically design their inputs to attack a program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The key idea in these is, an input can line up its data with the return address of a function, it will then overwrite the return address with the input (often an address for some attack code).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Another type of attack that builds off of buffer overflow attacks are **injection attacks**.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "These are similar, but they involve injecting executable code into the input, as well as overwriting the return address.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Then the function taking input will return to the injected code, and execute it.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In Dr. Mercer's words, the idea behind these attacks and \"return oriented programming\" is to \"break up the continuation\" of a program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The \"continuation\" of a program is where the execution continues to, and where it moves forward to after returning from a function call.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "My work in the attack lab will involve using buffer overflow attacks and injection attacks.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some programs put protections in place to guard against these attacks, such as randomizing the contents of the stack, or making code in the stack non-executable.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "However, through _return-oriented programming_, these protections can be bypassed.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Input your attack string\nWith what I have learned so far, I know that the way that memory is accessed matters.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "A nested for loop that goes through a 2D array, for example, will be almost an order of magnitude faster if it iterates through row-by-row, rather than column-by-column.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In computing, we want memory is fast, large, reliable, and cheap.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The alternative then, is to mix memory with different characteristics, to make all memory seem to fit all of these.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "At the top is a little bit of fast and expensive memory, and the bottom is a larger amount of slow and cheap memory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Cache\n: a place for hiding, storing, or preserving treasure or supplies.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It stores some, but not all, of the data from the level below.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Then each level can have a faster level than itself access the data it needs.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some caching terminology:\n**working set**: all of the data blocks that are needed to run a program, or a part of it.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Designers will often talk about miss rate, but the metric that is ultimately most important is _execution time_.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "There are 2 main types of locality:\n**Temporal locality**: If a memory location/piece of data is accessed, it is likely to be accessed again soon.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This means that the CPU can perform 2-3 billion operations per second.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, a latency of 1 billion cycles is really less than a second in our measure of time, but for a computer that is a long time.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some fundamental and enduring properties of hardware + software systems:\n1.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Faster storage tech virtually always costs more per byte, is smaller, and needs more power.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "General Cache organization involves sets, lines, and blocks.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each set consists of a certain number of lines, which each consist of 1 block.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So the number of lines in a set = the number of blocks in a set.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, the size of a cache = #sets x #lines x #bytes per block.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each block also has some additional info besides just the data.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It has a \"valid bit\" at the start, which indicates if the block is valid or not.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "For example, on boot, all the valid bits in all the caches should be 0, since nothing has been opened or accessed.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Each selected address has a tag, set index, block index, which helps determine which block in the set is being accessed, which set in the cache is being accessed, and which part of a block, respectively.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The tag combined with the set index is used to uniquely identify each block in a cache.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "A **direct-mapped cache** is a cache where each set has one line/block, or E = 1.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "A good example of this, and how to read/identify blocks from an address using tags, set indexes, and block indexes is in this image:\n!",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "There is something important about using lower bits in an address for the set index.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think it keeps the cache from becoming a copy of memory, but I'll need to ask about this to understand it better.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When a set has more than one line/block, and a replacement needs to be made, different types of _replacement policies_ can be used.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some examples are:\nRandom line\nLeast Recently Used (LRU), replace the line that hasn't been used for the longest time\nLeast Frequently Used (LFU), replace the line that has been used the least often\nThere are more complex replacement policies out there, but they can become more expensive and cost more time to implement.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "But, they can be more effective, and lower down the memory hierarchy, they can be well worth it in the long run, since miss penalties are so much higher.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The 1st dimension of the array is the sets of the cache, and the 2nd dimension is the lines/blocks in each set.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The address of a something in a cache has a type of inverted index into this 2D array: `[tag][set index]` because the tag specifies the block in a set, and the set index specifies the set in the cache.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "On the lab, I struggled understanding how the miss rate of the C code was calculated.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "By default, the terminal wil always open in your home directory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Different flags used with the command dictate which of these it does.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "C programs need to be compiled, just like the other languages I've used that have a compiled runtime model (Java and C++).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Here is a breakdown of the syntax for the `scp` command: `scp <source> <destination>`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If a file path needs to be specified for either the source or the destination, it should be in the form `<username>@<hostname>:<path>`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In the context of this class, that will usually look like `jtoosh@moat.cs.byu.edu:<path>`, when I'm using the remote machine.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When my local machine is one of those parameters, a username and hostname is not needed, just a file path relative to the current directory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It has an optional argument of a directory that is put after the command.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If no argument is given, it will print the tree of the current directory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This simply shows the full directory structure with the current directory or the argument directory as the root, and at the bottom print the number of subdirectories and files in the tree.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Whatever is on the \"greater than side\" or \"being eaten\" is what is being redirected.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The process involved the command `git remote add origin <url>`, to set the remote origin, and then `git push -u origin master` to push the local master branch to the remote origin.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I ran into some issues and need to study git a bit more to understand how this process really works.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The tutorial site is pretty extensive, and provides lots of good information, beyond the technical stuff, such as the history of C and is advantages and disadvantages.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It attach the link [here](https://www.tutorialspoint.com/cprogramming/index.htm) for reference.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It is used extensively in operating systems, language compilers, text editors, and other applications.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It is a lower level language than others, meaning it interacts more directly with the computer hardware and memory.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The UNIX operating system is written entirely in C.\nC uses header files to include libraries, similar to C++.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Some common ones are `stdio.h` for standard input and output, `stdlib.h` for standard library functions, and `string.h` for string manipulation functions.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Like C++, C uses the `main` function as the entry point for the program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "It returns an integer, which is the exit status of the program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "By convention, a return value of 0 means the program executed successfully.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Other functions are declared with simple signatures, just the return type and the name of the function.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The implementation of the function is then defined later in the file.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Key parts are the **dereferencing operator** `*`, and the **address-of operator** `&`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The `*` is used to declare a pointer, and it returns the value in the memory address a pointer points to.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The `&` is used to get the memory address of a variable, and is used when defining a pointer.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Strings are not a built-in type in C, but are represented as arrays of characters.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "However, strings don't have to be created only by making arrays of chars.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "They be created by making a char array, but then typing a string in double quotes, like other languages.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When dealing with strings in I/O, the `\"s%\"` format string allows strings to be read in and printed out.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "However, the `scanf` function can still only assign read in values to char arrays, and a length of the array must be specified, and acts as a type of character limit.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I want to figure out why the behavior for multi-word strings is the way that it is.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Divide the decimal number by 16, then look at the remainder.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The hex representation of the _remainder_ is the next least significant digit in the hex number.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Now, divide the quotient by 16 again, and repeat this process with the remainder until the quotient of the floor division is 0.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If I understand the project write-up correctly, the starter code contains a function for parsing the command line, and a skeleton of the `readAndPrintInputAsHex` function.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This function calls 2 functions that I'll need to implement: `printDataAsHex` and `printDataAsChars`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Then I'll repeat the process for a `readAndPrintInputAsBits` function, which should use a `printDataAsBits` and `printDataAsChars` function as well.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This project write up explained a couple of arguments for the `gcc` compile command.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The `-o` argument allows you to name the resulting executable something other than `a.out`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This argument comes after the file name of what is being compiled, and simply type `-o <executable_name>`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Typing the `xxd` command in the terminal will prompt the user for standard input.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "After inputing from the keyboard and pressing return, the converted values will be output.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Use the `-b` flag to output in bits rather than the default hexadecimal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Along with the redirect operators (see Lab 1 notes), the pipe character, `|` is useful for this lab and the project.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The `cat` command reads a file sequentially and writes it to `stdout`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The `echo` command writes the provided operands to `stdout`\nThe hex and bit dumps for `xxd` have 3 parts.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In other words, it is the memory address of the start of that line.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "So, the first line will always have a file offset of `00000000`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "And if 16 bytes are on the first line, then the next line's file offset will be `00000010`.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The hex dump appears as groups of 2 bytes, 2 hex digits per byte.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The bits dump functions essentially the same, only instead of a max of 16 bytes (8 groups of 2 bytes/8 groups of 4 hex digits) the max per line is 6 bytes of binary.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "While there is a format character for chars and hexadecimal, memory contents cannot be naturally printed in binary.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The write up shares a bit of an algorithm for prining out something as an byte (padding with leading 0s if necessary):\nThe `diff` command is essential for comparing larger outputs.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Simply type `diff <file1> <file2>` to compare the two files.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "If there is no output from this command, then the files are identical.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "From the lab, I realized that each decimal number from 0-255 can really have 3 meanings: **First**, the actual decimal number value, **Second**, the hex number value (printing 16 with a `%x` format character yields 0x10), and the ASCII character that corresponds with that decimal or hexadecimal value (dividing 'A' by 5 equals 13, the same as dividing 65 by 5, 65 is the ASCII code for 'A').",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Something that I ran into in the lab, was realizing that to have the output for a byte look the way that I am used to, from right to left (with the least significant digit in the rightmost place), I need to store a byte in the opposite order that the computer normally would.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The first digit of the byte, the least significant digit, needs to be at index 7, not 0, to appear on the rightmost place.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Remember that strings print by encoding a byte one at a time until an ASCII `null` is found.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Remember that `printf` does not take in a pointer, only `scanf` does.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Remember to check typing with pointers and non-pointer values.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "These lab notes will serve as a sort of retrospective for the assignment.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Questions 1 + 2 I did well with, Bit shifting is simple and something that I understand.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Switching between signed and unsigned, and seeing how things loop when they overflow made sense too.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I understood how truncating and expanding affected the data, depending on if it was signed or unsigned.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "And how logical operators behave if signed and unsigned are mixed (it casts the signed value to unsigned).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "And I found an easy method for 6, take the int that it wanted, and find the hex value for it by dividing by each significant digit.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The biggest thing that I learned on the first try was that, when a different format character is being used than is the data type given (such as `%u` or `%d` for a `char`), it essentially expands or truncates the value, and behaves accordingly.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Now that I type this, I think what may have thrown me off there is if the sign of a couple of the values would extend a 1 after expansion, since I didn't check what the most significant bit was.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The biggest thing that got me here was not reading one of the problems closely enough, and I used all 6 bits when finding `char`s, when the question stated that `char`s are in 3 bits, so that got me.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I also need to remember that when expanding a value, they extend the value of the most significant bit in signed values, and they extend 0s in unsigned values.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Remember that when moving data to/from memory, I can't just reference labels, I would have to pass in the address of labels.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When a label is moved to a register as an immediate value (without a `$` prefixing it), the _memory address of that label_ is what is placed in the destination register\nI learned that the \"return value\" of a bit-shift operation is not the bits \"shifted out\" by the operation, but the result of the bits originally in question, after the shift has taken effect.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Note that my PDF of the textbook is 28 pages later than what is noted on Canvas.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Parameters x, y, and z are stored in registers %rdi, %rsi, and %rdx, respectively.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Declaration of `NR(n)`: return 3n (look at line with `leaq (%rdi,%rdi,2), %rax`)\ne. Declaration of `NC(n)`: return 4n+1\nif NR == NC{\n  NR >> 3\n}\n**Question 5:**  Given the code in problem 3.67:\nA. Bro I don't want to draw the whole stack diagram.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Basically it allocates 24 bytes for the struct `s`, then stores the first 16 bytes as the 2 elements of the `long` array, and the last 8 bytes as the pointer.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Then it stores that in a register and moves it into memory in the corresponding spot.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I enjoyed working in Vim for the whole project, and taking some good steps to learning that better.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think one of the biggest benefits of this project was it helped me straighten some things out in my mind, such as what one increment in a memory address means, and being conscious of dealing with the data a byte at a time, or a bit at a time, and what form I am putting it into.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I had to think, compare outputs, write out and count things to really figure it out.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I also went to the temple in between my main sessions of coding this, and during one moment while I was waiting in the temple, while thinking a bit about how to solve the padding partial hex dump lines, an idea came to me, and that ended up being the solution!",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I just needed to move a couple lines outside of the for loop.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think that shows that **pondering the code over time** and **making time for the Lord** will both lead to coding success.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The offset for the 1st byte of the pixel array from the start of the file is an int, located 10 bytes into the bmp header, which is 10 bytes into the file.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The width of the pixel array is found 4 bytes into the DIB header, which is 18 bytes into the file.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The height is 4 bytes after that, 8 bytes into the DIB header, and 22 bytes into the file.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think I got the methods connected alright, but as of right now the images aren't being edited quite right.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think my for-loop logic is off, and maybe the way I am reassigning pixel RGB values for the threshold filter.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I got the coloring figured out, I was thinking I needed to assign the colors of all three bytes in each pixel by doing the pointer arithmetic, but I just needed to do it once, because the pointer that I was using appears to have edited all 3 bytes.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I needed to recruit ChatGPT for some help, but most of my problem constituted remembering the pointer I'm using is a 1-byte pointer, and the pixels are 3-byte units.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The mental gymnastics of going back and forth between those made it tougher for me.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Okay, I ran into the blue diagonal line issue on _only_ the fish image that some others in the class did.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "THe hint that Dr. Archibald gave proved correct, as the padding calculation/handling was what created the issue.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This project was also not too strenuous, but in my opinion is was a bit more work than project 1.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I had to similarly turn it in late, because I had a phase of 240 due on the same day.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Luckily, the next project is due on a week that no 240 phases are due.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Keeping track of whether I was moving by one pixel (three bytes) or one byte, and remembering that the pointer I'm drilling through 3 functions is a 1-byte pointer, and working out the needed math to make iteration correct was the most difficult for me.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I was able to see more specific information, such as how many bytes my image was off from the correct image.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think something I could have done better to build my mental model and understanding correctly the first time, wis **commenting about the byte usage as I code** and **drawing out what I am trying to do**.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "As part of my working to understand this project, I'm going to write what I decipher the parameter names to mean (which correspond to the symbols on the computation tables in the textbook).",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In `utils.c` All the functions for the project are implemented.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "They are defined in `utils.h`, which is where I can look for more succinct definitions.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Think of all the functions described there as my toolbox for the project.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Now, my goal is to use those tools to implement the sequential architecture of the given operation.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Now, my only question is how I am going to do this for different instructions, or in other words, make it modular.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I didn't really understand the computation tables beforehand, and I kind of understood the execution stages, but after doing this project, I understand them both a lot better.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This was a project so unlike the other things I've done before as a programmer that it was tricky to figure out how to approach it.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I can give input via command line, or reading in a text file.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "This project was pretty good, but I feel like I wasn't as methodical about finding out what each phase was doing abstractly.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In a way, I guess that isn't as important, but I feel that I was doing a lot of hunting and pecking instead of figuring out what things were doing.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "When I would start a new phase and start trying to decode it, I would step through really fast and not go as directly, instruction by instruction, as I maybe should have.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "In one way, there was maybe a bit too much to take in on the first pass, but I often found that when I was stuck, it was because I was stepping through the functions too fast and not figuring out what the parts that I didn't understand were doing.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Writing out things that I found on a separate notes file helped a lot too.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I also got help from _looking at the hints/dialogue from this and past semesters in the course discord server._\nSee project5notes.txt for my notes on this project.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think that this project was about as hard as the bomb project overall, but getting started was harder.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I think one of the biggest keys for me was **remembering how the `call` and `ret` instructions affect the stack**.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I was a bit confused about how the stack was going to affect execution, and how to push certain things onto the stack.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "I thought I had to figure out exactly what `getbuf` and `Gets` were doing to figure that out.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "Once I remembered that addresses for returning are stored on the stack, it became clear how to overwrite the return address and alter the continuation of the program.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "The other big help was **a prior thread in the discord** where one student was helping another one pretty hands-on.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "While it wasn't egregious with copy-paste code, it was a good guide that helped me catch onto the basic ideas when I got stuck.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "text": "They can range from very informal (\"Hey, can you take a look at my code?",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It can be intimidating, especially if you have to present the code to colleagues, but if I swallow my pride, I can learn a lot from them and grow a lot too.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This means the frequency of code review is determined by the changes that are made, not a certain amount of time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The effectiveness of a code review was found to depend on the amount of time it takes.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "According to sources from the Wikipedia page, code reviews are optimal at a rate of 200-400 lines of code per hour.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Obvious logic errors\nEnsuring all of the requirement cases are fully implemented\nEnsuring that the automated tests that are written are sufficient, or if new ones are needed\nNew code conforms to the style guidelines\nCode reviews are especially useful for Agile development teams, that have the work decentralized across the team.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Doing code reviews can share knowledge of the code base, and make it so that no single employee is the *critical path*.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This will also allow for needed time off, and certain employees not being/feeling bound to a project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This distribution of knowledge leads to multiple people knowing the complexities, known issues, and concerns of parts of the code base, which leads to multiple informed opinions, creating more reliable and accurate estimations.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Code reviews allow senior team members and opportunity to mentor junior team members, but also gives a fresh perspective to conventions that may actually be hindering the efficiency of the code base.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "To keep code reviews optimized for time, here are 3 useful practices:\n  1.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Share the load, requiring multiple reviews, from different parts of the team\n  2.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Require reviews before code is merged into the main branch\n  3.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Creating a culture of code reviews will motivate developers to write better code in the first place, as they know it will be reviewed.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "We handle slightly better being told about little errors by a computer than by another person.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Settle style arguments with a style guide\n  Don't bother arguing over style, as many different ways aren't necessarily better than others.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Most all style only holds its value in its widespread maintenance.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If an adjustment to it is needed, bring that up with the whole team.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Start reviewing immediately\n  Be considerate of the time of your coworker.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Doing this promptly creates a virtuous cycle, where smaller changelists are given for review, which makes quicker reviews, which then encourages more smaller changelists.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Start high level and work your way down\n  Don't bother with the lower level stuff until the higher level and more important stuff is dealt with.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If the smaller issues persist, then they can be addressed later.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Be generous with code examples\n   These help the author learn and grow from the review.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Only use these for uncontroversial, certain changes, otherwise code examples can be seen as condescending.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This makes the *code* review about the code, not the author.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Frame feedback as requests, not commands\n  Ask questions, rather than making demands.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This also makes giving a response easier for the author, because rather than \"pushing back\" they are simply answering your question.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Ground notes in principles, not opinions\n  Give feedback, but then a reason for that feedback that is grounded in a good programming principle.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This also make the author feel less attacked, and more like the feedback is an objective suggestion and a learning opportunity.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This module will cover the tools Maven and Gradle, which are used to manage dependencies in Java projects.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "They download the correct versions of libraries and jar files for your project, and manage the dependencies between them.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Maven\n: A project management tool that is based on the concept of a project object model (POM; like the DOM in HTML).",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It maintains a set of standards for the project, and manages the project's build, reporting, and documentation from a central piece of information.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It also manages dependencies, and can be used to build and run tests on the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Using Maven allows a developer to ensure that their projects follow a consistent structure, more easily declare the dependencies of the project, and more easily manage the project's lifecycle.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It also ensures that a project is *IDE agnostic*, meaning that it does not depend solely on any particular IDE and its features to be built and run.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The POM file is an XML file that contains information about the project and configuration details used by Maven to build the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It contains the project's dependencies, the plugins that are used to build the project, and what is referred to as the \"coordinates\" of the project, which are the group ID, artifact ID, and version of the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These tests should not require the code be packaged or deployed\n4.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This repository is searched by Maven when it needs to download a dependency for a project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "When I install Maven, it also created a local repository on my machine, in a folder named `.m2`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is where Maven stores the dependencies that it downloads from the Central Repository, and where it stores the artifacts that it builds for the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The dependencies are declared in the `<dependencies>` section of the POM file, and each dependency is declared with a `<dependency>` tag.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Each `<dependency>` tag contains coordinates, just like individual projects do.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A `dependency` also has a `scope`, which in what stage the dependency is used by the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This will create a Maven project, and the POM file will be created for you.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "You can then add dependencies to the POM file, and IntelliJ IDEA will download them for you.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Doing this will also create the directory structure that Maven expects automatically.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "In IntelliJ IDEA Ultimate, you can also view the dependencies of the project in a graphical view, which shows the dependencies and the relationships between them.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Plugin goals\n: Granular, specific tasks that are exectured by Maven Plugins.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "They can be attached to build phases (aka lifecycle phases) and execute upon running that phase, or they can be invoked directly from the command line.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Rather than using XML, Gradle uses a langauge called Groovy, which is a variant of Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Gradle is more flexible than Maven, and allows for more customization of the build process.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is also faster than Maven, and has a more concise syntax.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Artifact\n: A file that is produced by the build process, and is used as a dependency in other projects.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is usually a JAR file, but can be other types of files as well.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Build file: Gradle uses a Groovy DSL (Domain Specific Language) to define the build file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This file is called `build.gradle`, and it contains the configuration of the project, and is both human and machine readable.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Task Graph: Gradle builds a DAG (Directed Acyclic Graph) of tasks that need to be executed in the build process.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Task Execution: Gradle exectures each task in order, recording the output.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Because the output of each task is saved, for tasks that have repeat inputs, they are skipped if they are not needed to optimize the build process.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Dependency Management: Gradle manages the dependencies of the project, ensuring that correct versions are downloaded.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Repositories: Gradle uses repositories to store dependencies, and can use multiple repositories to download dependencies, such as central repositories, local machine repos, or others like those owned by an enterprise.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Self-updating: Gradle can automatically update itself and the dependencies of the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This plugin makes Gradle \"Java aware\" and allows it to build Java projects and define tasks specific to a Java project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These tasks include:\nclean: cleans the Java byte code\ncompile: compiles the Java byte code into the source code\nassemble: creates the JAR file\ntest: runs the unit tests\nThe plugin is added by adding `apply plugin: 'java'` to the `build.gradle` file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Gradle also manages dependencies similarly to Maven, and can actually use the Maven Central Repository to download dependencies.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The dependencies are declared in the `dependencies` block of the `build.gradle` file, and are declared in a similar way to Maven, with the group ID, artifact ID, and version of the dependency.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Here is an example of a dependency declaration in Groovy:\nIn the dependecies block, also declare the scope of the dependency, or in which task it is needed.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Add the Java plugin to the `build.gradle` file, and then add a source code declaration, using the `sourceSets` block.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Add the dependencies to the `build.gradle` file, using the `dependencies` block.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The dependecy, like stated before, consists of the group ID (name of the organization), the artifact ID (name of the library), and the version of the library.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Add the repository location for where Gradle will download the dependencies from.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "When using the IntelliJ new project wizard, you simply select \"Gradle\" for the build type.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A few other settings are important: 'Use auto-import' should be checked, as that will allow IntelliJ to automatically import the dependencies that are added to the `build.gradle` file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The setting 'Create directories for empty content roots automatically' will create the directories that Gradle expects for the project structure, which is the same directory structure that Maven uses.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "For example:\nSemi-colons are optional\nParentheses are optional for method calls with one or no arguments\nCertain libraries like System, Math, String, and others are imported by default\nAnother important concept of Groovy is closures.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Closures are blocks of code that can be passed around as variables, and can be executed at a later time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Here is an example of a closure in Groovy:\nIn this example, the same function is being exectued twice, but the code it is actually executing is passed in as a parameter of the type \"Closure\".",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is similar to the idea of higher-order functions in other languages.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Groovy does compile down to Java bytecode and is run on the JVM, so it is very interoperable with Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "In the build.gradle file, each of the blocks is actually setting a member variable of the `project` object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "So, `sourceSets` is the same as saying `project.sourceSets`, and so on with the other blocks.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The `gradle properties` command in the terminal will show the properties of the project, and the `gradle tasks` command will show the tasks that are available to the project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The second most important object in the POM, after the `project` is the `task` object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Each task is also a command that I can run on the terminal after the `gradle` keyword to run that corresponding task.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Later down the line, I can investigate making my own tasks and other stuff about that.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This will update the project with the changes I made to the POM file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is hard to know if you actually have tested thoroughly enough.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Automated testing can reach a far greater number of cases in a shorter amount of time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Automated testing can be run more frequently, and can be run repeatedly after changes are made, much more easily than manual testing over and over as changes are made.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Functional testing (ensure the code *does* the right thing) is possible with manual testing, but performance testing (ensuring the code does the right thing *in a reasonable amount of time*) and load testing (ensuring the code does the right thing *under the expected amount of demand*) are much more difficult to do manually, and so automated testing is needed for those dimensions of testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Here is an outline of the different types of software testing described by the article:\n  1.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Focuses on individual functions and methods of classes, and are cheap to automate and quick to run.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "More expensive to automate as they require multiple parts to be running simultaneously.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Similar to integration tests, but rather than focusing on the interactions between parts of the application, it focuses on the actual output of the application, and ensuring that it is correct.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are very useful, but are expensive to perform and difficult to maintain when automated.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "They can be expensive to automate because they require the entire application to be running so that user behaviors can be replicated.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Determines if performance requirements are met, loactes bottlenecks, measures stability of the application during peak traffic, and more.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Useful to determine if mor expensive testing is warranted or if a new build is working properly.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Automating tests can be done using different frameworks for different languages.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Examples given included PHPUnit for PHP, Mocha for JavaScript, and RSpec for Ruby.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Exploratory testing is manual testing that is recommended to try and find less obvious errors.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Exploratory testing sessions should never span more than 2 hours.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are \"white box\" because they interact with the code directly.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These should be \"black box\" because they interact with a live instance of the product, not the code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "All of these layers are considered functional tests, because they verify functionality of the product.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Placing more tests on the source code itself will catch simple bugs that are harder to recognize in integration or end-to-end testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The article describes the **Rule of 1s**: unit tests take aout 1ms, integration tests take about 1s, and end-to-end tests take about 1m.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Because of this, if a testing suite has a greater number of tests at the top level, it could take hours to run tests, which is not practial in today's development environment.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These proportions should be a useful guideline, not a strict quota.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Setting a strict proportion for different types of tests can encourage poor practices like skipping needed end-to-end tests and inflating the number and quality of unit tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The following rule applies: **Each value within an equivalence partition must have the same output behavior as all other values in that partition.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If the form requires a number between 1 and 100, the equivalence partitions would be:\n1. the numbers from 1-100 (valid input)\n2. the numbers less than 1 (invalid input)\n3. the numbers greater than 100 (invalid input)\n4. non-numeric input (invalid input)\nThese equivalence partitions represent all of the possible inputs from different types of output behavior.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Boundary Value Analysis\n: Testing values that lie at the extreme ends of a testing domain, with the assumption that most of the bugs lie there.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These both are not the answer to every situation, but are valuable tools that have their use cases.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is part of the family of unit testing frameworks known as xUnit.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Many other unit testing frameworks have been inspired by JUnit, such as NUnit for .NET, PHPUnit for PHP, and others.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "So, learning the ins and outs of JUnit will be useful for understanding other unit testing frameworks.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "JUnit promotes test-driven development, which encourages testing a little, then coding a little, then testing a little, then coding a little, and so on.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is known to increase code quality and reduce stress on the programmer.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "JUnit is highlighted by some of the following features:\nAnnotations to identify methods\nAssertions for identifying expected results\nTest runners to run tests\nTest suites to group tests\nGreat simplicity and ease of use\nAutomated execution with self-checking test results and providing feedback\nProgress bar with color indications\nThere is a recommendation of 2 unit tests for each requirement, one to test the positive case and one to test the negative case.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are used to set up resources for a specific test method, such as instantiating objects that are needed for the test.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are used to clean up after a test method, such as erasing any resources that were created by the `@Before` method and are no longer needed.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are used to set up resources that may be needed by all test methods, or other computationally expensive operations that only need to be done once.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These are done to clean up after any operations performed by the `@BeforeClass` method.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "JUnit Basic Assertions:\nThere was an old list of assertions, where each case was a different assertion method (equals, false, null, is not null, etc).",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "However, the `assertThat()` method is a lot better, because it can be used to test all of these, and it has better readability and give better failure messages.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Its syntax is basically `assertThat(actualValue, is(method(expectedValue)))`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some asserstions use what is called a hamcrest coreMatcher, which is a matcher that is used to test the actual value against the expected value.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Here are some examples of coreMatchers:\nallOf\nany\nanyOf\nanything\nboth\ncontainsString\ndescribedAs\neither\nendsWith\nequalTo\neveryItem\nhasItems\ninstanceOf\nis\nisA\nnot\nnotNullValue\nnullValue\nsameInstance\nstartsWith\ntheInstance\nAn example of this in use is `assertThat(\"theString\", both(containsString(\"S\")).and(containsString(\"t\")))`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This one will cover the differences between JUnit 4 and JUnit 5.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some changes to annotations include:\n`@Before` and `@After` are now `@BeforeEach` and `@AfterEach`\n`@BeforeClass` and `@AfterClass` are now `@BeforeAll` and `@AfterAll`\n`@Ignore` is now `@Disabled`\n`@Test` can no longer have the `expected` attribute, and instead should use `assertThrows()` to test exceptions.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It also cannot have the `timeout` attribute, and instead should use `assertTimeout()` to test timeouts.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Assertion methods can be written with lambda expressions, and can be grouped together with `assertAll()`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Assumptions are now supported, which allow for conditional test execution.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Lab Notes:\n***Programming Principle:*** The principle of Cohesion states that unrelated things (bits of code, methods, source files) should not be located together, but should be separated by how closely they are related to each other.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "File structure and location is critically important in Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Packages need to be in the correct place for the project to be able to build correctly.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "IDEs like IntelliJ have good tools to help with this, but it is something to be aware of.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Also, the directory structure of the `main` and `test` directories inside of `src` must mirror each other, or the tests will not be able to find the classes they are testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Use `@BeforeEach` methods to avoid code duplication in tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This will pass if an instance of the specified class of exception or any of its subclasses is thrown.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The class of exception is passed as a parameter with the lambda function that will execute.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There is not a native function for testing if a certain type of exception does not get thrown, but this can be done by using a try-catch block in the test method and a fairly simple custom workaround.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The arguments can come from various places, one of which is the `@ValueSource` annotation.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This annotation takes an array of values that will be passed to the test method, but only works for one of four data types: String, int, long, and double.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The test can also be given a name, by using the `name` attribute of the `@ParameterizedTest` annotation, placed in parenthesis after the annotation.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Another argument source is `@EnumSource` which takes an enum class as a parameter, and will pass all of the values of the enum to the test method.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The `@EnumSource` annotation also has a `names` attribute, which can be used to filter the values of the enum that are passed to the test method.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The `@MethodSource` annotation is used to pass arguments to the test method from a method that returns a stream of arguments.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The method must be static, and must return a stream of arguments.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The method can be in the same class as the test method, or in a different class.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The method can also take parameters, which will be passed to the test method.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There are 2 types of CSV sources, `@CsvSource` and `@CsvFileSource`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Custom Argument sources can also be implemented, but are more complex.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Parameterized tests are integrated with the full testing lifecycle, meaning that they use any `@BeforeEach` or `@AfterEach` methods that are present in the test class.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is useful for making the test results more readable and understandable.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There are also `DisplayNameGenerator` classes that can be used to generate display names for tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "These can be used to generate names based on the method name, the class name, or other factors.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A DisplayNameGenerator can be set for a test class by using the `@DisplayNameGeneration` annotation, and then implementing the `DisplayNameGenerator` interface, with various different Generators, such as one for converting underscores into spaces, or one for generating complete sentences.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The default DisplayNameGenerator can be changed by setting the value of the `junit.jupiter.displayname.generator.default` configuration parameter to a \"fully qualified class name\" for a DisplayNameGenerator class.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is a way to group tests that have similar starting state to avoid redundant set up.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "In the example in the article, the input was 1 and 2 for half the test methods, and 1 and 0 for the other half.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This was a situation in which using nested tests was useful.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is done by simply creating a new class containing the grouped tests, and placing the `@Nested` and `@DisplayName` annotations above the class declaration.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Passing a value in for `delta` allows me to control the precision of a test.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "I was wondering why the test names and nesting wasn't displaying in IntelliJ, and I discovered that there is a button in the `Run` tab that focuses on passed tests, one for failed tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "I had the passed test button untoggled, so that's why they wouldn't show up when they passed\nCode Coverage\n: The measure of how much of the code is executed or \"covered\" by tests that are run.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A metric that can be used to determine if there are enough tests written for that part of the code base.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There are different types like:\n*Statement* or *line coverage*, which just focuses on how many actual lines are covered.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is the ideal for testing, but also unable to be achieved because many functions have infinite distinct paths.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is the most stringent type of coverage, and is required for safety-critical software.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This seeks to be thorough but also reducing the number of test cases needed.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Test Criteria Subsumption\n: The idea that a higher level of coverage will also satisfy a lower level of coverage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "For example, branch coverage will also satisfy statement coverage because the requirements are stronger.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It can be said that branch coverage subsumes statement coverage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There is no way to satisfy branch coverage without satisfying statement coverage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This also indicates when one level of coverage is higher than another, it is more expensive and slower, because more test cases will be needed to satisfy the higher level of coverage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "What are the benefits of measuring code coverage:\nSoftware that has high code coverage percentages is less likely to have undetected bugs stemming from code errors, poor coding practices, or overly complex code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "High code coverage percentages *can* imply maintainability and readability, but not always.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It provides a measureable metric for shareholders or others in communication who may not understand developer language.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Generally, levels of 70-90% code coverage is considered good, but it is not a hard and fast rule.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Provides and approximation value to use when defining \"well-tested\" code, especially in larger project teams.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Mocking\n: The process of creating stand-in or \"dummy\" instances of dependency units for units that are going to be tested, to the end of isolating the unit from those dependecies, while still being able to test its full functionality.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "We cannot control when we receive an answer, but we can control when we are seeking an answer.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Answers often come when we are out in the sun working, rather than sitting in the shade.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Mocking is difficult to do with static objects or singletons (I think this means pure functions), **dependency injection** is the usual way to make objects that are mockable.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "While unit testing is usually focused on **state-based verification**, mock testing focuses on **behavior-based verification**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "State-based assert on the end status, or *state*, of the object, while behavior-based assert on if a certain method, or *behavior* was performed by the object, with the correct parameters.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Common types of mock testing are *proxy-based mocking* and *classloader-remapping based mocking*.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "I'll have to read up and learn more to understand these better.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some best practices for mock testing are:\nDon't mock external dependencies, only mock types that you own.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "One of the limits of mock testing is that is requires a good enough understanding of the dependencies, or the results won't be accurate.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Overusing mocking can dramatically increase the needed maitenance of the tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "One limitation of mock objects is that for the mock test to be accurate, the behavior of the object being mocked must be well understood and established.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Stub\n: A piece of code that replaces a complex software component with a simpler, controllable, temporary standing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Use argument matchers to verify method calls with certain arguments.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Use `verify(mockObject, times(#)).method()` to verify that a method was called a certain number of times\nLots of variations on this, `atLeastOnce()`, `atLeast()`, `atMost()`, `never()`, etc.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Use `verifyZeroInteractions(mockObject)` to verify that no interactions were made with certain mock objects.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The default return value for a mock is an \"empty\" value for its data type, like 0 for an int, or null for an object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Remember that you'd often keep using a mock even after the object you're mocking is created and operational, because you want to isolate the object from its dependencies and keep tests running quickly.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "When I had to write my own tests, one of the biggests challenges at first was understanding the interface between objects.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "I reckon that this will mostly be the case in the future as I work with Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A mock, on the other hand, is an instance of a class that is a barebones version of the class, that simply tracks behavior.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "To create a spy, use the `Mockito.spy()` method, to create a spy out of the pass in object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This allows for methods like `verify(spyObject).method()` to be used to verify that a method was called on the spy object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "To stub a spy, or give is a set return value, us the `doReturn()` method, followed by the `when()` method, followed by the method that is being stubbed.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The article briefly explain the `NotAMockException`, but it is self-explanatory enough that I won't repeat it here.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This also happens when calls to `thenReturn()` are chained, such as `thenReturn(1).thenReturn(2).thenReturn(3)`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Test-Driven Development (TDD)\n: A software development process that relies on the repetition of a very short development cycle.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The developer first writes a failing test\ncase that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors\nthe new code to acceptable standards.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "As opposed to waterfall development which never works, and iterative development that often works, but often has bugs, TDD is a process\nthat often prevents hours-long debugging sessions by catching bugs early in the development process.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "He always knows exactly where my bugs are and how to fix them.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If I will but ask him sincerely,\nHe will help me find them and fix them.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "He will always help me fix my bugs in the way\nthat will most benefit me as a person and a developer.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Refactor the code and the test as needed, while maintaining passing of all tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Repeat this process as needed\nAt first I did not understand why the code was written as simply as possible, even using hard coding, and then iteratively\nrefactored.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "But, thinking about it some more, that fits the idea of iterative development in the first place.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Just writing\nthe unit test and then coding until it is exactly what is needed is more in the spirit of waterfall development, which is a poor practice.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Writing\nthe test, and then writing the simplest code to pass, and then refactoring one step at a time to get cleaner and more matainable code is not only\nmore efficient, but simply easier to do.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Improving code one step at a time is much easier than trying to write super clean code the first time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Something to consider in TDD is code-visibility, and how/if to access and test private data and methods.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is also important to consider testing\ndoubles, and how units will be isolated from their dependencies, using dummies, stubs, spies, or mocks.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Another important principle of TDD is\nkeeping code units relatively small.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This will reduce debugging efforts, as smaller units means less to look through, since tests should already\nbe isolated to a single unit.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It also makes the test cases more readable and self-documenting.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some best practices include:\nHaving a good and consistent structure for the tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A good structure to follow is: Setup, Execution, Verification, Cleanup.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Treat test code with the same respect as production code\nTest Oracle\n: Whatever provides the information that determines correct outputs for a test case.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some practices to avoid:\nHaving \"all-knowing\" oracles, that are filled with information not pertaining to the test case.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Causes spiraling false negatives and makes debugging harder.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Having tests depend on system state that is manipulated by other test cases\nTesting implementation details or precise execution specifics.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Software to use with Testing and TDD includes the xUnit testing frameworks, which make automation much easier.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The language-agnostic protocol Test Anything Protocol (TAP) is also useful for testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "For a comprehensive list of pros and cons, and the limitations of TDD, see the Wikipedia page.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "I'll list some of the major ones:\nAdvantages:\nGreater confidence in the code\nLess fear of change or experimentation, due to the large test suite\nComprehensive code coverage\nSelf-documenting code\nFacilitates deeper understanding of the code, and the project requirements\nReduces debugging time\nGreater emphasis on design and functionality.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "One of the rules is to **only write production code when a failing test requires it**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "And, each cycle ends with a refactoring step where code is cleaned up and improved.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Also, adding test cases that increase code coverage, even if new production code is not needed, improved regression detection.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A regression is a change that breaks a previously working feature.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Among the main types of testing, there are unit tests, integration tests, and end-to-end tests.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This module will focus more on end-to-end testing, which consists of testing an application in a way that simulates a user interacting with the application.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "In the example of a web application, this would entail a browser being opened and navigating to the web application, and interacting with it using an automated tool.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "One that existed dominantly for a while was Selenium web driver, which I've used with Python.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Playwright is another browswer automation tool that is more modern and has more features than Selenium, and will be what is used in this module.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Quick note about HTML IDs, they can act as hooks in the URL, so if the url path includes an ID, such as `http://example.com/#id`, then the browser will scroll to the element with that ID when the page is loaded.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It highlighted the need for testing automation on web apps, and gave descriptions of a few of the functionality tests that are needed on web apps.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The article lists a few types of functionality tests:\nFunctional Tests\nUsability Tests\nRegression Tests\nEnd-to-End Tests\nCross-Browser Tests\nPerformance Tests\n[Playwright Intro](https://playwright.dev/java/)\nPlaywright tests can be written in several langauges, not just Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If I need to use Playwright in the future, and need to refresh on the syntax, refer back to this lab.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Performance Testing is a separate type of testing from functional testing, which includes unit, integration, and end-to-end testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Performance testing focuses on the speed of the application, and how it performs under different loads.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Testing different loads is called *load testing* and is a subset of performance testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "JMeter is an open source tool for performance testing that creates several threads, and then simulates a number of users interacting with the application at the same time, monitoring the performance of the application under different loads.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It was originally designed for Web applications, but has since been expanded to test things like a Java object.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It also uses the JavaDoc API to create a appealing report of test results.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Core elements of JMeter:\nThread Groups: the collection of threads for a test, where each thread represents the user request.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Samplers: informs the thread group of the type of request that JMeter will send to the server.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Listeners: the way that JMeter displays the results of the test.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Configurations: set up default values and variables to be used later in the test.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Test plans: the overall plan for the test, that outlines the steps that will be taken when testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It means reviewing the code without running it, hence the term \"static\".",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is what is done by lots of the \"linters\" that I have run into so far.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It checks for syntax errors, unused variables, indentation, and other things that can be checked without running the code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "IntelliJ's static analyzer looks for syntax errors, dead code (unused variables), indenetation, potential runtime errors, and poor coding practices.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It is run automatically when the code is saved, or by clicking **Analyze**->**Inspect Code**, and then following the prompts.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Links for the file download and a quick start guide are on the Baeldung website linked above.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The CLI command for the docker container is also on the webpage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Similar to platforms like phpMyAdmin, you need to login to SonarQube with an account, which has credentials initially set to `admin:admin`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "To use SonarQube projects you'll have to get an access token, which is done on the account page (go to localhost, and whatever port the SonarQube server is running on), and after logging in navigate to the security tab, which is where tokens can be generated.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Then make sure to add the plugin for SonarSource to the build file, whether that is Maven or Gradle.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "After running an analysis, issues are grouped into 5 categories: **Bugs**, **Vulnerabilities**, **Code Smells**, **Coverage Percentage**, and **Duplication Percentage**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Each issue can have one of 5 severities: **blocker**, **critical**, **major**, **minor**, and **info**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Another major feature that won't be covered in class, but that I found interesting, is **Quality Gates**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A quality gate is a set of conditions that project source code is tested against and must meet before it is deemed ready to be pushed into production.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "For example, the default quality gate that comes pre-installed is called *SonarQube way*.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Coverage percentage of new code is at least 80%\n2. percentage of duplication on new code is less than 3%\n3. maintainability, reliability, and security rating is an *A* or better.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "If the code in question doesn't meet or exceed these conditions, it will fail, and be unable to be pushed into production.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Another term defined here: **Leakage Period**: The period between two analyses or versions of a project.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Quality Gates can be created, edited, and set as defaults from the \"Quality Gates\" tab of the SonarQube interface.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A **Quality Profile** is a set of rules that are used to analyze the code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "The default quality profile is called *Sonar way*, and it is a set of rules that are considered best practices for Java code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Quality profiles can be created, edited, and set as defaults from the \"Quality Profiles\" tab of the SonarQube interface.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "It underlines issues with blue squiggly lines when an issue is detected.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "SonarLint puts issues into 3 categories:\n**Bug**: a coding mistake that can negatively affect performance or behavior\n**Vulnerability**: a security issue that can open a window for an attacker\n**Code Smells**: a violation of a clean coding rule that can affect maintainability and readability.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Each of these issues has one of 4 severities: **minor**, **major**, **critical**, and **blocker**.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Standalone mode is run with only SonarLint and no other peripheral softwares, but can only use the default rule set.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Connected mode requires use of a SonarQube server or SonarCloud to access stored custom rules.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "SonarLint will flag things like always-true or always-false boolean expressions, redundant or verbose expressions, overly complex methods (evaluated using the Cognitive Complexity score that SonarLint calculates), and even some language/version specific things.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Here is what I found that helped me to do so:\nRun this command to check and see what versions of Java are actually installed: `/usr/libexec/java_home -V`\nThen, this is the terminal command that will actually change which version is being used:\n`export JAVA_HOME=``/usr/libexec/java_home -v <versionNumber>`\n**Lab Notes:**\nTo run a SonarLint report on the whole project: Report -> File Icon -> Analyze Project with SonarLint\nRemember to run SonarQube on Java version 17!",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Quality Profiles can be uploaded from XML files, like they had us do in the lab.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is done using the \"Restore\" tab in the Quality Profiles tab.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "To let SonarQube access my project, make sure my `<sonar.login>` and `<sonar.password>` are in the `<properties>` section of the `pom.xml` file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "THen, running the maven install command, either in IntelliJ's GUI or in the terminal using `mvn install`, will run the analysis and upload the results to the SonarQube server.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Connect SonarLint to SonarQube in IntelliJ by using the SonarLint settings found in the tab.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Code profiling is a method of dynamic analysis that measures performance metrics, such as space and time complexity, time of function calls, and then gives suggestions for optimization.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A code profile is generated by a code profiler, which is a tool that measures the performance of a program.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Types of profilers (based on output):\n**Flat Profiler**: computes the average call time, from the calls, don't break the call down based on callee or context.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "A profiler has various methods of reporting, including:\nA statistical summary of the program's behavior, called a **profile**\nA visualization of the program's sequential behavior, called a **trace**\nA program can be modified to profile itself, inserting itself into a profiler at compile time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some compilers provide profile-guided optimization, which uses the profile to optimize the code.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Some notes about YourKit:\nIt can easily connect to an IDE via plugins.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "CPU profiling is needed to view how method calls affect CPU usage.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "This is done by changing the profiling mode from \"sampling\" to \"tracing\" on the play/stop button.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Live view only show basic information, a snapshot is needed to see more detailed information.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "There are useful features like viewing code that is reported by something in the IDE, and YourKit will jump you to the exact line of code it is detecting a hot spot in.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "In the Callees List, the method that is being called is shown in a long form of dot notation, which shows the full path of the method, starting from the project root.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "text": "Web programming is one of the most useful branches of skills and technologies to have in the world today.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Learning these skills will open previously inacessible doors.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Because the specifics technologies of web programming shift constantly, focus less on the specific technologies and more on the overall concepts and frameworks of being a web programmer in this class.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Capable: know the technologies well, discern the meaningful tech from the fads, and know how to best leverage different technologies.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Creative: scuplting and writing code to be neat and intentional is very much a creative process, and can be beautiful to those who recognize it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Collaborative: rarely are apps used by just one, and they are rarely built by just one.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember, that in a team, 1+1+1 does not equal 3, but 4 or 5.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Underlying all of these should be to be a Christlike software engineer, including:\nSeeking divine help, including in coding, of what to do, where to go, and how to do something\nHaving an eternal perspective, looking past a project due date, a class, a job, or even this life.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some of the tools we will use include:\nEC2: Elastic Cloud Compute - a virtual server in the cloud\nECS\n**Console Application**\n  A console application is an essential of web programming, and I need to make sure I have a POSIX compliant one.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A console being POSIX compliant means that is supports a standard set of console commands.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some basic commands that I haven't run into yet include:\ncurl - Command line client URL browser\ngrep - Regular expression search\nfind - Find files\ntop - View running processes with CPU and memory usage\ndf - View disk statistics\ncat - Output the contents of a file\n**less - Interactively output the contents of a file** I want to explore this one more.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Overwrites the file if it exists\n`>>` - Redirect output to a file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Appends if the file exists\n> Something that I loved from this assignemnt was figureing out that I could write a small bit of script, in the console, to manipulate a file, when I redirect the output of the script to the file using `>>`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I think that is connected to the `less` command, but I need to learn how it works more.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here is the line that was used:\nWhile a repo can be made in a local directory using `git init`, it is easier to create a repo on GitHub and clone it to the local machine.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To create a repository in GitHub, log into your account, select the `Repositories` tab, and press `New repository`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "You then specify a unique repository name, give a description, indicate that you want it to be public, add a default README.md file, and choose a license.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A repo clone is an exact copy of the repo with all of the commits, comments, and SHAs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It also configures the clone to know what the remote source is so that you can use Git commands to keep them in sync as changes are made.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Pull the repository's latest changes from GitHub (`git pull`)\n2.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Push the changes to GitHub (`git push`)\n\u26a0 Note: The first time you make a push request to a repository Git will ask you how you want to identify yourself and what credential (e.g.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "You will need to create a [Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) and provide that as your password.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `git fetch` command will get the latest info about the changes to the remote source (GitHub) without making changes to the local repo.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This info is displayed when running `git status` after running `git fetch`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Normally pushing and pulling between collaborators is just fine, until the same lines of code are edited in different ways, then a merge conflict happens.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A merge conflict is resolved by editing the file in question, deleting the conflict markers, and then committing the changes.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `README.md` file is a markdown file that is displayed on the front page of the repository.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To have it displayed on the front of the repo, it must be named README.md.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is similar to the `git clone` command, but it is creating a copy of the repo on GitHub rather than my local development environment.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is useful when I want to make changes to a repo that I don't have write access to.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The forked repo still has a link to the upstream (original) repo, so I can pull in changes, and make pull requests to push suggested changes to the upstream repo.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Personal access tokens are a way to authenticate with GitHub.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are used in place of a password when pushing or pulling from a repo.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are more secure than a password because they can be revoked at any time, and they can be limited to only the permissions that are needed.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The two types described are fine-grain PATs and classic PATs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Fine-grain PATs are more secure because they can be limited to only the permissions that are needed.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Classic PATs are less secure because they have access to all of the permissions that the user has, but they have some functions that don't work with fine-grain PATs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Read more about them [here](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\n**Pull requests:**\nPull requests are how you suggest/request a change to a respository.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "You can submit a pull request to push changes from your forked copy to the original repository.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The owner of the original repository can then review the changes and decide whether or not to accept them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Pull requests are a way to collaborate with others on a project, and they are the way to contribute to open source projects.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Pull requests are specifically for propsing changes to the main branch of code by merging in changes from a feature (other) branch.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Pull requests can be reviewed and commented on by others in the repositories, and a pull request can have changes committed to it while it is still open and under review, and the files changed in the pull request can be viewed.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A user can also make a draft pull request, which is a pull request that is still in progress and not ready to be merged.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A lot more good info on pull requests can be found [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests)\n**Lecture 9.5.24**\nOne of Prof. Ventura's biggest course objectives is for us to learn to think analytically and creatively.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "He also wants us to gain confidence, have fun, and of course learn web programming.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Don't be trapped by the accumulation of ignorance, understand as I go.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are used to provide added functionality to an application.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A `deployfiles.sh` script is used to deploy the application to the EC2 instance.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'll want to look at that in one of the versions of Simon and see how it works.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Database: how any data that persists between sessions is maintained and reloaded.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Peer-to-peer model: This is a model where each computer in the network can act as a server or a client.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is useful for sharing files, and it is more secure than a client-server model because there is no central server that can be attacked.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is also more efficient because the data can be transferred directly between the computers.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Like with other projects I have had, remember to balance ambition with reality.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I felt this when I had the idea to add the file input and quiz generation feature.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I think I am going to still make the quiz/study app, but only do a simpler part of it for the project.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Maintain the separation between the Development and Production environments.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is bad practice to do any coding/developing in the production environment.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Development is the designated place for breaking and messing up.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Also ensure that things being done in the development environment are being pushed to GitHub.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Caddy\n: a gateway that can be used for 3 main purposes: serving static files, web user authentication, and redirecting web traffic.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "DNS\n: Domain Name System, and it translates domain names into IP addresses.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In the case of AWS, the DNS is Route 53, and the web server is EC2.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The unique combinations of IP addresses actually ran out in 2011, so now there are IPv4 and IPv6 addresses.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "IPv4 addresses are 32 bits long, and IPv6 addresses are 128 bits long.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Other things that are being done to address the shortage of IP addresses are NAT (Network Address Translation) and CIDR (Classless Inter-Domain Routing), so I'll still have a \"unique\" location for my server so it will be secure.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So if you try to set up the server in a different region, it will work, but I won't be able to use the AMI file that they provided.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `public_html` directory contains all of the static files that you are serving up directly through Caddy when using it as a web service.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `services` directory is the place where you are going to install all of your web services once you build them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "There are different records that are associated with a domain name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The most common ones are:\nA record: This is the most common record.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is the record that you will use to map your domain name to your EC2 instance.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used when you want to map one domain name to another domain name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "MX record: This is used to map a domain name to a mail server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used when you want to receive email at your domain name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "TXT record: This is used to store text information about a domain name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used for things like SPF records, DKIM records, and DMARC records.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Caddy cannot use HTTPS with just an IP address, it needs a domain name to do that.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Something that was a stumbling block for me was remembering the syntax of the ssh command.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `-i` flag is for the key file, and the `ubuntu` is the username of the server, which would change depending on the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Prof. Ventura mentioned that class may not seem very hard right now, which is fine, it'll get more difficult as time goes on.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Make sure to take notes of things as I do the HTTPS assignment reading and the HTML readings.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "HTTPS, or Hypertext Transfer Protocol Secure, is a protocol that is used to secure the communication between a web server and a web browser.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is an extension of HTTP, or Hypertext Transfer Protocol, which is the protocol that is used to transfer data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "HTTPS uses encryption to secure the data that is being transferred.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This encryption is done using SSL, or Secure Sockets Layer, which is a protocol that is used to encrypt data that is being transferred.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "HTTPS is used to secure sensitive data, such as credit card numbers, passwords, and other personal information, that is being transferred between a web server and a web browser.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Web certificates are generated by trusted 3rd parties, and then given to the owners of a domain.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The certificate can then be served from the web server, and those who want to access the domain can do so using the certificate and the public/private key encryption system.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Web certificates used to be very expensive to get, and there was quite a monopoly on them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This monopoly was busted by 2 Mozilla employees when they started a non-profit called Let's Encrypt.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Let's Encrypt dynamically provides and renews free, credible web certificates to anyone who wants them, using their IETF standard ACME protocol.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This has made the internet a much safer place, because now anyone can have a secure website.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Caddy uses Let's Encrypt to provide HTTPS certificates to websites.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It does this by automatically requesting a certificate from Let's Encrypt when the website is set up, and then automatically renewing the certificate when it expires.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This makes it very easy to set up a secure website with Caddy.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To implement HTTPS on my website, I need to do the following:\n1.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Set up a domain name for my website by leasing it from a DNS, such as Route 53.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create an A record in the DNS that maps the domain name to the IP address of my web server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In the EC2 instance, with Caddy installed, edit the Caddyfile to include the domain name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Do this by editing the section that says `:80{` (meaning port 80) to be the domain name (`mnemonicstudy.com{` in my case).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To edit the color of a `color` input element, use the `value` attribute to assign it a hexidecimal color value.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "According to Prof. Ventura, the best resources are MDN Web Docs and W3Schools.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Attributes: `src`, `controls` creates a visual representation of the audio, `autoplay` beings playing as soon as the `audio` element is rendered (strongly discouraged), `loop` replays the audio when finished, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Attributes: `src`, `controls`, `autoplay`, `loop`, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "These have the same functions as the corresponding attributes in an `audio` element.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Another one is `crossorigin`, which is used to specify how the element should handle CORS requests (cross-origin resource sharing).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is needed when the video is hosted on a different domain than the webpage.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "SVG is a vector image format that is used to create graphics that can be scaled to any size without losing quality.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "SVG images are created using XML, and they can be manipulated using CSS and JavaScript.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "SVG images can be used to create logos, icons, and other graphics that need to be scalable.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The HTML element itself creates the canvas, but JavaScript is needed to actually draw on it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Don't worry about making the pieces look like the finished product, just make sure that all of the pieces are present in my HTML.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In the Simon example code, most of the pieces don't look or behavior _anything_ like the final product, but they are all there.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some of the most common ones are: `:hover`, `:active`, `:focus`, `:visited`, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Use a `@font-face` rule in the CSS file, and in the `src` property, set the value to the url.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Use and `@import` rule in the CSS file, and in the `url` property, set the value to the url of the font file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is for if you are using a font from a font service, like Google Fonts.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `animation-name` property is used to specify the name of the animation, and the `animation-duration` property is used to specify the duration of the animation.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "These are placed on the elements which will have the animation applied to them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then, the `@keyframes` rule is used to define the animation, with the name of the animation matching the value of `animation-name`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `from` and `to` keywords are used to define the starting and ending states of the animation.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here is an example of a simple animation:\n> The following is courtesy of Copilot lol.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To remember the order of the properties in the CSS box model, from outside to inside, you can use the mnemonic:\n**\"My Big Purple Cat\"**\n**M**argin\n**B**order\n**P**adding\n**C**ontent\nReview of `display` property values:\n`block`: The element will take up the entire horizontal space of the browser, and it will start on a new line.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Grid and flex are a bit more complex, so here is some more info on them:\n[Grid] (<https://www.w3schools.com/css/css_grid.asp>)\n[Flex] (<https://www.w3schools.com/css/css3_flexbox.asp>)\nBootstrap is the most popular CSS framework, and Tailwind CSS is a newer one that is gaining popularity.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "All CSS frameworks are built on top of CSS, and they provide a set of pre-built styles that can be used to create a website.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are useful because they save time and effort, and they provide a consistent look and feel to a website.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are also useful because they make responsive web design much easier.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The downside to Bootstrap is that sites styled with it are pretty uniform, so like all programming tools, it is not an end-all-be-all.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Bootstrap is far and away the most popular CSS framework, but its major success is also its weakness: Bootstrap styling has become the de facto look of the web, so using Bootstrap can deliver a reliable and comfortable user experience, but it won't be able to stand out and be unique.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Tailwind CSS is the next closest framework as of recent years, emerging in the last 4 years.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It allow for different \"looks\" and avoids having a single distinct style.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Bootstrap is a mobile-first framework, meaning that it is designed to work on mobile devices first, and then scale up to larger devices.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It can be used by downloading the files and using a package manager, or by their content delivery network (CDN) Here are their official CDN links:\nCSS: <https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css>\nJS: <https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js>\nIn Caddy, different from Apache, the `publichtml` directory is the root directory of the website.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is where the `index.html` file is located that gets displayed when no subdomain is specified.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The HTML for any subdomain is located in the `services` directory.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember when using the `deployFiles.sh` script, to be in the directory that you want to deploy.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The colors for Bootstrap is present in their CSS using a Sass map.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If I want, I can make my own Sass file and customize the colors to my liking.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Or, I can just use other assignments for different purposes, like not using the 'danger' color just for warning components.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When debugging CSS, the `Styles` tab in the browser inspector is my best friend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It will only show the styles that are being applied to the element that I have selected, so I need to select one first.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In `Styles` I'll see all of the styles applied, and then the ones that are overridden will be crossed out.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I can also add new styles to the element to see how they will look, or toggle styles using the checkbox next to them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `Computed` tab will show me the final styles that are being applied to the element, including the ones that are inherited from the parent elements.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "UX has become a complex subject, and in the setting of designing a good, mature application, serious consideration must be given to UX.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Includes `click`, `mouseover`, `keydown`, `load`, `submit`, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Handling an event is done by executing certain code when the event happens.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Listening for an event constitutes observing a specific element for a specific event, and then executing code when that event happens.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `debugger` command in JS will also function as a breakpoint.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Other formatters are %d or %i for integers, %f for floating point numbers, %o for DOM objects, and %O for JavaScript objects.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Objects that are instances of a class and have methods, such as String, Array, and Date, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Objects that are defined with key value pairs, such as `{name: 'John', age: 30}`, and don't require instantiation.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "One of the core things that I've noticed as I've used Bootstrap for this is the placement of most of the elements into some type of container, referred to as `components` in their docs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A lot of the stylistic choices include choosing the right component for the job.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Also, alot of the box model classes are similar to the way that they are in Tailwind.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `p` classes are for padding, and the `w` classes are for width.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `bg` classes are for background color, and the `text` classes are for text color.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Other common ones that I found were `fw` for font weight, `fs` for font size, `text-center` and others for text alignment.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'm thinking that to achieve my specific needs and ideas, I'm going to have to use a combination of Bootstrap and my own defined CSS.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "My idea for the flashcards is to have a flashcard class that has a animation defined for it that will flip the card and toggle the visibility of the corresponding side.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `input` element has an attribute called `placeholder` where the string value that you give it will appear as placeholder text (which disappears when something is typed) in the input field, when the input type is `text`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Like Tailwind, Bootstrap has some classes that can apply generally to everything, like `my-` for margins on the y-axis.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Most of these classes are 'utility' classes, and can be found in that section of the docs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The Array object has several interesting static functions associated with it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Falsey and truthy values are only functional with the loose equality operator, but they do work with comparison operators.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "With a switch block, remember to use the `break` keyword to prevent the code from falling through to the next case.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An anonymous function is one without a name in the function declaration.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They can be called using a name if they are assigned to a variable, however.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Unlike other languages, Js allow parameters to be unused and the function still called, that parameter will just be `undefined`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "With arrow functions, a return nor curly braces are needed if the function is only one statement.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When a function is returned from another function, the returned function is called a closure.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The closure has access to the variables in the outer function, even after the outer function has finished executing.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "There are `for of` loops which iterates through each value (the iterator needs to be instantiated) and `for in` loops which iterates through each key in an object.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A **spread** operator, `...` is used to spread, or add, the elements of an array into another array as individual elements, not as a nested array.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here is the link to the class [Javascript Demo](https://htmlpreview.github.io/?https://github.com/webprogramming260/.github/blob/main/profile/javascript/introduction/jsDemo.html)\nModern web application have very few pages.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is because rather than making lots of separate files, the DOM is manipulated using JavaScript.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "At some point, I want to try this, maybe during Christmas break.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember that using the DOM, a new element is created using `document.createElement()` method.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This only creates an instance of an element object, however, it isn't attached to the DOM.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To attach it to the DOM, use the `appendChild()` method of the parent element.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Browser rednering is single-threaded, so typical sequential execution can cause the browser to hang.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are used to handle asynchronous operations in JavaScript.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Promise\n: an **object** that represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Asynchronous operating allows the program to work on other tasks while waiting for another part of the program to finish.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is like when I go and do another task while waiting for something in the oven to cook.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "W3Schools talks about the idea of \"producing code\" and \"consuming code\".",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The producing code is the code that takes some time, and the consuming code must wait for the results of the consuming code.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Anatomy of a Promise:\n`new Promise(executor)`\nWhere executor is a function to be executed by the constructor, which should take two functions as parameters, `resolve` and `reject`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `resolve` function is used to return the result of the promise, and the `reject` function is used to return an error.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When the `resolve` function is passed a primitive or object that can't have `then` called on it, it is instantly fulfilled.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A promise also has 3 important methods: `then()`, `catch()`, and `finally()`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `then()` method is used to handle the fulfilled state, the `catch()` method is used to handle the rejected state, and the `finally()` method is used to run code after the promise has been settled.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Using this is referred to as the \"promise chain\" or \"promise syntax\".",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In this syntax, the code here in the promise chain is the consuming code.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `async` keyword is used to define an asynchronous function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An `async` function always returns a promise, and the value of the promise is the value that the `async` function returns.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `await` keyword is used to pause the execution of the prefixed function until the promise from the `async` function is settled.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is because `await` will pause the execution of the function until the promise is settled, and if the function is nested, then the parent function will also be paused.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If a nested function needs the `await` keyword, then the parent function needs to be an `async` function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Basically `resolve()` is used to return the result of the promise, and `reject()` is used to return an error.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I learned the \"producing code\" and \"consuming code\" way of thinking about promises is useful for me.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When I tried to put the next promise inside of a function called by the `.then()` method, it didn't work.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It only did when I placed the promise function directly inside of the `.then()` method.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "What I did learn is that Promises are objects that take in a function to produce something, and then with the promise syntax, the promise chain consumes the product of the producing code.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In doing these assignments, I decided to read up on callbacks, since that kept being mentioned.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A callback in JS is a function that is passed to another function as an argument.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In JavaScript, functions are executed in the order that they are called.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Hence the name callback, because a function can be defined and passed as a parameter, but isn't called until the function that it is passed to is called, and it \"calls back\" to the callback function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When using async/await, remember that the `await` keyword can only be used inside of an `async` function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Thus, async is only needed when I want to (1) return a Promise, or (2) use the `await` keyword.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The method to get and the full year from a date object is `getFullYear()` and `setFullYear()`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The method for the month is `getMonth()`, but it is zero-indexed, so January is 0, February is 1, and so on.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "All of the Math operations beyond the primative operators are in the `Math` library.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The JS ternary operator is the same as that in C++, `condition ?",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In a `switch` statement, the `default` keyword is what denotes a block that will execute if none of the cases are true.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "JS's version of `for in` loops is the `for (x of array)` loop.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Modules\n: A file that contains code that can be exported to other files.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `export` keyword in front of a function signfies that said function is to be accessible by .js files that are trying to import.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `import()` function is used to import a function, and the `from` keyword is used to specify the file that the function is being imported from.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To import all of the functions from a modules, use the `*` wildcard.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "You might also be able to use `import 'module` to import the entire module, I'm not sure though.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Node.js is a runtime environment that allows you to run JavaScript on the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is built on the V8 JavaScript engine, which is the same engine that is used in the Chrome browser.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some Node things to know:\n**NVM** - Node version manager\n**Node** - JavaScript runtime\n**NPM** - Node package manager\nDon't push the `node_modules` directory to GitHub, because of how large it can get.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `require()` function is used to include a module, passing in the name of the module as a parameter.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Stuff from lecture to look up later (Web service functions):\n`require()`\n`createServer()`\n`writeHead()`\n`write()`\n`end()`\n`listen()`\nReact is a Web Development framework.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Frameworks focus on the DRY principle, simplfying and bundling common patterns and components.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They also strive to improve performance and increase device coverage.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The three most used web frameworks are **React**, **Angular**, and **Vue**.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is a syntax extension for JavaScript that allows you to write HTML in your JavaScript code.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "React works quicker than native JavaScript by using a virtual DOM stored in memory.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When a change is made to the DOM, React updates the virtual DOM, and then compares the virtual DOM to the actual DOM.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If there are differences, React only updates the parts of the DOM that have changed, rather than re-rendering the entire DOM.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "React is not a page-centric or file-centric system like native HTML, CSS, and JS development.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Components exist as either **functional** or **class** components.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Functional components are just functions that return JSX, and class components are classes that extend the `React.Component` class.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Class components are becomeing deprecated because of hooks, so avoid using them.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When using a component in JSX, the component is used like an self-closing HTML element, with the name of the component as the tag name.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Props are passed to a component as attributes, and they are accessed in the component using the `props` object.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They are essentially parameters for the behind the scenes function of a component.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Destructuring is a way to extract values from an object or an array and assign them to independent variables.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A **hook** is a function that allows you to access and use the state of other React componenets.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It takes an initial value as an argument, and **it returns an array with two elements**: the current value of the state, and a function that can be used to update the state.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I can list them as a parameter inside {braces}, or uses the props object and refer to the properties of `props`, using the name of the prop passed in the component call.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "For example: `<Demo who = \"James\">` could have the `who` prop accessed in the component as `props.who`, or as `{who}` if that was how it was passed in.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To do inline styling with React, use the `style` attribute in the component's return HTML.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The value of the `style` attribute should be a JavaScript object with the CSS properties as keys and the values as values.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The keys should be camelCase versions of the CSS properties.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Anytime a change is made to the state or props of a component, that component's `render()` method is called, and the component is re-rendered, making the change visible.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Another key to reactivity in React is making components return HTML with event listeners.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Two that I used for the assignment were `onChange` and `onInput`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The latter is used for input elements, and the former is used for other elements.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Something from the assignment that I didn't understand yet was the attributes used to get the value of the input element.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "What appeared in the code was `e.target.value`, and I'm thinking `e` was just the parameter used for the input data, but I'm not 100% sure, and I'll need to find out exactly what `.target.value` is.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "React routing is what allows the application to navigate between different \"pages\" without actually changing the URL or html file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The router finds the correct component to render based on the file path given, and then renders that component.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some important components for this: `BrowserRouter`, `Route`, `Routes`,`NavLink`, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The toolchain used to push a React app into production includes Babel (transpiling JSX, polyfilling) and Minify JS for compressing the JS files.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An application called Vite is used to bundle the files, and then the application is deployed to a server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An important difference between JS and JSX syntax is that in JSX, the `class` attribute is replaced with `className`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is because `class` is a reserved keyword in JavaScript.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Things to look for in router assignment: relationship between `NavLink` component's `to` attribute and the `Route` component's `path` attribute.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "There are 3 things that need to be done to use React Router:\n1.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Just import the `BrowserRouter` component from the `react-router-dom` package, and then wrap my entire application in the `BrowserRouter` component.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Following the standard nomenclature, This would look like wrapping my `<App />` component in the `<BrowserRouter>` component.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Import the `Route` and `Routes` components from the `react-router-dom` package.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Each individual `Route` component has 2 essential props: `path` and `element`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `path` prop is the URL/file path to element in the `element` prop, and the `element` prop is a component to be rendered.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It functions like an anchor element, and the path to the component to be rendered is passed in the `to` prop, not in an `href` attribute.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Links are used outside of the `Routes` component, because only the `Routes` components get re-rendered when the URL changes, and we generally want nav bars to be static across pages.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Routes are navigated by matching the `to` prop of the `Link` component to the `path` prop of the `Route` component.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If I want to render a page/component for individual products, to keep the code DRY and avoid hardcoding, I can use a dynamic route using a colon followed by name for the dynamic parameter.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Route priority is determined by rules similar to those that dictate CSS specificity.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The more specific the path, and the less dynamic parameters, the higher the priority.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Also the `*` character can be used as a wildcard to match any path that hasn't been matched by a more specific path.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The big thing to remember is that, as long as I put the path name in the `path` prop of the `Route` component, and then the same path in the `to` prop of the `Link` component, the router will handle the navigation.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here are some notes from my studying React on W3 and porting my startup app to React:\nThe command to create a React app is `npx create-react-app my-app`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The command to start a React app from the root directory is `npm start`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Though parameters aren't required in arrow functions in ES6, the () are still required, so `() => {}` is the correct syntax, regardless of the presence of parameters.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When destructuring from an array, use `[]` with a comma for each element to skip.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The name put in the brackets is the name of the variable that the element will be assigned to.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The spread operator `...` copies all or part of an array or object into a new array or object.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember, the ternary in JS is the same as in C++: `condition ?",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This differs from Python, where the ternary is\n  `value if condition else otherValue`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "JSX syntax includes replacing where parenthesis would be used in JS with curly braces `{}`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "And functions passed to event handlers are passed inside of curly braces `{}`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is used to keep track of which items have changed, and which items are new.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Something that I ran into often as I was porting was forgetting to import things into `.jsx` files.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'll need to get into the habit of doing that with every `.jsx` file I make and work in.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Describe using Context API to manage state between App, Study, and Flashcard components.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "One of my biggeset takeaways from this stage of the startup was that it took much much longer than I anticipated or gave it time for.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I think experiencing this will serve as a good learning step for me.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "In the future I'll devote a lot more time to the design and planning to also get a feel for how long a project like this will take.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "One challenge that I encountered was comparing object equality.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember that data is stored in localStorage as JSON, so it needs to be parsed when it is retrieved, and stringified when it is stored.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Potential rework would include rendering flashcard, quiz, and respective edit components in the study component, rather than separate URLs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A router is a special kind of computer, so routers connecting to routers is how the internet works.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used to connect a computer to the internet using the infrastructure of telephone lines.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Fetch is a function that is used to make network (HTTP) requests in JavaScript.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used to get data from a server, and it returns a _promise_ that resolves to the response from the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `fetch` function takes a URL as an argument, and it returns a promise that resolves to the response from the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The response object has a `json()` method that is used to parse the response as JSON.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `json()` method also returns a promise that resolves to the parsed JSON data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Because of the promise returned, the `fetch` function is asynchronous, and its results are used with the `then()` method to handle the response from the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The default method for a fetch call is `GET` but `POST` can be used by using the optional argument.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Vite is a toolchain for web frameworks that bundles code quickly, and allows for features like minification, JSX, polyfilling, and others.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is used to bundle the code for a React app, and then deploy it to a server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is implemented for my startup in the deployment script.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Vite is installed using npm, and the commands `npm run dev` and `npm run build` are used to make development and production builds, respectively.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "After some more reading, the class notes for Express and middleware were the most helpful for me.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Using `require('http')` returns an object that can be assigned, with methods.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The major one is `createServer()`, which takes a callback function as an argument.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The callback function takes two arguments, `req` and `res`, which are the request and response objects, respectively.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `req` object contains information about the request, and the `res` object is used to send a response to the client.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `createServer()` method then returns a server object, which has a `listen()` method that is used to start the server listening on a specific port, by passing in the port number as an int, and an optional callback function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is code on the server that can be triggered/interacted with via HTTP requests.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When an endpoint cannot be found is when a 404 error occurs.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Express\n: A Node.js module used for manipulating and routing HTTP requests, generating HTTP responses, and using middleware to increase functionality.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Express works similarly to managing HTTP with Node, but rather than creating an `http` object, an `express` object is created, which has `get()` and `listen()` methods.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `path` argument is optional, and defines the path of the endpoint to trigger the callback on.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Functionalities are added in Express middleware using the `next()` function, which is used to pass control to the next middleware function on the stack.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When no more middleware functions are left, the response is sent to the client.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Express allows variables to be passed in the URL, and these variables are accessed using the `req.params` object.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `req.params` object is an object that contains the values of the variables passed in the URL as attributes.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "PM2 is a process manager that uses daemons to keep node services running.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Terminal commands can be used to do various things related to PM2 on a server where it is installed.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Dr. Ventura reminded us that having a big picture mental model of the system/project is super important.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is critical to understanding how it should work and what architecture it should have.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To debug the backend code, it can be a bit trickier, since it technically runs on a computer in Virginia.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Luckily, Vite allows for debugging by proxying into the port that the backend is running on.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is done using a `vite.config.js` file, where this port is specified.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This file is placed in the root directory of the project, and frontend code can be stepped through in the browser dev tools as normal, and the backend code can be stepped through in VSCode.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A good way to think of a closure is when a function is returned and all of its state is returned and accessible as well.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Cross Site Request Forgery (CSRF) is a type of attack that tricks the user into performing an action that gives attackers access to their information, by using a fake website to send a fetch request to the real website, and access personal data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Cross Origin Resource Sharing (CORS) is a security feature that restricts what resources can be accessed by a web page from another domain.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, in this example, the Wells Fargo would only allow requests with an origin of their own domain.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Single Origin Policy (SOP) is a security feature that restricts what resources can be accessed by a web page from another domain.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'll link to the files [here](../notes/cs260.github/profile/webServices/dataServices/dataServices.md).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "For accessing data that is user-specific, Dr. Ventura recommended creating a collection for each username, and only access the collection tied to that username.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Rainbow tables are a type of attack that uses precomputed hash values for common passwords to crack hashed passwords, and then map those hash values to the original passwords to find matches.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "My understanding of endpoints is you define a path/URL that triggers a certain function when visited.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then, on certain components on the frontend, when I want to access that data, I use a fetch statement that is connected to that component to get that data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Design overview:\n**Objectives:**\nCreate user objects and store them in memory of the backend service.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Store the study objects of each user in the backend service.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create user objects and store them in memory of the backend service.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create a User class with a constructor that takes a username, password, and study materials as arguments.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create a set of users to store the user objects in memory and disallow duplicates.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create methods for adding users and transferring data from the backend to the front end.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create Login and Authentication components, add those routes to my frontend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "For both of these, copy the Simon code, since Dr. Ventura encouraged us to do so.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Make sure I read and understand all of that code as I do so, however\n3.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Store the study objects of each user in the backend service.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create an endpoint for updating the User object in the Users set with the study materials.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create an endpoint for getting the study materials of a user as they are updated on the frontend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Create an endpoint for getting flashcard suggestions when using the Help button on the front end.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'm going to start with the 2nd objective, since it seems to be a bit of a prerequisite, and should be the easiest.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "After having Micahel help me, I got a few things cleared up mentally.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The Vite server simulates the front end, serving all of that up.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The port that the Vite server runs on and the backend port need to be different.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The port listed in the `proxy` object in `vite.config.js` for a particular endpoint is the port the backend is running on.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember that, as far as my understanding, a node package needs to be installed in the same directory as the file it is being used in.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Because I needed a consistent data structure for Decks between the front and backend, I got to tackle the task of sharing the classes between the front and backend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I made the Card and Deck classes into separate `.js` files, and then put them in a `shared` directory in the root of the project.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Continuing from the last point, I found some trouble with importing the classes into both the frontend `.jsx` files, and the backend `.js` node files.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I learned that the `import` statement is used in the frontend, because `.jsx` files use ES6 modules, while the node.js backend files use the CommonJS syntax for including modules, which is done with the `require()` function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, to make this work for the full stack, I changed the `type` of the node app to use ES6 modules.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I did this by adding the line `\"type\": \"module\"` to the `package.json` file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This allowed me to use the `import` statement in the backend files as well.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "However, then I had to change and update the `require()` statements for the other node modules I was using like `express` and `uuid`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I was able to do this with identical functionality by doing `import express from 'express'` and `import { v4 as uuidv4 } from 'uuid'`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some important Object methods that I learned about are `Object.keys()` and `Object.entries`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I ran into a challenge with `Object.entries()` where I thought just the entry was in the array, I didn't know it was an array of arrays with the array index and the entry.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So I just had to alter the code slightly to access that data correctly.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It takes 2 parameters, a function to run, and an array of dependencies.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The function runs when the dependencies change, after the DOM updates with those changes.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The passed in function returns a cleanup function, which is used to clean up the effect before the next DOM update.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Understanding this hook and using it properly was extremely useful.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "After taking a look, I think I am going to have to move around my shared Card and Deck .js files, or experiment with editing the deployment shell script so that the build version can access those correctly.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Dylan helped me find the error that I had in accessing the Object passed from the backend to the front in the HTTP response.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I was calling `res.json({ \"userObject\":user})`, which was returning a nested object, with an attribute of `userObject` that contained the object I had stored in `user`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So by instead just using `res.json(user)`, I was able to access the object directly in the front end.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The class repo notes on Troubleshooting 502 errors was really useful.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "One of the most helpful things was remembering that I can run the backend script on the server itself, and see what errors are being thrown, `node index.js`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Get correct data handling for exisitng pages (flashcard, flashcard edit)\nMain implementations for Startup Login:\nCookies\nStore decks in DB now, can keep front end methods the same.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Notes:\nTo safely establish a database connection, import `MongoDB` library in to your backend file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then put your database credentials in a separate .json file, _**and make sure that that .json file is in your .gitignore file, DO NOT commit or push those credentials**_.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then call the MongoDB method to establish a connection, using the info from the .json file.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The data are stored as JSON objects, but also the queries to access the data are in a JavaScript-esque style.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Each \"table\" is called a collection, and each individual entry in a collection is called a document.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The object model of Mongo starts with the `MongoClient` object, constructed using a url that connections to the MongoDB server, which contains the username, password, and host name, such as this: `mongodb+srv://${userName}:${password}@${hostname}`\nA `db` object is created from the `MongoClient` object, and then the `db` object, which is used to create and access `collection` objects.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If a database or collection does not exist when called, then MongoDB will create it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This method takes an object as an argument, which is used to filter the results of the query.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An example for a collection of rental houses would be `collection.find({bedrooms: { $gte: 3}})`, which would return all of the documents of the collection that have 3 or more bedrooms.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The method for inserting a document into a collection is `.insertOne()`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This method takes an object as an argument, which is the document to be inserted into the collection.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The method returns a promise that resolves to the result of the insertion.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The [reading](../notes/cs260.github/profile/webServices/webSocket/webSocket.md) for this was pretty helpful.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "WebSocket connections move from client-server to peer-peer communication.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The main difference in between these two is that client-server can only ever be initiated by the client, while peer-peer can have communication (after the initial) initiated by either end.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "On the backend, import the `ws` node module, and create and instance of the `WebSocketServer` class.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `on` method in WebSocketServer objects and other WebSocket objects, sets up a sort of event listener.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So a WebSocketServer called `wss` with the method `wss.on('connection', (ws) => {console.log(\"Hello webSocket\")})` Will log out that string on a client connection to the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `.on('message')` method will execute the passed in callback function when a client message is received.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "On the frontend, WebSocket capacities are built in, so you can simply create an instance of the existing WebSocket class.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The frontend WebSocket object also has a type of event listeners, with slightly different syntax (`.onmessage()` instead of `.on('message')`).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When WebSocket capacities are only wanted for some of the data traffic, a non-webSocket server can be made, as well as an instance of WebSocketServer, with the property `noServer` set to true.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then connections can be specified to be upgraded or not, and the backend can have event listeners for those upgrades.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Because all of the Class instantiation happens on the front end, I don't need to worry about that on the backend at all.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The main thing will be identifying which endpoints need to access data, and how to get the data from the DB for those end points.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Data-needing endpoints:\nLogin endpoint\nCreate user endpoint\nLogout endpoint\nThese will follow the same general structure as the Simon example, but slightly different because of the data structure.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I think that the there is no way to use a mix of the two, only ever one or other other.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I realized that because the file structure that led to the Card and Deck classes are odd, I just defined the classes again in the backend file, and because that was the main reason I was using ES6 on the backend, I found it easier to just use CommonJS for the backend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I also learned that because ES6 modules and Common JS use different methods of exporting, that a class or method that is being exported can only be exported via one of those two methods, not both.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I had to understand `cookie-parser` a bit better for this one too.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I learned that when the express app is using `cookie-parser` the `req` object has a property called `cookies` that is an object that contains all of the cookies that are stored in the browser for the site.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The cookie-parser is what parses and populates this property of the request object.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember that `bcrypt.hash()` requires the string to hash as the first argument, and the salt rounds as the second argument.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The commond `lsof` shows what ports are being used on MacOS.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I was running into a problem of trying to debug the backend index.js file, but it kept saying that the port was in use.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I didn't realize that because the bash script runs `pm2 restart startup`, that the index.js file was already running using pm2.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So I had to stop the pm2 process, and then run the index.js file in the terminal to debug it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "That honestly should come earlier in the hierarchy before googling, because the info an questions in the Discord are specific to the class' context.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I was able to find that other people had already had the exact same problem as me, with the server not being able to access the Database despite the IP address being whitelisted, and the fix was to change the MongoDB version to an earlier one.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "There are 2 ways to think of peer-to-peer communication: First, the server and the client being direct \"peers\" where their communication is bidirectional.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Second, different clients are \"peers\" to each other via their common connection to the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A client doesn't communicate directly to another client, but it communicates a message directed for a client to the server, and the server sends that message to the receiving client, with the server initiating the communication.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This object is a WebSocket connection object that is created by a client connecting to the server.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, the WebSocket object is instantiated at connection, not by the callback function.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "If no dependencies are passed into a `useEffect()` hook, then all of the state variables of the component are its dependencies.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "To set no dependencies, pass an empty array `[]` as the second argument of the `useEffect()` hook.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The WebSocket deliverable will deal alot with event handlers.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "On a different note, a popular platform for testing web apps on different devices is called BrowserStack.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "There is also UI and Endpoint testing, check the class readings for useful resources there.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "A good place to see notices about recent data breaches is on Tech.co, [here](https://tech.co/news/data-breaches-updated-list).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Security is a massive concern that should always be considered.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Some major types of security threats are:\nInjection attack: When an attacker sends malicious data as part of a query to a server, and the server executes the query with the malicious data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Cross-Site Scripting (XSS): When an attacker sends malicious scripts to a server, and the server executes the scripts.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Social Engineering: When an attacker tricks a user into revealing sensitive information.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Denial of Service (DoS): When an attacker sends a large number of requests to a server, overwhelming it and causing it to crash.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The \"Line of Death\"\nDon't unconditionally trust anything below the URL bar, because it can be faked.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "OWASP, the Open Web Application Security Project, is a non-profit organization that provides resources for web application security.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "They have a list of the top 10 security risks for web applications, which is a good resource to check out, [here](https://owasp.org/www-project-top-ten/).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Juice Shop is a web application developed by OWASP that is intentionally insecure, and is used to teach developers about web application security.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "One way to get some useful data like protocol, port #, and hostname is to use the `location` object in the browser.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It is accessed as a proptery of the `window` object, so `window.location` will return an object with all of the data about the current URL.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The location object has properties like `protocol`, `port`, and `hostname` that can be used to get the data needed to connect to a WebSocket.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here are ideas and insights that I got from people's demos:\nThe deck of cards workout app was a really cool idea.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Abe said that API ninja is what he used to get the recipie data for his app.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "URLs to keep:\n<https://startup.mymovieknight.com/>\n<https://startup.subak.click/>\n<https://startup.deckofdeath.click/>\n<https://startup.homeworkhub.click/>\nTest Review:\nPort 80 is for HTTP, Port 443 is for HTTPS.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Cookies allow for the server to store data on the client's machine.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Remember that `fetch` can be used on the frontend and the backend\nAs I was working on MnemonicStudy a bit today (19.12.24), I did a little more digging and learning about the Context API and how it works.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The [react docs](https://react.dev/reference/react/createContext) are pretty useful.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "What I learned is that a more standard way to include dynamic values in the context object being used is to wrap all the components in a `<SomeContext.Provider>` tag, rather than making a separate function called SomeContextProvider, like I was doing before (I think what I was doing before was something generated by an LLM anyway).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `<SomeContext.Provider>` tag takes a `value` attribute, which is the object that is being passed to the context.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, I simply set a state variable and setter that had the same default value as the context's default value, and passed the state variable and the setter as the `value` attribute of the `<SomeContext.Provider>` tag.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is essentially the same as what the provider component functions were doing before, just a different way of packaging it.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I had a weird issue while working with Modals on the quiz page.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When I was trying to handle the show state of the modal, rather than just using the setter that I associated with the state variable for the click event listeners, I had to define seperate handler functions that used the setters from the state variables, and for some reason those handlers that I defined work, but using the setters directly does not, as the console says that causes an infinite loop.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'm curious to learn why the handlers do not cause an infinite loop.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I had to relearn the difference between `name` and `id` attributes in `input` elements.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, when form data is sent to the server, the keys for the values taken from the input elements are the `name` attributes of the input elements.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "And I've confirmed that for the flashcards, the editing fields to get correctly re-rendered when advancing or retreating cards, so I just need to find out why the quiz edit page is not re-rendering correctly.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "An input field that uses `defaultValue` is uncontrolled, while fields that use `value` are controlled.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The problem with uncontrolled fields, or at least those that use `defaultValue`, don't update when the state changes.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Use `value` instead of `defaultValue` for the input fields, and use an `onChange` event listener to update the state when the input field changes.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Use a `key` attribute in the input field that interacts with state variables, when using `defaultValue`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "When I select one of the radio options, that selection persists across all of the questions.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, if I select B on the first question, the next question renders with B already selected.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Then, if I select A on the second question, then go back to the first question, A is now selected.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'll need to find a way to make the radio buttons independent of each other.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "So, I needed to develop some way to store the selections throughout the quiz.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "It had been so long since running this that I forgot how to run the backend and the vite server lol.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "These are such basic things that I am documenting them:\nTo run vite the command is `npm run dev` in the root directory of the project.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "The `vite.config.js` file is used to configure the vite server, such as the port it runs on, and the proxy attribute for the backend port to connect to.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Running a backend that uses node.js is done using the command `node <file path>` using a path that leads to the main backend file, generally something like `index.js`.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "I'll be honest, there is a lot of stuff to do to make this project better.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Here is a small outline:\n[ ] Clean up file structure and architecture of project.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "This is all a lot of stuff, so I am going to try and focus on one at a time and take some small steps to keep myself motivated to keep working on the project.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "First steps:\n[ ] Message michael about his suggestions for file structure and architecture.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "text": "Michael also suggests **motion.dev** for animations, [Docs](https://motion.dev/).",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Not including a version will use the latest version installed.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Use `--no-errors-on-unmatched` to suppress errors on unmatched files.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Typescript enforces added protection against errors caused by potential null values, usually giving a message along the lines of \"`object` may be null\".",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "This can be overcome using the Null Assertion operator, `!`, Optional Chaining `?` (won't try to access attributes if an object is null), or Type assertions, `var as MyType`.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "As I worked on changing the title card component `DeckCard` to receive props from the `study` component, I learned that each prop needs to have the correct type annotations.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "I also learned that declaring the type annotations can be done a bit cleaner than the all-in-one line method by using an `interface`.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "TS interfaces work similarly to Java interfaces, but they are more to define the structure and types of a class, functions, or array, rather than the method signatures.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the what I used in `deckCard.tsx`\nI was working with toasts to test them out today, and wrestled with them for a bit.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "I learned that on top of the shad/cn component, I had to install the toast library `sonner` and then put a `<Toaster/ >` component in the `__root.tsx` file of my app.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "I worked on changing the main Flashcard component to modularize it a bit more.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "This way I can pass the study contents to it, or the edit contents to it, instead of duplicating it for both.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "The tricky part was that the children can't be distinguished between, if there is more than one passed in then the parent component simply gets an array of children.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "There is a `Children` API in React to map this array and access individual children, but React's docs discourage using it.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "So, instead of using children in the traditional way, I made a `front` and `back` attribute for the Flashcard component, and passed in components for the front and back, because the flipping animation wouldn't work with both in there as `children`.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "This maybe isn't ideal, but it beats all of that code duplication that would come from reusing the flashcard comp for an edit page but with slightly different inner workings.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "But, this did help me get exposed to `children` and how to use them in react, and how passing things as props also fulfill a parent-child role in relationships between components.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Another obstacle that I had was getting the `cardIndex` state that I was tracking to match with the index of the Carousel map function in the shad/cn component.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Apparently there is a `setApi` prop for the component that I was able to manipulate.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "The reason I decided to do this was because there is a method in this prop that allows me to set the direction back to forward facing when cards are changed, which was a really handy feature I didn't want to pass up on.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Variables must be typed, but don't need to be declared with a var keyword like JS.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Multiple variables can be assigned in one line, like `int x = 5, y = 6, z = 50;`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "They can also all be assigned the same value, with assignment operators in between each variable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Type casting is done with `()` around the type, like `int myNum = (int) \"0\";`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When moving from a smaller primitive type to a larger one, it is called a Widening Cast, and is done automatically.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When moving from a larger type to a smaller one, it is called a Narrowing Cast, and must be done manually.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, the length of a string is a method of the string (`.length()`), not a property or a separate method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Finding the index of the first occurrence of a char (or array element for that matter) is done with `.indexOf()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When using `.indexOf()`, on a string, the char you are searching for is placed in \"\", not ''.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Apart from the normal way with the `+` operator, Strings can be concatenated with the `.concat()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "And because strings are immutable, concatenation does not alter any existing strings, but creates a new one.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Escape characters are handled like normal, with a `\\` before the character.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Add the `-a` flag to `git commit` to commit all changes, without needing to add them first.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a shortcut for `git add .` and `git commit -m \"message\"`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java has a few main reasons for its use: **Portability**, **Object-Orientation**, **Garbage Collection**, **Maturity**, **Rich Libraries**, and **Large Community**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Remember, instance methods operate on actual objects of a class, while static methods operate independent from any instances of a class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This good for utility methods, or for declaring a \"singleton\" which is allocated to a class, not an instance of a class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Most classes in Java need to be constructed, which is done using the `new` operator.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `new` operator creates a new object of a class, and returns a reference to that object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, `new Random();` constructs a new `Random` object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some objects are ready to use without constructing them, like `System.out` or `String`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An alternative way to produce an instance of a class is called the _factory method_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An example is `RandomGenerator generator = RandomGenerator.getDefault();`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a static method that returns an instance of the class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is useful for testing small code snippets, and for learning Java.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is run by simply typing the command `jshell` in the terminal.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is why memory addresses start is `0x`, because they are hexadecimal literals.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some special floating-point values are `Double.POSITIVE_INFINITY`, `Double.NEGATIVE_INFINITY`, and `Double.NaN`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To check if a value is `NaN`, use the `Double.isNaN()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Special `char` literals include `'\\n'` for newline, `'\\t'` for tab, `'\\b'` for backspace, and `'\\r'` for carriage return.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Sometimes the type can be inferred by the compiler, so instead of a type, the keyword `var` can be used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To mutate a string throughout a program, there is the `StringBuilder` class, which includes familiar methods like `.append()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because of string immutability, concatenating strings with the `+` operator can be really inefficient, so try to use `StringBuilder` when possible.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Strings have plenty of useful methods, reference the reading or Java docs for more info.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some of the more useful ones include: `.length()`, `.charAt()`, `.substring()`, `startsWith()`, `split()`, `replace()`, and others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The static method `main`, which is the entry point for the program, takes in the `String[] args` parameter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is an array of strings that are passed in as command line arguments.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Accessing command line arguments is done by simply indexing the `args` array.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This does not create an array, but a reference that can point to one.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An array is created with the `new` operator, like this: `int [] intArray = new int[10];`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The array is initialized with values like this: `int [] intArray = {1, 2, 3, 4, 5};` (list initializer syntax) or after the creation of the array, `intArray[0] = 1;`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If values inside of an array are primitive, the values are stored directly in the array (directly in the allocated memory).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If the values are objects, the values of the array are references to the objects, not the objects themselves.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Multi-dimensional arrays are created by nesting the `[]` brackets.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, `int [][] intArray = new int[3][3];` creates a 3x3 2D array.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The same syntactical rules apply for declaration, creation, and initialization of multi-dimensional arrays.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, mult-dimensional arrays don't have to me matrices, or square in dimensions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "They can have uneven lengths of rows and columns, referred to as a \"ragged array\".",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A package is a way to encapsulate code, specifically classes, into logical groups.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The name of a package should match the directory structure of a project.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "All of the code in the same package has access to each other, because all of that code is in the `package scope.` Code that is available outside of the package is in the `public scope`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `public` keyword is used to declare a class or method as public.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a class is not declared as public, it is only available to other classes in the same package.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Packages can have sub-packages separated by dots (`java.util.date`).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The package name becomes part of the class name when you place a class in a package.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, a class named `Date` in the package `java.util` would be referred to as `java.util.Date`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To refer to a packaged class, you must use the fully qualified name, with the package name and its sub-packages, OR use the `import` keyword.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `import` keyword is used to import classes from other packages.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done at the top of the file, before the class declaration.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This provides a shorthand for referencing packaged classes, allowing reference using just the class name.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The wildcard `*` imports all of the classes in the package, but it is not recursive, meaning it doesn't import classes from sub-packages.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `java.lang` package is automatically imported, so classes in this package do not need to be imported, and don't need to be referenced with their fully qualified name.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When using 3rd party libraries, or utilizing code external to the current class, the `java` command needs to be given the classpath value, which is given with the `-cp` flag in the command.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When specifying mulitiple classpaths in one command, separate each path with a `:` on Linux/Unix systems, and `,` on Windows systems.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "CLASSPATH is an environment vairable that lists all of the directories that contian .class files, package base directories, or other resources the application needs to access.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "IDEs like IntelliJ and Eclipse manage the classpath for you.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Both are useful classes with methods that perform essential functions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A `Scanner` is an object that implements an interator, and has a method, `hasNext()` to return if a next object exists, and `.next()` to yield that next object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is part of the reason why programs are compiled into byte codes that are run on the Java Virtual Machine (JVM).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This allows Java programs to run on any machine that has a JVM installed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `java` virtual machine launcher is invoked with the name of a class, with dots separating the package segments, and no extension.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java will internally check if the string already exists in the pool, and if it does, it will not create a new string, but instead return a reference to the existing string.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "By contrast, using the `new` operator will always create a new string object on the heap.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, `int[] primes = new int[10];` creates an array of 10 integers, named `primes`, all initialized to 0.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This second way of initializing an array uses what is called the \"list initializer syntax\", which uses the {} braces.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, the variables of a class are called the `fields` and the functions of a class are called the `methods`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One way of thinking about _Encapsulation_ is only exposing code on a need-to-know basis.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done by using private fields, and **getters and setters**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Common practice is to make all fields private, and then create public methods to access and return the field values, and modify the field values as needed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Sometimes this will seem redundant, but the value becomes apparent when the field values or program behaviors become more complex.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Sometimes the getters and setters are as simple as this:\nWhen creating my own classes, it is generally a good idea to _overwrite_ a few of the built-in Java methods: `equals()`, `hashCode()`, and `toString()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is because the default implementations of these methods generally do not have the desired functionality.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When overriding a built-in Java method, the method is prefixed with the `@Override` annotation on the line above.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Overriding these methods is a good practice, because it ensures that hash codes are generated with all the fields being considered, and equality is being determined by all the fields as well.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Overriding the `toString()` method is especially helpful for debugging.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This reference is stored in the variable that the develolper passes in.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To reference an object inside of itself, the `this` keyword is used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Generally, when referencing an objects fields or methods, Java will assume that the reference is to the current object without the `this` keyword, unless there is a naming conflict.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Instance methods and variables are associated with and operate on a specific instance of the class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Static methods and variables are declared with the `static` keyword, while instance methods and variables are not.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, the constructor will be called whenever the class is instantiated with the `new` operator.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Constructors can be overloaded, meaning that multiple constructors can be written with different parameters.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The constructor that is called is determined by the parameters passed in when the class is instantiated.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Another common use of constructors is to make a \"copy constructor\", which takes in an object of the same class and copies all of its fields to a new object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a constructor is written, the compiler will not write a default constructor.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is required when there is a naming conflict between a parameter and a field of the class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is optional when there is no naming conflict, because Java can infer that the reference is to the current object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done by using the `this` keyword like a method call, typing `this()` and passing in the parameters for the corresponding constructor.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This process, of calling another constructor in the same class, is called constructor chaining.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It represents a group of constants, so the values are immutable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An `enum` is declared with the `enum` keyword, and the values are declared in a list, separated by commas.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An example of an `enum` is:\n  \n  > The values of an `enum` can be accessed with dot notation.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To access the values of the `Level` enum, you would use `Level.LOW`, `Level.MEDIUM`, and `Level.HIGH`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is most useful to use an `enum` when you are working with a set of values that you know will remain constant.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The standard order of elements in a Java class\n  > Here is an answer provided by GitHub Copilot:\n  > In the context of the notes in the file, \"The standard order of elements in a Java class\" refers to the conventional sequence in which different parts of a Java class are typically organized.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This order helps in maintaining readability and consistency across Java codebases.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In object-oriented programming, it is fairly common to create a class just for representing a collection of data.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These instances of data field collections are referred to as `data objects`, and are fairly common in Java.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Ideally, a data object should have the following characteristics:\nIs immutable\nHas getters for all fields\nOverrides the `equals`, `hashCode`, and `toString` methods to match the fields of the object\nThis can be done with a standard class, but it adds to the amount of boilerplate code that is needed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because of how common data objects are, Java introduced the `record` keyword, that can create something functionally equivalent, but much, much more concise.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To create a record, use the following syntax:`record Person(String name, int age) {}` Record that are created this way will meet the three characteristics mentioned above, as they are immutable, have getters for all fields, and override the `equals`, `hashCode`, and `toString` methods to factor in all of the fields of the record.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Polymorphism\n: A blanket term in computer science for taking one object and morphing it to fit in to many contexts.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, this is accomplished primarily through _inheritance_, _interfaces_, and _abstract classes_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The central idea around an `interface`, is being able to define a class, and what its methods do, without defining how they do it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is defining functionality without defining implementation.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An interface defines methods that a class implements using a normal method signature, including the method's access scope, return type, name, and parameters.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When a class implements, or uses, and interface, the class declaration uses the keyword `implements` such as `class MyClass implements MyInterface`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The class needs to declare and implement the methods defined in the interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, in the \"implementing class\" is where the functionality of the methods are actually defined.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A class that implements an interface can implement other methods than the ones defined in the interface as well.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If any of the methods defined in the interface are not implemented in the class, the class must be declared as `abstract`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When writing the implementation for the methods defined in the interface, some programmers like to put the `@Override` annotation before the method in the implementing class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is not technically necessary, it will function fine without, but it means to add a bit of clarity to the code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When this is done, that variable can have a value that is of any of the subtypes of that interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, if a variable is declared as having the type `Collection` the variable can be assigned a value of any class that implements the `Collection` interface, such as `ArrayList`, `LinkedList`, or `HashSet`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There are built-in JDK interfaces, that certain classes implement, and the developer can create new classes that implement built-in interfaces too.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done similar to writing a class, but with `interface` as the key word, instead of `class`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is a sample:\nLater on, Interfaces were updated to allow the use of `static`, `default`, and `private` methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This allows for methods to be actually defined within an interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When a class \"inherits\" from another, the inheriting class is called the `subclass` and the class that gives things to be inherited is the `superclass`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A subclass is able to access and use code from a super class as if it was written in the subclass itself.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, the keyword for defining a class as a subclass of another is the `extends` keyword.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An example:\nIn this example, the subclass, Dog, is able to access all of the code for the `Pet` class, and then define its own code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This perspective makes the `extends` keyword make sense, because the class `Dog` is taking all of the functionality of `Pet`, and then **extending** past that with whatever members are defined in `Dog`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If an implementing class only implements some of the methods defined in the interface, or if it defines additional methods without providing their implementation, then that class is an `abstract` class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Both the class needs to have a signature of `abstract` and the methods that are left unimplemented.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, similar to implementing classes of interfaces, a subclass of an abstract class is what will implement the abstract methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Similar to interfaces, any variable whose declared data type is that of an abstract class, can hold a value of any of its implementing subclasses.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Lastly, the keyword `final` can be applied to method signatures or field declarations.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a method is declared as `final`, then it cannot be overridden by subclasses.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a field variable is declared as `final` then its value become immutable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Normally, errors are thrown to the caller of a method, so errors must move up the call stack, and generally only involve returning an error code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Instead, throwing exceptions allows specific _handlers_ to take over control when an exception is thrown.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Really, all exceptions are thrown at runtime, but the objects of the `RuntimeException` class are not checked by the compiler.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So `Runtime Exception` means that they are first _detected_ at runtime, makings its subclasses _unchecked_ exceptions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "All other exception types are checked by the compiler, thus their designation as _checked_ exceptions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Any method that has the potential to throw a **checked** exception must have it declared in the method signature, after the method name.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If an exception is thrown while any of the code in the `try` block executes, then control will be passed to the handler that is defined in the `catch` block.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If no exception is thrown, then the `catch` block is skipped.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `finally` block is always executed, regardless of exception throwing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Often times a exception being thrown will prevent resources from being correctly deleted or closed from memory, which presents a clear issue.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The syntax is the same as a try block, but before the curly braces `{}` any resources that need to be closed are declared, separated by semi-colons if there are morn than one.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Once an exception is thrown **or** the try block executes successfully, the resources are closed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example of these three:\nThings can get a bit trickier if the `close` method for one of the resources is what actually throws an exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If just the close method exception gets thrown, then in it thrown to the caller.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If another exception is thrown, and then the close method, which is executing because of the prior exception, throws an exception, the close method exception can safely be ignored for now.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When this second case happens, the first exception gets rethrown, and the second exception is added as a _suppressed_ exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These can be accessed with an exception object's `getSuppressed()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because the resources that can be passed to a `try-with-resources` block are limited to those of the class `AutoClosable`, the `finally` block is still necessary for other types of resources.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Two important notes about `finally` blocks are 1, to avoid putting return statements in `finally` blocks, and 2, to avoid throwing exceptions in `finally` blocks.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because a `finally` block is always executed, a return statement in a `try` block will not be executed until the `finally` block is executed, so that return statement will be lost to the one in the `finally` block.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Throwing an exception in a `finally` block will override any other exceptions that are thrown, and the exception thrown in the `finally` block will be the one that is caught, and the other exceptions will be inaccessible, as the suppression mechanism only works with try-with-resources blocks.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Generally, just avoid any code that will alter the control flow in a `finally` block.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As of now, I don't quite understand the why behind rethrowing, so I'll need to pay attention to that in lecture.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "From what I do understand, one purpose of rethrowing is to **chain** exceptions, which allows you to change the class of an exception to provide more meaningful information to the caller and/or stack trace.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some classes of exceptions have a method to get the cause to then display it, generally `.getCause()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For those that don't have a cause as a constructor parameter, the `.initCause()` method can be used to set the cause of the exception (the argument passed to `.initCause()` must be a `Throwable` object, generally it is the exception that caused the current exception).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When an exception is never caught, a _stack trace_ is given.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a list of all the methods that were called up to the point of the exception being thrown.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Most exception classes also have a `.printStackTrace()` method that will print the stack trace to the console.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Along this vein, the Object class has useful methods that can throw exceptions, such as `.requireNonNull()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If you see that this method is the latest on a stack trace before an exception, you can much more easily detect the bug.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It also can take a message string as an optional 2nd parameter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some alternatives to these methods can be useful too, such as `.requireNotNullElse()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `Collection` interface is the built-in method for implementing some common data structures in Java.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is a chart that shows the inheritance of various types:\n  !",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A useful method that the book mentions:\n  > the method `Collections.nCopies(n, o)` returns a `List` object with `n` copies of the object `o`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "That object \u201ccheats\u201d in that it doesn\u2019t actually store `n` copies but, when you ask about any one of them, returns `o`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is an example of one of the many useful methods of the `Collections` utility class, whose methods operate on any `Collection` object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It has some useful methods for getting and setting the first and last elements of a list, returning the list in reversed order, and other useful methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The method is simply called `iterator()` and returns an iterator for that type.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Like typical in most languages, 2 of the core methods for Java iterators are `hasNext()` which returns a boolean, and `next()` which advances the iterator.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Whenever a \"for-each\" loop is used, `for (String element : collection)` What is actually being done is an iterator is being used under the hood to iterate until the end of the collection is reached.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `remove()` method of the Iterator interface removes the _previously visited_ element, not the one currently being pointed to.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For more details, [here](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html) is the doc for the Iterator interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To do a conditional removal of an element, the collection method `removeIf()` is much easier than iterating through and removing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Part of this is due to the nature of iterators, in that the corresponding collection can't be mutated in between iterator instatiations, otherwise a `ConcurrentModificationException` is thrown.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These are thrown to make sure that the iterator that you instantiate doesn't become invalid.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Sets have no index, no concept of \"this value is 'at' this location\".",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is also `LinkedHashSet`, which is a hash table combined with a linked list.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A HashMap hashes the keys, which is efficient but traversal visits the entries in an unpredictable order.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A ConcurrentHashMap allows safe concurrent updates\nJSON is handled in Java using Google's open-source `GSON` library.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To create a JSON string, you must create a `gson` object, which is done using the `GsonBuilder` object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Simply call `new GsonBuilder();` and then to create the string, just use the `.create()` method on the GsonBuilder object.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `.setPrettyPrinting()` method makes the JSON string more readable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To create a `gson` object for parsing, just create a new `gson` object, and then use the `gson.fromJson()` method with the needed arguments.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The main methods used are the `.fromJson(jsonString, classType)` and `.toJson(object)` methods, which are used for deserialization and serialization, respectively.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A brief history of Java:\nA guy left Sun Microsystems because he didn't like it there.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The boss, Scott Mcneely, went to some of his senior engineers and asked them to try an find the new hot thing in tech.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "James Gosling was one of the engineers, and their project led to creating Oak, a language designed for communication between devices.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Mosiac and the web launched, and around 1994, the Green team (the group from Sun) realized they accidentally made a language that was perfect for the web.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "They changed the name to Java since they couldn't trademark Oak, and made the HotJava Browser, allowing dynamic content which was a big deal at the time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Netscape announced in 1995 that they would support Java, and that is kind of where it took off.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Oracle then bought Sun in 2010, and also gaining Java in the process.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java uses references instead of pointers (pointers are evil according to Dr Wilkerson).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Data types are the same size in Java, in C++ they can vary based on hardware.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In C and C++, code needs to be compiled and linked, while classes are dynamically linked at runtime in Java.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Compiled vs Interpreted code:\nCompiled code is less portable, but faster.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java is a hybrid of the two, with the code being compiled by the same compiler, regardless of platform, and the same Java Byte Code is run on any hardware, and then each platform has its own JVM that interprets the Byte Code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This means that the Java Byte Code is compiled to machine code at runtime, and then that machine code is run.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This allows the JVM to optimize the code for the specific hardware that it is running on.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The JVM is also a Hotspot VM, meaning it can dynamically recompile at runtime, while other compilers can't do that.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The reason that using a `PieceMovesCalc` interface, with a set of implementing classes, works slightly better has to do with serializing and deserializing the ChessPiece objects.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because ChessPiece is what will be serialized and stored, the move calculation logic doesn't necessarily need to be stored.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, if it doesn't need to be stored it is better to leave it out, so that serialization and deserialization is a bit simpler.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, making an interface that `ChessPiece.pieceMoves()` will call, and then having the implementing classes have the logic for the moves, this will leave the move logic out of the serialization process.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Not all classes have main methods, and in fact most don't, as they are meant to specifically only be accessed from other classes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Primitive data types, refer to [Ch 1 Reading](./notes.md#key-things-to-understand)\nFor a lot of the other content in lecture today, reference [Java Basics Section](./notes.md#java-basics)\nAlthough subclassing seems intuitive with `ChessPiece`, because there is already a way to determine the piece type, with the ChessPiece field `type`, subclassing would give a redundant way to determine the piece type, which is a code smell.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "And the reason to not put all of the behavior in switch cases in `ChessPiece` is the **Single Responsibility Principle**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a software engineering principle that dictates that each class handles one responsibility only.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Remember that references and objects are different, and only the `new` operator creates objects, references are created with the `Date dt` syntax.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The main takeaway from Dr. Wilkerson's spiel about the programming exam is that spending adequate time preparing is the key to passing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'm going to do the whole 4 hours at least once as practice, even though it'll be time consuming.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Contrary to the Java convention, the automatic getters generated for records simply use the name of the field for the method name, such as `.name()`, rather than `.getName()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Records are immutable, but can have methods defined within them that go beyond the automatically generated ones.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If you want to mutate a record, you'd have to create an entirely new record.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "What the readings and the slide say about exceptions in Java holds for the majority of languages, with a few nuances here and there.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Java, something unique to it is the Handle or Declare rule.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is, when a checked exception is found in compilation, the JVM forces a handler (try-catch block) to be made, or the method to be declared (in the signature) as throwing that checked exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If one of these is not done, the JVM will not allow the program to compile.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Dr. Wilkerson's advice is to not write handlers for _unchecked_ exceptions, because these types of exceptions are generally fixable bugs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Writing a handler for these unchecked exceptions can hide the bugs from the programmer and keep them from improving the program.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Always create Exception instances on the same line that you throw them.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The \"collections API\" refers to a group of classes and interfaces, mostly those shown in the chart from chapter 7 of the book.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An important detail is that a `Collection` **cannot** store primitives, only objects.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There are wrapper classes for primitives, like the `Integer` class, that can be used to store something functionally equivalent to primitive values.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "By \"hiding\" the specific type that you implement later, you can change it more easily later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "He mentioned a common theme in Computer Science of \"what you hide, you can change\".",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some interfaces not mentioned in the book:\n**Queue:**\nThis interface is designed for holding elements prior to processing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Methods include `add(value)` to add to the end of the queue, `peek()` to view the first item but not remove it, and `remove()` to pop out the first item in the queue.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Methods include `addFirst()`, `addLast()`, `peekFirst()`, `peekLast()`, `removeFirst()`, `removeLast()`\n[Javadoc](https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html)\nImplementing classes\nArrayDeque (resizable array implementation)\nLinkedList (linked list implementation)\nThe **stack** interface in Java is deprecated, because it does not work very well.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Stacks are still a very useful data structure, and can be successfully implemented using a deque, using the corresponding peek, remove, and add methods to enforce a LIFO insertion behavior.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This hash code is modulus divided by the length of the list storing items, and that result if the index for that item.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If there is a hashcode collision, each element of the hash table (the list being inserted into) can be a list, containing all of the items that have a hashcode that results in that index.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This needs to be overridden to compare equality by value instead.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An object in a collection implemented with hash tables also uses identity by default for the Object.hashCode method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If `equals` is based on value, then `hashCode` should be too, and both methods should use the same fields in their calculations.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An example for this class is when determining if the King is in Checkmate.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Dr. Wilkerson recommends copying the board and trying a move when doing this.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Shallow copy: Simply creates a new reference to the original object and its values (Not recommended usually).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Deep copy: Creates an entirely new object with separate identity, but the values are made equal to those of the original.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example: makes new Linked List with new nodes, that have same values as original.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Immutable objects don't need to be copied, can be referenced without worry.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Copy constructors entail making a constructor that taking in an instance of the same class as a parameter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Making a `clone` method involve implementing the `Cloneable` interface, and overriding/using the `clone` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Inner classes are useful for situations in which different classes need different implementations of an iterface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An example is the `Iterator` interface, and its implementation in different `Collection` types.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The implementation for an `Iterator` in a `List` is different for that of a `Set`, and even each distinct type of `Set` will need a different implementation of `Iterator`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A good way to do this is by making inner implementing classes of `Iterator` where needed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Anything from the outer class that the inner class will handle must be passed to it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This makes the inner classes a bit easier to find and improves some code readability.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It also allows the inner class to use local variables of the method, and in some cases allows for no constructor to be used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, because the lifetime of the inner class's objects are usually longer than the lifetime of the local variables, there is a protective restrction, which is that a local inner class can only use local variables that are _final_ or _effecively final_, which means that they are not mutated if they aren't declared as final.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This provides the same benefits as the other types, namely access to local variables and class members, but it is declared even closer to where it is used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Keep in mind that Inner classes were originally developed and added to Java for event handling, so that is where they really shine.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "They certainly have other uses, but that is their primary one.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It can be thought of as focusing on SKUs, retail prices, inventory items, etc., before thinking of data structures, class and interface relationships, and algorithms to use.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It doesn't work to design everything before doing any implementation, and niether does trying to implement without doing any designing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The best pattern to follow is to move naturally between both several times.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Programming languages provide low-level classes for dealing with simpler tasks.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Handling complex tasks in terms of just these built-in, low level classes would carry too much cognitive burden, so the developer creates higher level classes out of these lower level ones, to abstract out details and make complex systems more understandable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Abstractions generally represent real-world objects and their relationships and actions, whether those objects are internal to the program (`HttpServer`, `Database`), or a representation of an external object (`User`, `Car`, `Store`).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Spiritual thought: Prof. Wilkerson had a friend and member of his ward that had some heavy questions about polygamy.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "His friend took a doubtful approach, was exposed to false information online, and discounted his existing faith because of faith he didn't yet have.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "He left the church and Prof. Wilkerson had to cut off contact with him.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Prof. Wilkerson decided to find these answers, using a faithful approach.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "He started by studying the whole of the triple combination, focusing on anything about polygamy.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then he read just about every faithful and informed publication about polygamy.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is important to note that he didn't doubt his existing faith in the process.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is also important to note that he didn't get an answer any of his questions for 1.5 years.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "After 3.5 years he got about 4/5 answers, but even now he doesn't have all of the answers, but he still has a strong testimony.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Includes the [InputStream](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/InputStream.html) and [OutputStream](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/OutputStream.html) interfaces, and a host of implementing classes like `FileInputStream`, `URLConnection.getInputStream()`, and others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'll need to fact check, but I believe `Reader` and `Writer` are other implemeting classes, but I'll need to check.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In any case, `Reader`s and `Writer`s are for I/O of characters/text formatted data.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is a 1-1 correspondence between `InputStream` implementing classes and `OutputStream` implementing classes, having a matching type for each one.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Different Stream objects can be linked together to manipulate data during the entire read/write process.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A `FileInputStream` can be connected immediately to a `GZIPInputStream` so compressed files can be read in and decompressed all together, and compressed and written out all together.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These input and output streams with different features are called **Filter Input Streams** and **Filter Output Streams**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These are created by creating an instance of a `InputStream` or `OutputStream` implementing class, then passing that instance into the constructor for one of these Filter Streams.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A standard in I/O is to use `BufferedInputStream` instances, instead of a basic `FileInputStream`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is because a `BufferedInputStream` will go to the file/byte source, and grab a chunk of bytes at a time, storing them in an array.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When all of the stored bytes are read in, the stream will grab another chunk.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This prevents having to read from the file an excessive ammount.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A note for `BufferedOutputStream` is that if _the last group of bytes to be written out_ is less than the size of storage in the `OutputStream`'s array, it may not get written.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Streams can be converted into `Reader`s and `Writer`s using the `InputStreamReader` and `OutputStreamWriter` classes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The method `.hasNext()` returns a boolean if the end of file has been reached or not, and `.next()` returns the next token.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Whitespace characters are the default delimiters, but custom delimiters can be passed in as a regex string to the `use.Delimiter()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Questions for phase 1:\nWhen checking for CheckMate: First check if the king is in Check.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then get all of the moves for all of your pieces, and iteratively perform all of them and if just 1 gets out of check, then return false.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There are three main ways to get out of check: **1** capture the threatening pass, **2** block the threatening piece's path, or **3** move the king out of danger.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Most languages provide built-in JSON parsers, so I don't have to make my own.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "DOM Parsers\nConvert the JSON text into a DOM tree, then traverse the tree to extract the data wanted\n2.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Stream Parsers\nTokenizers that return one token at a time from the JSON data file\n3.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Serializers / Deserializers\nUse a libraries to convert JSON to Java Objects, and vice versa\nGson and Jackson are popular choices\nUsing `.class` returns a `Class Object` which is an object describing the structure of the attached class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `@SerializedName(\"STRING\")` annotation can be used before an object field to provide what the name of that field's key will be in the JSON.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Certain aspects of each JSON property can be controlled, such as decimal point lengths.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done using a variety of tools, but an essential is the `.registerTypeAdapter()`\nGeneric programming is a way to make classes and methods functional for a wider range of classes and data types.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Simply stated, a **generic class** is a class that takes in type parameters.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These are given in the class signature, inside of angle brackets, like this: `public class Entry<K, V>`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example: `Entry<String, Integer> entry1 = new Entry<> (\"JST\", 2234);`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A method can be made generic inside of generic or regular classes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The type parameters are given in between the method modifiers and the return type in the signature.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example: `public static <T> void swap (T[] array, int i, int j){` Unlike generic classes, the type being used for certain type parameters does not need to be stated at all, and can be inferred.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a `Date` array is declared and then passed as an argument to this `swap` method, the compiler can infer that `Date` is being given for the type parameter `T`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When type parameters are employed in methods and classes, they can be utilized anywhere that a type declaration would be used, such as field instantiation, method signatures, and parameter specification.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Type parameters in generics can also use bounds and wildcards.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To add a bound, simply include it in the angle brackets, such as `<T extends Person>` or `<T implements Collection>`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A type parameter can have unlimited interface bounds, but only one class bound, and it must come first in the list of bounds, like this: `<T extends Person & implements Collection>`\nWildcards are used to accept the passed in class and any of its subclasses or parent classes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A **lambda expression** is a block of code that can be stored, passed as a parameter, and executed later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The syntax is the following:\nEach lambda expression starts with a _parameter list_, which is comma-separated and placed inside of parenthesis.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Next, the arrow token, `->` is required, followed by either a single line expression to execute, or a code block placed inside `{}` braces.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If only a single parameter is used, parenthesis can be omitted.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Type annotations are not needed on lambda expressions, because they can be inferred by the JVM.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To create a lambda expression and pass it as a parameter or store it as a variable, it must be stored or passed as a data type that implements a **functional interface**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A functional interface is one that has **exactly** one abstract method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It can have any number of static or default methods, but there must be exactly one abstract method to be a functional interface, and for lambda expressions to be created with that type.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The way that lambda expression work behind the scenes, is that the JVM looks at the type assigned to the parameter or variable containing the lambda expression, and will make an in-memory instantiation of that class, and the code given in the block part of the lambda expression will be the implementation of the functional interfaces abstract method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The design principles that phase 3 focuses on are **SRP**, **DRY/Avoid duplication**, and **Encapsulation/Information hiding**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One way to avoid duplication is to make a separate class for shared methods, and import and call to it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To encapsulate well, _keep class fields private_, and also name classes, methods, and variables in a way that highlights role, function, or behavior, not implementation.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The reasoning here is because if you decide to refactor and use a different data structure, you have to worry about renaming as well to keep things clear and readable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The main components of the server are: **Model classes**, **Data access object classes (DAO classes)**, **Service classes**, **HTTP handlers**, **Request/response classes**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, _ports_ are assigned to each network connected program on a device.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, using an IP address and a port, you can connect to a specific program on a device.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is a list of some of the parameters to use with `curl`:\n| Parameter | Description |\n|-----------|-------------|\n| `-X` | Specifies the request method to use (e.g., GET, POST, PUT, DELETE).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Place it in `server/resources`\n**Spark Java**:\nThis is an open-source framework for making Java web apps and APIs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It creates routes and handles HTTP requests, and uses Java Lambdas to do so.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Simply import Spark, and then it uses methods for the HTTP methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, to handle a GET request, use `Spark.get(<path>, <handler function>)`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Passing in the handler functions can be done in a few ways:\nMost related to JavaScript, and the standard is to use a lambda.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This uses syntax `className::methodName`\nA third major option is making a routing class and calling the method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When matching routes, they are matched in the order that they are defined.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Response: `body(...)` (sets response body), `status(code)` (sets the status code).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This _must be done before mapping/creating routes_ to correctly serve the files.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I need to study a bit more how the location and file path gets mapped.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done using `before(handler function)` or `after(handler function)`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Filters can also receive an optional parameter of a pattern to restrict where the filter applies.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Create a Maven project, add the dependency to the pom.xml file.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Create a Gradle project, add the dependency to your build.gradle file.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Pass Java request objects from handlers to Service classes, which should return Java response objects.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is best to create a separate class with fromJson and toJson methods instead of calling them from gson directly.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Instantiate each class one layer above, ie, instantiate all of the service classes in the Server as fields, and instantiate the DAOs in each service as fields, to avoid making a new object with every single request.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Areas of potential code duplication:\nHTTP Handler classes\nService classes\nRequest/Result classes\nDAO classes\n5.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Use the `java.util.UUID` package, and the `.randomUUID()` method to make authTokens.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Get test app to work **first**\nThe autograder for code quality represents the minimum bar.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "They cover some of the biggest sources of bugs in programming:\n**Strong Cohesion**: The behavior of each method should be very related and not overextended.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If the method returns a value, naming the method after the return value is also acceptable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Methods should be able to have their behavior well-described in the name, but avoid too much abbreviating (make the names long enough).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I ran into this in phase 0 and 1, making submethods and calling them inside different nesting levels is much better.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Declare and initialize as close to where data is used as is reasonable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One of the keys is to **pick a style, and stick to it consistently**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "First follow your organization's style, and if there isn't one, then follow the conventional style of the language.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Put **methods** into \"paragraphs\", separated by 1 or more blank lines.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In **expressions**, place spaces _around_ operands, operators, and parenthesis.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Put separate **conditions** on new lines (even better is to put complex conditionals, or even just parts of them, into submethods).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Only declare one variable per line, don't do multiple assignment.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There are some cases where short variable names are okay, such as loop iterators, temporary variables, or naturally short names (x, y, z for coordinates).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Variables and methods are generally in lower CamelCase, and Class names in Upper CamelCase.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "And constants are generally all caps, with underscores for spaces.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Avoid characters that are hard to distinguish, like 1 and l. Avoid using \"Dr. Seuss\" naming.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When you have to: remove non-leading vowels, or just use the first few letters of a word.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Unit tests should be **fast**, **cohesive**, **independent**, and **unique**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Phase 4 when I write Database unit tests, I'll have a couple other things to make sure I'm aware of.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'll need to put the database driver JAR file on the class path (I don't know what this means yet).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'll need to start each test with a pristine database, so that the **independence** characteristic can uphold.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can be done by re-creating tables before each test, or having set-up methods \"rollback\" the effects of previous tests.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Another good guideline is to have 100% branch coverage on non-IDE generated code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Relational DBs are managed using Database Management Systems (DBMS).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "DBMS can have a couple of different models: Embedded or Client/Server.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The **Embedded model** means that the database and corresponding files are stored locally, and programs will interact with DBs via local file access.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In a **Client/Server model**, the program will make a network request to a DB server, which then accesses the local files of the DB.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Interactive involves an end user utilizing a management console to directly query a DB.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Programmatic involves a program using a DB API and DB driver to access a DB.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A **primary key** is an attribute in a table that is used to uniquely represent each row.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A **foreign key** is an attribute in a different table, T1, that stores the values of the primary keys of another table, T2.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example: the `Book` table has attributes for `Category` and `Genre`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The values in each of these constitute the primary keys in the `Category` and `Genre` tables.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A primary key whose significance only exists in the context of the DB is called an **artificial primary key**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Conversely, a primary key that holds significance in the world outside of the DB context is called a **natural key**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When a table does not have any one attribute that adequately acts as a primary key, but 2 or more attributes, that when observed together can uniquely identify each row, create a **composite primary key** or **compound primary key**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Each SSN assigned to exactly 1 person, each person has 1 SSN.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In these relationships, store a foreign key of the other in each table.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `Person` table will have a `ssn` attribute, and the `SSN` table will have a `person` attribute\nOne-to-Many Relationships\nExamples: Categories.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Each category has exactly one parent, but each category may have many child categories.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Each state has many counties, but each county belongs to exactly one state.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "How to model: Rather than having an attribute for the \"many\" in the one table, to save space, just have a foreign key for the \"one\" in the table for the many.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `State` table _won't_ have a `counties` attribute, but each row(object) in the `Counties` table will have a `state` or `state_id` attribute.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Many-to-Many Relationships\nExamples: Books and Club Members.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Each book may be read/owned by many club members, and each club member may own/have read many books.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "How to model: Have a **join table** (also called an _intersecting entity_) that contains 2 attributes, one that represents the primary key of each table in the relationship.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Make a `Books_Read` table, which has a `member` attribute, and a `book` attribute.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In an ERD, many is represented with a \"crow's foot\" and one is respresented with a straight line.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Optionality in ERDs is shown with a circle next to the crows foot or line.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Vertical Partitioning: Each class, abstract or concrete, is mapped to a table, with a foreign key referencing its parent.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The command for creating tables is straightforward: `CREATE TABLE <table name> (fields)`\nDeleting a table is done using the `DROP` command, which has virtually identical syntax: `drop table <table name>`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "You can also add conditional clauses like `if exists`\nWhen creating tables, you must specify the different columns of the table.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When specifying the column you must include the name and data type, but can also include other useful modifiers like `not null`, which requires a value to be not null, or `auto_increment` which will automatically track and increment that value each time a row is added to the table.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There are also modifiers to specify primary and foreign keys.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To specify a column as the table's primary key, just use the keywords `primary key`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The syntax for specifying a foreign key is the following: `foreign key(<col name>) references <table>(<field of table>)`\n**Foreign key constraints**\nIf foreign keys are not handled correctly, some problems can occur.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, in the book club example, we have a table `members`, a table `books`, and a join table `books_read`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Imagine `memberID` is made as a foreign key in `books_read`, and is the primary key in `members`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If a member is deleted from `members` then there will be a number of rows in `books_read` that have a foreign key that relates to a row in `members` that no longer exists.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Another issue can occur if the foreign key is updated in its primary key location, so `memberID` is updated in `members` to be something different, like `member_id`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some configurations for foregin keys exist to help mitigate these bad effects.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A foreign key specification can include `on update` and `on delete` clauses, followed by a number of modifiers like `restrict` (blocks the operation from happening), `cascade`(will propogate any changes to a primary key to foreign keys that reference it), `set null`, `set default`, and `no action`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The default behavior for a foreign key is `on update cascade on delete restrict`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is common in scripts that set up databases, because SQL will throw an error if programmed to create a table that already exists, or drop a table that does not exist.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `*` wildcard character can be used to select all of the columns from the queried table.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "AND can be used in WHERE clauses to avoid Cartesian products and ensure join\nInner join is also useful, syntax is `INNER JOIN table ON cond`\ntransactions\nsometimes you need multiple statements to pass together or fail together\ndefault is each statement in sql is its own transaction\nuse BEGIN TRANSACTION to start then COMMIT or ROLLBACK TRANSACTION\nJDBC stands for Java Database Connectivity.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is the \"order of operations\" for Database Access from Java:\n1.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Close the database connection\nTo load a DB driver, there is a legacy method that involves `Class.forName(<fully qualified class name>)`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The class `DriverManager` and its method `.getConnection()` is passed a connection string, and both loads a db driver and opens a db connection.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Make a plain string of the SQL query, then make it a Statement using the `connection.preparedStatement(<string>)` or `connection.plainStatement(<string>)` methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I will almost always want to use a prepared statement, because they project against SQL injection attacks.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, on the Statement object, use the `.executeQuery()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The javaDoc for `ResultSet`s is pretty helpful, but essentially it is a set that has a \"cursor\" pointing to a specific row, from which methods can be called to access the data.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When updating, you can create the PreparedStatement and use `?` for all of the values to assign, acting a placeholders.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, statment objects have a `.set()` method for each data type, that takes in the column index of that value, and the value to set it to.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So for an int in the 1st column, you'd use `stmt.setInt(1, 34);`\nThen, the `stmt.executeUpdate()` method executes the update and returns either a 1 or a 0.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Sanitizing DB inputs and preventing SQL injection attacks is one security measure basic enough that I will be expected to always protect against it, and not doing so will get me fired from future jobs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Connection objections have methods, `.commit()` and `.rollback` that perform the corresponding DB actions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In practice, never hard code credentials into connection strings.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Another method is to sign in with admin permissions first, then create a user that has permissions to access the database.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `DriverManager.getConnection()` method can also take a username and password String parameter in addition to the connection string parameter, which is another method to avoid hard coding credentials.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Dr. Wilkerson found enough common code between his 3 SQL DAO classes that he found it practical to make a Parent SQL DAO class, so keep that in mind.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Loading the DB does not create tables, so Dr. Wilkerson recommends making a `createTables()` method, and call it in the createDatabase method that is provided.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'll need to download the community server, and I can install a client shell to administer the DB via the command line.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is a table of the essential client shell commands\n| Command                   | Description              | Example                       |\n|---------------------------|--------------------------|-------------------------------|\n| mysql -u `<username>` -p  | Login to the shell       | `mysql -u root -p`            |\n| help or ?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is also a `Bcrypt.gensalt()` method to generate a salt string for you.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, to check passwords, use the `Bcrypt.checkpw(<password to check>, <stored hash>)` method, passing the password string to check, and the stored hash as arguments.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A lot of these tips are things that I already covered in CS 202, but that I can use a good review of and implement more often.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I am going to make a goal of **effectively using at least 1 conditional breakpoint, and one watch in the remaining Phases of the class**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A second goal: **commit to memory how to access breakpoint settings in IntelliJ**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Right click on a breakpoint and click 'more', or access through \"Run > View Breakpoints\"\nDr. Wilkerson's spiritual/life thought: When you feel yourself avoiding a certain task or project because of its difficulty and/or magnitude, as soon as you recognize that avoidance is when to start working on it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The things that I need to do for Phase 5 are namely:\nDraw menus and handle input\nDraw ChessBoard\nInvoke Server API Endpoints (Just like in 260, send a HTTP request to the url)\nWrite tests\nA few tidbits that can be helpful:\nUse `System.exit()` to quit the program.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When listing the games on the Client UI, don't just show the gameIDs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Since those are artificial primary keys, they shouldn't be shown to the user.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Have the numbering of games on the UI be independent of the gameIDs, and start at 1.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Dr. Wilkerson's recommendation for structure: Make a `ui` package, and make a `Client` class, which is responsible for drawing menus, and a separate class, `ChessBoard` for example, responsible for drawing the chess board.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Also make the the `Client` class depend on the `ServerFacade` and a `Client Communicator` type of class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Bascially, DON'T mix menu drawing-logic and board-drawing logic.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Create in Phase 5 the logic to look at each square and determine to draw a piece or not.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is more than what is required for Phase 5, but will help with Phase 6.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Similar to the handlers being the only objects on the backend that deal with HTTP and JSON, this will be the only class on the frontend that deals with HTTP and JSON.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is accomplished primarily by using ANSI Escape Codes to set the text and background colors to certain colors.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Many terminals can also display Unicode characters, which has Chess piece characters which can look a bit _fancier_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, the chess piece characters might be wider than other charactes, causing them to misalign.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To fix this, change a few settings in IntelliJ, described in the slides.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "ServerFacade - This will have the 7 methods for the corresponding endpoints\n4.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "ClientCommunicator - Dr. Wilkerson recommends using this class to store the code for Client GET and POST methods, to maintain SRP.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then `ServerFacade` will simply call the GET and POST methods from this class when it needs them in those 7 endpoints.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The Java class we'll be taught in this course for making HTTP client requests is `HttpURLConnection`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A different class that will be taught in the fall is `HttpClient`, which can be a bit easier, if I want to learn it later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "We are learning `HttpURLConnection` because, historically, it has been the standard.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "An `HttpURLConnection` object is instantiated by casting a `URL` object with a connection.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A `URL` object is created by passing a String into the URL constructor.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, that `URL` object has a method `openConnection()` that opens a connection to that URL.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Below is an example:\nThe javadoc on `HttpURLConnection` describes all of the methods and fields, but here are a few fundamental ones:\n`.setReadTimeout(int milliseconds)`: sets the timeout limit, parameter is in milliseconds\n`.setRequestMethod(String method)`: sets the HTTP method that the request will be using\n`connection.connect()`: Connects to the URL that the connection was constructed with.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The slides have a helpful set of \"steps\" to both an HTTP GET and POST interaction between client and server, consult that when needed\nRather than alternating between putting in and taking out lots of `println()` statements, logging is a better way to work with and handle errors.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Logs provide needed info to devs, sys admins, and customer support reps, while not intimidating the user with that info.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Logging is a universal programming idea, but implementation varies in each language.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Loggers have certain levels that they are set at, and only errors that are the specified level or _higher_ (i.e.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For example, `ConsoleHandler` will send log messages to the console, and `FileHandler` will send messages to a designated file.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Further, each handler has a \"formatter\" which defines the format used to encode log messages.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Configuring a logger is done 2 ways: **Programmatic Configuration** and **File Configuration**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The standard practice is file configuration, but programmatic configuration is the way to learn about configuring at first.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Log config files use what is referred to as \"properties notation\" to define the configuration.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Config settings include useful settings like how much data to write before **rotating** files, how many files to have in the rotation, and the logging format.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here are variables that can be used in the logging format configuration:\n%1$ The date/time the message was created\n%2$ The method that called the log method  \n%3$ The name of the logger\n%4$ The level the message was logged at\n%5$ The message\n%6$ The throwable\nThere are a variety of logging methods that add certain things to the log, and are extremely useful, such as logging method entry/exit, logging the throwing and catching of an exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because Sun took a long time to build logging into Java, an external library was made called `Log4J`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It became so popular that when Sun finally added logging, they essentially copied Log4J, but people liked it so much that they didn't switch, and Log4J is still more widely used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Defensive Programming is a style of coding that leads to more reliable code with less bugs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It hinges on 2 practices: **Making assertions** and **Parameter checking**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As I code, I frequently make asssumptions about the program state.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The way that I program things will often contain implicit assumptions, such as, this parameter will not be null, this data will be sorted, this string will have this many words, etc.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When these assumptions are incorrect, however, that leads to bugs in the code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "And when these assumptions are only implicitly contained in the program, they are extremely difficult to identify as the source of the problem.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can be resolved by making these assumptions explicit in the code, rather than implicit.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These `assert` statements are built in to Java, and function slightly different.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "You simply make an assertion about some value, and if the statement is true, the code will continue, and if false, and `AssertionException` is thrown and the program crashes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Example: `assert listToSearch != null;` or `assert isSorted(listToSearch);`\nSometimes, an assertion may call a method that takes a fair bit of time and resources to compute, such as determining if passed data is sorted or not.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Running these assertions constantly is inefficient, so by default, assertions are disabled when Java code is compiled and run.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Thus, assertions are mainly used for observation in development settings.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To enable them in these settings, use the flag `-enableassertions` or `-ea` when compiling from the command line.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When running in IntelliJ, edit the Run Configuration and edit/add \"VM Options\" and add one of these flags to enable assertions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When assertions fail and AssertionExceptions are thrown, do two things: **1**, examing your assumption represented in the assertion statement, and ensure that it is correct for that point of the program.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Parameter checking involves ensurine that parameters are in the correct state when passed into a method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This catches errors closer to their cause and leads to easier debugging.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Parameter checking is one of the ways that assertions are used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It can also be done with if-else blocks and throwing exceptions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Which method of parameter checking can be determined by whether or not the programmer has control over the calling code, or the code that calls the method and provides the parameters.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If the programmer does have control of that code, assertions should be used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If not, throwing exceptions inside of if statements should be used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "HTTP does have some workarounds for p2p, like _short polling_ (pinging the server repeatedly over and over), and _long polling_ (pinging the server less often over longer intervals of time).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, these workarounds are pretty inefficient, and have lots of HTTP overhead, among other shortcomings.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Once ws is established, the client _or_ server can initiate communications.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Is an upgrade of HTTP (its built on top of it)\nPing/Pong for detecting dropped conns.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Methods with the `@OnWebSocketMessage` annotation _must_ be inside of a class with the `@Websocket` annotation.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The library that we're using for WS Client side will make the initial HTTP request to upgrade for us.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "All I need to to is use a URI with the `ws` protocol specified.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Before connecting and getting a Session, I must get a WebSocketContainer, and use the container's `.connectToServer()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Using `.Part` will break the String into arbitrary chunks, rather than keeping it as one string.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "What Dr. Wilkerson did for Phase 6 was rename his `ClientCommunicator` class to `HttpCommunicator` and then created a `WebsocketCommunicator` class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A main question of this phase is: how to get the WS message with the updated board from `WebsocketCommunicator` to the `ChessClient` class?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In Dr. Wilkerson's method, he uses an interface called `ServerMessageObserver`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then, the `WebsocketCommunicator` takes in a `ServerMessageObserver` parameter in the constructor, and then will only have access to the `notify()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `ChessClient` will still be passed to the `WebsocketCommunicator`, but as an interface, avoiding a _bad dependency._ **Keep this technique in mind, it can be handy for avoiding bad dependencies.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "First, deserialize to a parent Message type that has \"type\" attribute, which will then allow you to determine the corresponding sub type.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, this method can be computationally expensive in larger systems.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A better way to handler this for all system sizes is to **use a Gson type adapter**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This will essentially signifiy to Gson that when it encounters a certain type, it should use a certain adapter to deserialize it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Among the 3 types of type adapters that Dr. Wilkerson mentiones, the one he recommends for this use case is the Deserializer type adapter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "RuntimeTypeAdapter and StandardTypeAdapter are faster, but more complex.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Bad actors try to compromise systems in many ways, such as gaining unauthorized access to data (in rest or in motion), gaining unauthorized access to computers, or disable a system so it can't be used (DDoS).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Security is an entire discipline, so this lecture will only focus on some essential topics.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Verifying actions)\n**Foundational Concepts:**\nSecure communication with HTTPS\nSecure storage of passwords (hashing)\nSecure data storage\nThese have a few essential characteristics:\n**One-way**: The input cannot be derived from the digest.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A small change in input should produce a large change in the output.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, they have both been cracked and should not be used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Git uses SHA-1 for generating commit IDs, but it is not a security risk because the commit IDs are not used for authentication or integrity checking.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "SHA-3 is a newer family of algorithms that is not as widely used yet.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "That is the kind of mistake that can and should get you fired.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some problems with storing password hashes:\nIf two users have the same password, they will have the same hash.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a problem because if one of those hashes is compromised, the other user is also compromised.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Common passwords can be determined using a rainbow table attack.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is where a bad actor hashes some of the most common passwords, puts them in a table, and then compares the hashes of the passwords in the table to the hashes of the passwords in the database.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If they match, they know that the password is one of those common passwords.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This means that even if two users have the same password, they will have different hashes because the salt is different.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This also means that rainbow tables are not effective, because the salt is random and not known to the attacker.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Password hashing algorithms are designed to be slow and computationally expensive.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The longer it takes to hash a password, the longer it will take to brute-force it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is also why many authentication platforms will \"throttle\" the number of login attempts.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This means that if a user tries to log in too many times in a short period of time, the system will lock them out for a certain amount of time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Current recommended password hashing algorithms include: _Argon2_, _bcrypt_, and _scrypt_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because of salting, hackers have moved from determining the password from the hash to trying to get the plaintext password from the user.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done through **1** phishing and other deceptive methods, and **2** keystroke loggers, which are programs that run in the background and record the keystrokes of the user.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is a problem because it is very difficult to detect, and can be used to steal passwords, credit card numbers, and other sensitive information.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is similar to hashing, but differs in some important ways.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Encrypted data is eventually meant to be read and used, so it needs to be decryptable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Modern encryption algorithms are divided into two main categories:\n**symmetric key** (\"secret key\") algorithms and **asymmetric key** (\"public key\") algorithms.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, larger keys also mean slower encryption and decryption.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Symmetric key algorithms use the same key for both encryption and decryption.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This means that the sender and receiver must both have the same key, and it must be kept secret.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Examples include AES (Advanced Encryption Standard) and, historically, DES (Data Encryption Standard).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "AES includes 128, 192, or 256 bit keys, and a 128-bit \"initialization vector\".",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Other algorithms include Blowfish, and Twofish, which support 32-448 bit keys, or 128, 192, and 256 bit keys, respectively.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Asymmetric key algorithms use two different keys: a public key and a private key, that have a special mathematical relationship.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One key is used for encryption, and other key must be used for decryption.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This means that the sender can encrypt the data with their private key, and only the receiver can decrypt it with the sender's public key.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Examples include RSA (Rivest-Shamir-Adleman) and ECC (Elliptic Curve Cryptography).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is much slower than symmetric key encryption, and can only encrypt data less than the key size.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One of the most common uses of public key encryption is to encrypt and a symmetric key, which is then used to encrypt more data in a faster way.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This has made public key encryption **one of the most important inventions in the history of computing.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A TLS (Transport Layer Security) handshake, the process of establishing a secure connection, involves a client and server exchanging random numbers and public keys, and ensuring they can decrypt each other's messages.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Along with the public key, clients and servers send \"certificates\", to verify their identity.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Certificates are granted by authorized third-parties, such as Let's Encrypt, DigiCert, and others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When you need a certificate, you generate a public/private key pair, keep secure your private key, and then send identifying info and your public key to a Certificate Authority.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This interaction is called a Certificate Signing Request (CSR).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Software devs will also at times create \"self-signed\" certs to use for testing and dev environments.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "SSL (Secure Sockets Layer)\nHow do CAs, or others that need to, create a digital signature that is unique and not easily forged?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The sender creates a **hash** of the original data, and **encrypts** it with their private key.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The sender sends the original data and the digital signature to the receiver.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The receiver decrypts the digital signature with the sender's public key, and creates a hash of the original data.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The receiver compares the two hashes(the hash of the original data, and the decrypted digital signature, which is an encrypted hash of the original data).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If they match, the data is authentic and has not been tampered with.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If they do not match, the data has been tampered with or the sender is not who they say they are.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Digital signatures are used by all CAs to verify their identity.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Bitcoin and other cryptocurrencies use digital signatures to verify transactions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Digital signatures are also used in many other applications, such as email and software distribution.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Spiritual thought: Dr. Wilkerson got much more out of Isaiah by reading it more, not less.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It is an \"execution context\" that allows the CPU to work on a program, track the exact point of execution that it reaches, than move to another thread and then come back to that thread later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done by splitting the program into multiple threads, and allowing the CPU to switch between them as needed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can help program efficiency, and it can also cause problems too.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java has a `Thread` class that is used to create and manage threads.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `Thread` class has a number of methods that can be used to control the thread, such as `start()`, `join()`, and `interrupt()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is the most basic form of execution, and is the easiest to understand.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The CPU will switch between threads as needed, but they are not running at the same time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This type of computing is done with a computer with a single CPU core, or a single CPU.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is what is done on machines with multiple CPU cores, or multiple CPUs.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Thread synchronization is the process of coordinating the execution of multiple threads to ensure that they do not interfere with each other.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can be done in Java by using the `.join()` method from the `Thread` class, (or by using the `synchronized` keyword ~ CP).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Thread synchronization bugs are some of the **nastiest bugs that developers run into**\nSome processes need to use multiple threads fairly frequently, such as web APIs and other types of web programming.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Rather than generating the overhead and cost of creating lots of threads, the practice of _thread pools_ involves initializing a number of threads before they are needed, and then storing them, using them as needed, and then reusing them later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If you need a new thread, look for a free one in the thread pool, and if there are no available threads, add the task to a \"task queue\".",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then when a thread is free, check the task queue and assign any waiting tasks to the free thread.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Java can utilize thread pools with the `ExecutorService` class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This class has a number of methods that can be used to create and manage thread pools, such as `newFixedThreadPool(num)` creates a pool of `num` threads that can't increase or decrease, `newCachedThreadPool()`, and `newScheduledThreadPool()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "You can **1**, implement the `Runnable` interface, or **2**, implement the `Callable` interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The main difference between these two is that `Callable` can return a value, while `Runnable` cannot.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Which to use will mainly depend on if you need a return value or not.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "These are bugs that are dependent on the relative timing of the threads (the results of the \"race\" between threads).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This makes the execution, and thus the appearance of a bug, non-deterministic and potentially extremely difficult to analyze and debug.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because the uniqueness of these bugs, they have their own category, hence the distinct name.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "One way to write thread-safe code in a database context is to use multi-query transactions, rather than committing after each query.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A critical section of code is a section that only one thread should be allowed to run at a time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Generally, race conditions appear because a critical section is not properly protected.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can be done by in Java adding the `synchronized` keyword in the method declaration, which will ensure that only one thread can run that section of code at a time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Synchronized code can cause **deadlocks** at times, which is when threads are waiting on each other and cannot proceed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This is done by using the `synchronized` keyword on an object, which will lock that object and prevent other threads from accessing it until the lock is released.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This can be done by using the `wait()` and `notify()` methods, which will allow threads to wait for a certain condition to be met before proceeding.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Getting and setting requiring multiple operations is what creates critical sections (if that code is running/runnable from multiple threads).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "With Atomic variables, since accessing and setting is done in one operation, there is no need for critical sections.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Atomic variables are created using the classes in the `java.util.concurrent.atomic` package, such as `AtomicInteger`, `AtomicReference`, and others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "View the Javadoc for more details on the classes and their useful methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Although I don't explicitly use Thread objects in my code, the Spark library, and the Websocket library on the Client-side both use threads, which means that there _is_ potential race conditions.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Command line builds are a way to automate this process, using tools like Maven and Gradel in Java, and others in other languages, like npm for Javascript.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Command line builds are generally preferred to manual builds.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Things like GitHub actions are a form of continuous integration, where changes are built and tested on a git commit.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Something like pre-commit, which we used in 236, is similar.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is also continuous deployment, which is taking continuous integration a step further, and automatically deploying the code to production after it is built and tested.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As I worked on this phase, I realized I had to pause fairly frequently and think about how to design the classes and methods.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I've had to do that in past classes, but not as much and not as early.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think this is a good part of this class being a stepping stone for me.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The methods used are a bit different than other languages, but still fairly intuitive.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is also the `.clear()` method and the `.size()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For iterating through a `HashMap`, use `.keyset()` to access the keys, and `values()` to access the values.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I talked to the TA Michael for a little bit, asking him about my challenge with the HashMap's equals method in comparing 2 `ChessBoard` objects.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I learned a few things:\nA map would work fine for the ChessBoard, but it doesn't work great with the library that we use later in the project to serialize and store the ChessBoard objects in a database.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This reminded me that when designing data structures, I need to keep a wider perspective, and remember all of the ways they will be utilized, as that can affect which design choice will be best.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Python is one of the only languages where that is a built-in data structure, so just keep that in mind.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The `equals` method of a HashMap works by executing the `equals` method of all of the keys and values in the map.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, if the keys and/or values have `equals` methods that need to be overridden to be more accurate, failing to do so can cause the `equals` method of the map to return inaccurate results.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Storing the pieces of a ChessBoard in a 2D array may work better, so I'm making a branch and trying that.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Array syntax is a bit different than I'm used to, coming off of Python and Javascript.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Remember the syntax is `type[] name = {value, value}` or `type[] name = new type[size]` to initialize as empty.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To make it multidimensional, just add another set of brackets, like `type[][] name = new type[size][size]`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Right now I am trying to figure out how to make a 2D ArrayList to store all of the valid moves, and keep the loop fairly abstract, to avoid repeating code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Michael's advice to find the furthest possible square in each direction eventually led me in the right direction.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I tried to do recursion like he told me at first, but then figured out how to do it with iteration more effectively.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I found the Single Responsibility principle to hold true in this case, as making 4 different methods for each of the directions that a piece could move, rather than one with far greater complexity, was much easier, even with the shared code between the 4.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Later on I will investigate if there is an effective way to do this, or maybe ask Dr. Wilkerson.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I should consider: _How could I have used records in my implementation of Phase 0?_\nSomething that helped with abstraction was learning this technique: When the body of a loop is the same and the only thing that differs is direction of iteration in 2 different uses, abstract the loop body into a method, and pass in the iterator variable as a parameter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then just have the loop body be calling that abstracted method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I ran the code quality check as well, just out of curiousity, and got 70%, which I'm very satisfied with, since we haven't lectured on that yet, and I'm not graded on it for this phase.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The details said I did well with _Naming_, _Code Decompisition_, and _Package Structure_, but need to improve on _Code readability_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some of the conditional statements that I used are pretty unpleasant to the eye.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I want to start this new practice that I just thought of, which is documenting/journalling a short retrospective of my experience with the project.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think I'll outline the biggest obstacle(s) and how I overcame them, and also what helped me out during the project.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because I've never done projects like this, with this much free rein, I felt a bit lost at first.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Eventually **the readings and Dr. Wilkerson's commenets in lecture about design suggestions helped me out**, but I struggled to think of some ideas on my own.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In retrospect, using a 2D matrix for a chess board seems obvious, but I should give myself some slack, since this is my first significant experience with software construction.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think that this was because of this: I am at the point where some of the lower-level tasks I can handle just fine, but the higher level things like design choices, such as for storing the board data, or traversing the board for movement rules, I am just beginning with.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The aforementioned resources proved helpful because they targetted these things: design suggestions and tips.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The **Javadoc from Oracle** also proved pretty helpful and comprehensive.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Something else that helped was \"lurking\", per se, in **the Slack channel**, and reading up on threads from TAs and fellow students who had similar ideas, thoughts, and questions as me.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As I was wrangling with copy constructors and such for copying the `ChessBoard` for checking game status, I discovered the `System.arraycopy()` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It takes 5 parameters: `src`: the source array, `srcPos`: the starting position in the src array, `dest`: the destination array, `destPost`: the starting position in the destination array, and `length`: the number of array elements to be copied.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Okay, one bug that I found was that my method for looping through the board and checking the opposite team's pieces to see if the king was in their possible moves (indicating the opponent being in check), called `inCheckLoopBody` was that I was calling piece moves on the unmodified field `board` not the copy of the board with the move made.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Making this change worked, but now I'm getting concurrent modification exceptions in my for-each loop, because I'm trying to remove the invalid, check-inducing moves before the iterator working in the for-each loop is finished.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think this highlights the upside of TDD, and exposes a lack of its implmentation on my part for this phase.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Going forward, **I can work in a more explicit TDD manner**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This helped me make realizations that made the design/implementation stages easier.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think that this highlights the good effects and, really, the **necessity of studying and understanding well the product's behavior**.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If I get a 50 on the first submit, I have 1 week to adjust, resubmit, and get up to 100.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I need to read and understand the phase 3 spec to do phase 2 effectively.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here is my personal TA feedback:\nauthToken is passed to Logout, ListGames, CreateGame, and JoinGame but never used.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It may seem redundant, but I need to make clear that each of those needs to verify authentication to be performed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "On clearData, because UserData, GameData, and AuthData are going to be on 3 separate SQL tables, it is accurate, and better practice, to have 3 separate clear methods, and call each of those, rather than one method that tries to clear all three.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "My understanding now is that it only exists on Classes, and is a sort of static field that can be referenced.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To store/access a Class itself (I _**think**_), use the `Class<classname>` syntax.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So `Class<T> genericClass` is a sort of static object of that class that can be passed around.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As I wrote my service test for the `clear` endpoint, I found it hard to instantiate the `ClearService` in a state that could be tested in isolation, rather than instantiating the full, end-to-end process.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I wonder if I might need a `testUtilities` class like the passoff tests for the past phases.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Maybe what Dr. Wilkerson mentioned about static utility classes could help.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I just need to implement 2 more, then run passoff testing and debug accordingly.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I also want to see if I can implement inner classes for the Request and Response classes, to apply some of what I'm learning.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Pushing myself to meet the quality code standards led me to trying something new, creating the `handleResponse` method in my Server class, which used lambda expressions as one of the parameters, which required making an interface to assign as the type for those lambdas.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It was a good stretch that helped me try and learn new things.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "James the TA helped me to get the history of all of the commits from my old chess repo with some handy git commmands.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I'm going to begin by identifying relationships and characteristics of my database, and what my tables should be.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Games, containing GameData JSON strings, and Auth, containing AuthData JSON Strings.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I am having an issue inmplementing SQL while maintaining modularity and minimizing dependecies in my code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "My issue stems from the fact that my DAO interface and service classes don't do a lot of exception handling, that is done mostly in the ServiceHandler lambda in the Server class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I need to try and find a way to appropriately handle the exceptions in each DAO, while maintaining code cohesion and leaving things \"hidden\" to use Dr. Wilkerson's terms.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Here are questions to consider:\nWhat methods do I know of to handle exceptions that avoid me editing any code further up the object model?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Are those methods helpful or harmful in the broader scope of my application?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Is not editing code further up the object model a sure possibility, or does it appear to be maybe a light necessity, with how I constructed the object model?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Is there a way to simply slightly adjust the error handling I already have to account for these `SQLException`s and `DataAccessException`s?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "My temporary fix for this issue was to make DataAccessException inherit from RuntimeException instead of exception, because that is what all of the other exceptions do that I handle.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "My current status is that I have enabled the server to create the DB and tables on startup if they don't already exist, and I have one method in the SQLUserDAO passing its positive test.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I just need to keep developing the other methods, driven by the tests.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The big obstacles I found was formatting the SQL commands correctly, there were some details that slipped my mind.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "That may have been due to my watching the SQL videos while on the treadmill.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Some obstacles included forgetting to include columns after SELECT, forgetting closing parenthesis in long table creation commands, and some others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I also got tripped up thinking the Result set was observing a _column_ at a time, but remembered that the cursor points to a _**row**_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "It humbled me a bit and remineded me that these projects are not things that I can whip up in 3 or 4 days, but that need to be worked on for an hour or so each day for a week or two.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think the experience that I got with SQL was good, especially the practice of accessing the DB programmatically.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Most of the bugs that I ran into were due to small syntax errors in my SQL commands, where I got most of the syntax right, but missed a few things.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Or others were due to foreign key constraints and the way I chose to construct my tables.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think that these obstacles are the type that are simply overcome by time and experience, as the details of syntax get mastered with time, and a sense of how to best design my DB schema will also come over time.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This allowed me to have quick access to highly specific and relevant information about things in my exact context.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Something else that helps **particularly when it appeared that all of my DB code was correct, but the program was not behaving as expected** was _to drop the tables and recreate them_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This acts as a refresh for the DB, and I learned that any changes I made to the DB being created/set up, were not immediately reflected in the program's behavior, unless I do an ALTER TABLE command.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A good way to think about and understand phase 5, specifically the menus, is as 3 different REPLs that the user will move between.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is a depth to the REPLs as well, as they can only exit the program after exiting the first REPL.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If they exit the third REPL, it moves them to the second, and exiting the second they move back to the first.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In the Client communicator, make the arguments for the 2 methods correspond to the endpoints that will use them, and pass unused params as null.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I ran into a decent snag on the negative tests for ServerFacade.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The errorStream for most of the error HTTP requests is going to be null, so just input something else as the error message.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Right now, I am trying to figure out my starting point after copying the starter code.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I am going to review the spec to see what to do with the User game commands and server messages.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "To accomodate for square highlighting, I had to add a parameter to the `ui.Chessboard`'s `draw()` method to take in a string of the square for which to highlight moves.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Then I made a method in `ui.Chessboard` to decode that string into a \"tuple\" of indexes for the 2D array of squares.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I also had to change the `board` parameter to have a `ChessBoard` type, rather than `ChessPiece[][]`, in order to accomodate calling `.pieceMoves()` in the `ui.Chessboard` class, since that method takes in a `ChessBoard` type, and I didn't want to bother changing that and all it's dependencies.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Current progress as of 4.1: I have the highlighting down for when the board needs to be from the white player/observer's perspective, but there is a bug with highlighting from the black player's perspective.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The board will load from the black player's perspective as expected, but then when I run the highlight command, the pieces get flipped.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The ranks (numbers) are flipped, but the files (letters) are not.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I think the bug may lie in the GameData that I am passing to the game menu.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Upon creating a game, and then joining it, the game gets updated, but nothing gets returned.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Thus, the gameData that I am passing to the `GameMenu` is the original gameData, not the updated one with the userName updated.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, when I am trying to go from the Black player's perspective, the method to check the usernames always returns false.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because I haven't fixed the bug preventing players from leaving and rejoining a game, I can't get back into a game, but I am feeling that if I could, I would be able to see the black player's highlighting work correctly.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I've found another bug, where when I observe 1 game, make a highlight, and then leave, and observe another game, the highlighting from the first game is still there.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The fix that I found for the first bug was that, the gamesList that I was searching in the JoinHandler was what needed to be updated after the `serverFacade.joinGame()` call.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This resolved the issue of joining a game, and the gameData not having the player's usernames.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For the second bug, the cause was rooted in my use of static variables.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because the variables for the piece to highlight and the arrayList of its legal moves were all static, whenever they were changed, that change persisted because it was performed to the class itself.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This caused me to reflect on if making the `ui.Chessboard` class static was the best move in this context.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "On the one hand, the need to clear out certain variables each time, and make use of several parameters indicates the need for instance-specific data, making the class be non-static seem logical.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "On the other hand, with the sheer amount of Chessboards that may be drawn during a given match of chess, it would be very memory inefficient to create a new Chessboard instance every single time it is drawn.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If I wanted to take some time later to optimize, finding a way to store and reuse instance of Chessboards would be a good middle ground that would allow the benefits of both routes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, I've had to wrangle with type adapters to correctly serialize `ServerMessage`s and `UserGameCommand`s, and I've learned a couple of important things, one about Gson type adapters and one about Websocket with jetty and javax:\n1.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "There is a subtle bug that can cause a Gson type adapter to recurse infinitely and cause a stack overflow.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In my case, I was dealing with _deserializing `UserGameCommand` JSON strings on the server side_.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Since `MAKE_MOVE` is the only commmand type that is unique in its parameters, I simply had the other three command types deserialize to a `UserGameCommand` object with the command type set to the correct type.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "However, the deserializer inner class that I was writing, like most deserializer type adapters, implements the `JsonDeserializer<T>` interface.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Because I had implemented this interface for the `UserGameCommand` class, then calling `context.deserialize(jsonElement, UserGameCommand.class)` would cause the type adapter to call itself.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "So, even though the other three game command types didn't have any unique fields, because the `commandType` field needs to be different, and this Gson subtlety, I had to create a `UserGameCommand` subclass for each of the other three.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "For whatever, reason, _on the client side_, when adding the `WebsocketCommunicator`'s message handler, following the IntelliJ suggestion to change the anonymous inner class to a lambda caused the message handler to not be called.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I had to change it back to an anonymous inner class, and then it worked.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I don't know why this is the case, and I frankly didn't even know I was using an anonymous inner class.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "In the future, I want to examine this a bit closer and understand the inner class better.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I am finding that following PetShop's example is useful here, making some separate classes in a websocket passage to keep things cleaner.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "When I was working on the `LEAVE` websocket interaction, the thing that caught be was using an if-else if block for the null checks on white/black usernames.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "As far as I understand, because the values for the other usernames can sometimes be null, doing `game.blackUsername().equals(userName)` will throw a null pointer exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "If I want to write slightly more efficient code, I'll need to do `if (username.equals(game.blackUsername())` instead.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "A bug that got me for a good few minutes was making the Websocket endpoint URL one that was not what the spec for the test and Test website expected.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I was getting a `ConcurrentModificationException` on the `broadcast` method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "I thought it was because I was using a `TreeMap` instead of a `ConcurrentHashMap`, but it turned out it was because I was removing closed connections in my for-each loop.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "This was making the iterator that the for-each creates behind the scenes invalid, causing the exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Right now I can make moves just fine, but the notification is only being sent on the first move, not on all subseqent moves.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "The tests are also struggling to get a Chessmove from the client.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "text": "Desired features of the application:\nList of groceries is inputted, if certain brands a desired, those are listed as well\nStore is selected\nStore website is opened and crawled for the groceries\nPrices are compared with 3 options, and the cheapest is added to a dictionary with the grocery as the key and the price as the value\nAisle numbers of the groceries are added to the dictionary.",
        "header": null,
        "file": "grocery_doc.md",
        "last_seen": null
    },
    {
        "text": "Watch at least 10 minutes at a time, and then try an replicate what has been coded, or take notes on what you have observed.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This helps you acquire understanding rather than rotely copy down notes.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Remember that struggle is good, and I will get stuck at points in this course.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Use the tools that I know are in my toolbox to get a solution.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Don't skip any of the tutorials, but feel free to speed them up if needed.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Search StackOverflow\nAsk someone, using a 4 step approach\n    1.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Any computer that a user engages with is a \"client\" and the 24/7, big computers are \"servers\".",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "A request goes from a client to an ISP (internet service provide) and then to a DNS (domain name server).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Websites on browsers are just HTML, CSS, and Js files that are rendered locally using the browser.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I can edit the HTML, CSS, or Js for a website that I am viewing for my browser, and those changes are local, because the browser page I currently have open is essentially my local copy of the website files.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "From what I have picked up, `index.html` is the standard name given to the homepage of a website.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "And HTML element is the entirety of the object, from the opening tag to the closing, and all of the attributes and content in between.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Good practices: Don't have more than one `h1` element in an HTML doc.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Use [Lipsum](https://www.lipsum.com) to get placeholder text.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There is also funny spin offs, like [Broipsum](https://www.broipsum.com).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Some elements have tags that are self closing, or are \"void\".",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Two examples are the `<br/>`, break element, and the `<hr/>`, horizontal rule element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The break element creates a break in a paragraph, placing the following text on separate line.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "These should not be used to create separate paragraphs inside of one paragraph element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When new paragraphs are needed, to help screenreader functionality, use a new paragraph element every time.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The horizontal rule element creates a line horizontally to divide elements in the doc.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You can validly write void elements like this: `<br/>` or like this: `<br>`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "HTML 5 can recognize the void elements and doesn't have to read for the forward slash.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Writing the void elements with the forward slash is beneficial, however, for maintaining readability and comprehension of code.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The command `Emmet: Wrap with Abbrevation` in the VSC command pallet allows me to place the selected on the _inside_ of an HTML tag.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Anytime that you save in VS Code, it automatically re-indents the code to be the most useful.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Example: `<a href= \"mylink12345.com\"> This is a link </a>`\nThere are attributes that are specific to certain tags, but there are also global attributes, which are accessible by every HTML element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To look at them some more, go [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)\nQuotations are always used for the URL in the `href` attribute of `<a>` tags, to despecialize the text that is given.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When dealing with element attributes that have boolean values, simply including them sets them to true, such as with `reversed` for `<ol>` tags.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is only true for attributes where the default value is false.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You can make an image the source of a hyperlink, by simply placing the `img` element in between the tags of the anchor element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The href of the anchor element is used as normal to link to the desired place.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is what a standard boilerplate looks like:\nThe `head` element is for declaring important information about that page that will not be visible to the user.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example the `title` element is what displays on the tab in the browser that is rendering the page.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `meta` element is what dictates other important info, such as the character set used.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Another important `meta` element is:\n`<meta name = \"viewport\" content=\"width=device-width, initial-scale=1.0\">`\nThis will render the page at the width of the device, regardless of what it is.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Web Hosting is the process of taking the files that a website is made up of, and placing them on a web server that is connected directly to the Internet.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This allows anyone connected to the Internet to access that webpage.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "GitHub repos can be used to host websites, using a feature called \"GitHub Pages\".",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When creating the repo, simply choose public instead of private.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "After creating the repo, go to 'Settings' and then to 'Pages' on the left sidebar.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Under the 'Build and Deployment' section, make sure that the source is set to 'deploy from a branch'.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Then set the Branch to deploy from to 'main' instead of 'None'.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This process can take up to 10 minutes, so keep refreshing and checking back until a URL appears, and it works correctly.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Style Sheet is a type of language, just like Markup Language is (the ML in HTML).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Other types include Sass (Syntactically Awesome Style Sheet), Less (Leaner CSS), and others.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "CSS is needed because handling the styling using HTML elements clutters up the HTML documents a ton.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Keeping the HTML focused on content, and designating the CSS entirely for styling keeps things cleaner.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Here is an example: `<html style = \"background: blue\"></html>`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Inline CSS is useful when adding CSS properties to a single element, or when doing testing to see what a certain CSS property value will look like.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This method, and External CSS, because they apply to more than on element, must include a 'selector' which designates which HTML elements the CSS code applies to.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Internal CSS is good for when you want to apply CSS to all the elements in just 1 HTML document, but not for multipage websites.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `style` element is placed in the `head` element of the HTML document.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This file contains CSS code which follows the same syntax as that of Internal CSS.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The file is attached and applied to the HTML documents by including a `link` element in the `head` element of each document it applies to.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `link` element is self-closing, and has two important attributes: `rel` meaining relationship, which explains the role of the item being linked, and `href` which gives the location of the linked item.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The .css file is then attached by making the file path the value of the `href` attribute, and the `rel` attribute is usually set to \"stylesheet\" or something similar.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "External CSS is most common in web development, and is best for when working with multipage websites, as it applies the CSS code to entire websites.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Element Selectors:\n    This is the most common type of selector, with the syntax of `element type {property:value;}` This will apply a CSS rule to all of the HTML elements of the designated type.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Class Selectors:\n    The `class` attribute is a global HTML attribute, which can be set to anything.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Whatever the `class` attribute is set to is a class that is created.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Then, a class selector can be made, which applies the CSS rule to any element, regardless of the type, that is of that class.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The class name as declared in the HTML element's opening tag does not include the period in front of it.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "ID Selectors:\n    The `id` attribute is another global HTML attribute, which can also be set to anything.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This behaves the same as the `class` attribute, except that there can only be one element with each value of the `id` attribute.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So, CSS rules declared in an ID selector will only apply to 1 element in a single HTML document, as opposed to class selectors, which can apply to many elements across many documents.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Attribute Selectors:\nThese are sort of a modification of Element Selectors.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "They allow you to apply a CSS rule to only elements that posses a certain attribute, or that posses a certain attribute with a certain value.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The value will have to match exaclty with what it appears in the HTML, inlcuding quotes.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Universal Selectors:\n    Apply a CSS rule to all of the elements in an HTML document.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The syntax is `*{property: value;}`\n---\nIf I am unsure about what a property does, check the MDN Web Docs.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "If you use `background-color` on a single element, that will just change the background color for the area of that element, not the whole webpage.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are lots of \"named colors\" in CSS, which can be applied by simply typing their name.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You can also set a color by typing in a hexcode for an RGB value.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Or, many IDEs let you adjust the RGB values and colors yourself using text input or GUIs.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "All of the colors include their hexcode, which can be copied to apply that color easily to the CSS.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Methods of measuring font **size**:\nPixels, denoted `px` is 1/96th of an inch.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Example: `font-size: 20px;`\nPoints, denoted `pt` is 1/72nd of an inch.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It functions the same as em, but is relative to the root element rather than the parent element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are also some named font types that can be applied, such as `small`, `large`, or `xx-large`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Font **weight**:\nFont weight deals with the boldness of the text.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are three main ways to declare font weight in CSS:\nKeywords, such as `normal` or `bold`\nRelative to parent, `lighter` or `bolder`\nSpecific value `700` or `400`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When using relative weighting, `lighter` just decreases the child element's weight by 100, and `bolder` increases it by 100.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Font **families**\nA font family is a way of selecting the typeface or appearance of the font, where the specific preferred font is typed, and then a generic, backup font is given after.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "An example of this CSS property being applied is:\nThis would attempt to apply the typeface \"Helvetica\" to the h1 elements, and if that is not possible, it would apply the generic \"sans-serif typeface.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Text **Align**\nThis property can have values assigned like `left`, `center`, `right`, or `start` and `end`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To inspect the CSS on a webpage, it is the same as inspecting the HTML.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You can right click something and then hit \"Inspect\" or \"Inspect Element\" and that will bring up the developer tools.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "In the 'Elements' tab, you see the HTML on one side, and the CSS on another side.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When you click on an element in the HTML, you can view on the right of it the applied CSS.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You can look at it using the 'Styles' tab on the CSS half, which shows all of the CSS rules and where they come from.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Some will be crossed out, because they are being overridden by another source.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To view just the CSS that is being applied, switch to the 'Computed' tab on the CSS portion.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When using Chrome Developer Tools, there is also a handy tool called 'CSS Overview'.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is accessed by clicking the three dots > clicking 'More Tools' > then clicking 'CSS Overview'.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This will automatically generate an overview of the colors and fonts used, giving names and/or hexcodes, and showing the frequency of their usages.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Five properties make up what is called the CSS Box Model, an important concept in Web Design.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The height, width, margin, border, and padding of some content is what makes up an element's \"box\"\n`margin` is the distance on each side between the edge of the browsing window and the border.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `border` is set all the way the content, with its type, color, and thickness declared in the CSS.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `padding` is the distance between the border and the content within the border.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Different elements can be grouped together in \"boxes\" manually, using the HTML `div` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This will group pieces of content together and apply CSS to them similarly, and is often done when two items go together contextually.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When doing arithmetic to figure out box layouts with CSS, remember that paddings, margins, and borders will almost always apply on both sides of something, so amounts being added will often need to be doubled.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "CSS has a sort of order of operations, or a hierarchy that dictates which rules get applied to the HTML elements when there are conflicts or collisions (to use the hashing term).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is described as the \"cascade\" of CSS (Cascading Style Sheets).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is a description of the cascade:\nPosition: The CSS rule that is lower down is what will be visible after execution\n    \n    In this example, the color blue would be visible on the live HTML document for the li elements.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Specificity: The CSS selector with the highest level of specificity is what will be visible and be the overider amongst conflicting rules.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is the order of specificity, from least to greatest:\nElement selectors\nClass selectors\nAttribute selectors\nID selectors\nType: This one is similar to specificity.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The method used to implement the CSS, or the type of CSS that it is (External, Internal, or Inline) dictates which one is active.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is the hierarchy, from lowest to highest:\nExternal CSS (lowest)\nInternal CSS\nInline CSS\nImportance: The importance of a CSS rule among conflicting rules is the most important factor.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Importance is denoted by using a CSS keyword, which is `!important` in between the property value and the semi-colon of a CSS rule.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are a few different method for combining CSS selectors, to target specific groups of content in your HTML document.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Group:\n    This will simply apply the following CSS rule to all of the indicated elements, delimited by commas.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Here is an example:\nChild:\n    This will apply the CSS rule to the indicated element that is a direct child of the indicated parent element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Here is the syntax:\nDescendant:\n    This method of combining selectors has the following syntax:\n    \n    This will apply the CSS rule to any element that is a descendant of the specified element on the left side, regardless of how many generation deep.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Chaining:\n    Here is the syntax for this method of combining selectors:\n    \n    What this method does is apply the CSS rule where all selectors are true.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So, combining an element selector, to only get elements with a certain id would look like this: `li.to-doItems{`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Or combining element, class, and id selectors would look like this: `p#id1.classname{` When chaining, always place the element selector first if one is being chained, because id and class selectors have the special characters to help denote themselves.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The position attribute is a CSS property that is applied to HTML elements to determine their placement on the HTML document, and thus the webpage.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are 4 main types:\nStatic:\n    This is the default position for all HTML elements.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It simply places an element below the proceeding element, in sequential order following the HTML syntax.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Relative:\n    This is positioning relative to _that element's static positioning_.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So `p{position: relative; left: 50px; top 50px;}` would place the paragraph element 50 pixels from the left and down from where it would be in static positioning.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Absolute:\n    This positioning places an element relative to the closest positioned ancestor, or at the top left of the web page.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "An element is considered \"positioned\" as long as the position property is set.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Thus, the CSS rule `h1{position: absolute; left: 25px;}` would place all h1 elements either 25 pixels left of the position of their closest ancestor element with the position value set, or 25 pixels to the left of the top left of the web page.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So, if the closest ancestor of that h1 tag, with a position set, is 2 generations up in a div tag, the position of the h1 is relative to the position of that div tag.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It places the element the specified amount in the top left of the browser window, and stays there no matter where you are on the webpage.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One important attribute to make note of with positioning is the `z-index` attribute.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This dictates an element's position on the z-axis, which will determine if it is placed in front of or behind other elements on the page.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One interesting thing that I found was that I found a way to get the desired outcome, but it was significantly different from the provided solution.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "What I found as interesting was that if I tried to take parts of the CSS from the provided solution, and replace the parts of my own CSS that served the same function, it wouldn't work the same.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I think the point that this may prove is that working with the CSS is very much like a scripted program or a larger scale function, not everything is just plug-and-play, because of interactions with other pieces and dependencies that are established.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The Display property affects how different elements can display on a rendered webpage.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are three values for the display property: `block`, `inline` and `inline-block`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Here is a description of each:\nBlock:\n    Block elements will have their \"box\" take up the entire length of the the webpage, and no other other elements can be on the same line as them, regardless of the length of the content.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Inline:\n    Inline elements will only allow their \"box\" to take up the amount of space needed for the content of the element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The width and height of inline elements cannot be adjusted (they can be actually, they simply have no effect when rendered, however).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Inline elements do get placed on the same line, given there is room enough for them.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Thus, 2 `p` elements could be placed on the same line, appearing as if they are two sentences of the same paragraph, if they are inline elements.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Inline-block:\n    This is essentially a hybrid of the two previous display types.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Elements will be placed on the same line if there is enough space, but the height at width can also be altered, regardless of the size of the element's content.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This property is applied to certain elements, and dictates where other content is positioned relative to it.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, if the float property on an `img` selector is given the value of `left` then the image will be positioned to the left of other content, and the other content, like text for example, will wrap around that image on the right side.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To make an element disregard another element's float, to position it below in a new block as normally would happen, use the `clear` property.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This property, if given a value of `left` for example, would cause the selected element to disregard all left floating elements, and render as normal.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The same applies to elements with clear set to `right` with right floating elements.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To make an element disregard all floats, use the value `both`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "In the past, float properties were manipulated to create complex website layouts, but now tools like Flexbox, Grid, and Bootstrap exist to hand the more complex layouts, so using the float property for those are less effective.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Using CSS, it is possible to create webpages that are responsive to the size of the client device being used.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "That is, the same website, with the same html files can be rendered differently, depending on if it is rendered on a smartphone, tablet, laptop, or desktop.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "External Frameworks, like Bootstrap\n**Media Queries**\nThese are written in the CSS file in this way:\nThe `@media` identifier is followed by what is called the \"breakpoint\" which is the condition on which the application of the following CSS depends on.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The basic idea is that the container of a grid, which is created as a `div` element, can be given the `display` attribute of `grid` rather than block or inline.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This allows the number of grid columns and rows to be set using attributes such as `grid-template-columns`, `grid-template-rows`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The elements inside of the `div` element that acts as the container become the contents of the columns and rows, and the properties of those rows and columns can be edited, such as changing the span of `grid-column` or `grid-row`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This method essentially works one-dimensionally, where the width or the height of the content can be set to fulfill certain ratios, which by nature makes the page responsive,\nas the dimension that is controlled by a flexbox is a ratio of the total avaliable dimension, rather than a set number.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is implemented similarly to CSS Grid, where a parent `div` element will be given the value of `flex` to its `display` CSS attribute.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Then, the children elements will have their `flex` attribute given a numerical value.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "A `flex` value of 1 will give that element the same dimension as all of the other elements, or it will evenly distribute the dimension among all of the elements in the flexbox.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "A `flex` value of 2, would give that element 2x the dimensional value as the standard amount (however much an element with a `flex` of 1 would have).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The Bootstrap Framework is a library of prewritten CSS code, that is implemented by giving elements certain types of classes, such as `card`, `row`, or `container`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This will then apply the corresponding CSS rule when the Bootstrap framework is active.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Bootstrap is built off of CSS Flexbox, so the responsiveness works similarly.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It uses a 12 div system, so an element is given its ratio of a dimension by declaring how many of those 12 sections the element should use.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, an element with the class `card-col-6` would use 6 of those divs, or a 50% ratio of the dimension, depending on the screen size.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The description for how media queries work is given in part above.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Essentially breakpoints are defined in the CSS file using different keywords to create overriding rules for certain screen sizes/orientations, or other use cases.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, `max-width` will apply the corresponding CSS rule to all screens that are less than or equal to the list specified with this keyword.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There is also the `orientation` keyword, which can apply CSS depending on if a device's screen is in portrait or landscape orientation.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Different keywords can be combined using `and` to target or exclude specific screen sizes and types as well.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "These are described really well on the MDN Doc for media queries.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Something that I noticed with this project, is that I felt a bit stymied in taking my own approach and being creative with the project.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I was very focused on getting the CSS to work, and simply ended up copying the solution code.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I tried to make sure I understood what each line did as I included it, but it still wasn't as deep of a learning experience as it would've been had I followed my own idea.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I think what caused that hesitancy to participate was a lack of knowledge and experience.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "On the next project, I am going to try intentionally to do things independently, and get things to work on my own, without looking at or copying the solution code until I am completely finished.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I also was reminded that sometimes the simplest little errors can cause headaches.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I could not get my images to resize correctly when on larger than mobile sized screens.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "After lots of static observation, I found out that it was because when I was declaring the `height` for the images in the CSS, I had typed `200` instead of `200px`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "As CSS developed, people found complex and roundabout ways to create website layouts using the 3 basic `display` attributes: `block`, `inline`, and `inline-block`, as well as the `float` attribute.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Now this practice is discouraged in Web development, as much more sophisticated methods are avaliable for website layout, such as Flexbox, Grid, Bootstrap, and Tailwind.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `float` attribute and the 3 basic display methods should still be used for individual element styling, but not for overall website layout design.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To implement the Flexbox method, simply set the `display` attribute to a value of `flex`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `display` can also be set to `inline-flex` which will make the flexbox container span only as much as it needs to.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There are lots of attributes that are used to manipulate the flexbox, which can be found at length on MDN Web Docs for Flexbox.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One example is the `gap` attribute, which determines the amount of space between each element in the flexbox.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This can be set to 4 different values: `row` (this is the default value), `row-reverse`, `column`, and `column-reverse`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "What these different values do is set the direction of the main axis and the cross axis.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The main axis is the axis which delineates where the next element would be placed in the flexbox, and the cross axis is the axis perpendicular to that.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, in the default situation of `flex-direction: row`, the main axis runs left to right, and the cross axis runs down and up.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is important because it dictates the order in which the next element would be placed in the flexbox.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Also, certain flexbox attributes affect the elements differently depending on the direction of the main axis.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, `flex-basis` is a property that determines the width of each element in the flexbox, when the `flex-direction` is set to `row`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When `flex-direction` is `column`, flex basis then affects the height of the elements.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This property is adjusted on each of the elements inside the flexbox container, not the container itself.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "As I noticed in the exercise for the last lesson, something that can be problematic if not understood is whether a Flexbox attribute gets applied to the items in the Flexbox (called the children or flex items), or the Flexbox container (called the parent or simply, the container).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "In the example of the last exercise, the `flex-basis` attribute is one that is applied to the children, not the parent.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "A couple of useful attributes for manipulating the layout of a Flexbox are `order` and `flex-wrap`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When a non-default value is applied to this attribute, the elements appear based on the size of the `order` attribute's value, from smallest to largest.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This means that any elements that do not have sufficient space on the page will be pushed off of it and will be rendered unviewable.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The alternate is setting this attribute to `wrap` which will expand the block, wrapping the flex items to the new row/column once there is not enough space in the initial block.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There is also the value `wrap-reverse` which will reverse the order of item wrapping.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Some of its potential values include: `flex-start` which is the default value, and distributes the flex items one after another from the very beginning of the flex container.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Lastly, `space-evenly` works the same as `space-around`, but the spaces are adjusted to be equal between each item,\n`align-items` is also a parent attribute, and it dictates the distribution of the items across the cross axis.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Because the container by default has a height that is more-or-less \"inline\", meaning that it only takes up the cross-axis space needed for the content.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Thus, to use `align-items`, at least when the cross-axis is vertical, the height must be set to something.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One unit that can be used is `vh` which stands for \"viewport height\".",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is given as a percentage of the browser window, with 100vh being the complete height of the browser window.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Major values for `align-items` are identical to `justify-content`: `flex-start`, `flex-end`, `center`,`space-between`,`space-around`, and `space-evenly`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "While `align-items` is a container value, individual flex items can have their alignment manipulated using the child attribute `align-self` which uses the same values as `align-items`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Lastly, `align-content` behaves the same as `justify-content` but only when `flex-wrap` is set to `wrap` or `wrap-reverse`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This will apply layout rules to flex items that are being wrapped, while `justify-content` and `align-items`do not.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "In determining the size of flex items, there is an \"order of operations\" of sorts, that is followed.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It goes as follows:\n`min-width`/`max-width` value\n`flex-basis` value\n`width` value\nContent width\nThese attributes are all child properties.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The default value for `max-width` when looking at the content's width is the length needed to fit all of the content on one line.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The default for `min-width` when taking the content width is the width needed for the longest single word, Flexbox doesn't split up words at all.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When a `max-width` is set, the flex items will grow or shrink, but only up to that value.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So if there is a `flex-basis` property with a higher value, it will be ignored.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Likewise, if a `min-width` is set, any values lower than that will be disregarded, and when shrinking flex items they will only be shrunk until they are at the min width.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "If the screen becomes too small, those items will simply be pushed off the browser window.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The properties that allow for growing and shrinking in Flexbox are ones that can actually be toggled in the CSS.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The default for Flexbox is that `flex-shrink` is turned on, and `flex-grow` is turned off.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "If shrink is turned off, then items will simply be pushed off of the window once there is not enough room for their applied size.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "If grow is turned on, then items will be given width beyond their max-width/the applied size, until the entirety of the window is utilized.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "When a value greater than 1 is given to flex-grow or flex-shrink, it gives that item a greater ratio of the avaliable space when growing or shrinking.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So a flex-item with a flex-grow value of 2 would get double the size as an item with a flex-grow value of 1.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The default value of `flex-basis` is `auto` which will assess the amount of content in each flex item, and give a greater flex basis vaule to the items with more content, and less to the ones with less content.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Setting `flex-basis` to 0 will disable this, and setting a numerical value as the flex-basis will set that was the basis for all flex-items.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The shorthand for setting the `flex-basis`, `flex-grow`, and `flex-shrink` properties is `flex: 1 1 0;` This would set flex-grow to 1, flex-shrink to 1, and flex-basis to 0.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So, syntactically, the first number is the flex-grow value, the second the flex-shrink value, and the third the flex-basis value.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Even when I did look at the solution, I didn't just copy code over, I simply compared, and see what differences difference values made.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The 3 things that I was stuck on were: getting the dynamic behavior to work properly (snapping instead of wrapping), getting the row to be in the center of the screen instead of the top, and getting the bullet points to be centered by the content center, not the start of the `li` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The first one I solved by simply not setting the `flex-flow` attribute on the flex-container for the larger screen case.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Something about setting it explicitly doesn't allow the media query to override it.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The second one I solved by being reminded that, to alter the height/vertical alignment of anything in Flexbox, the height attribute must be set on the parent container.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "So, I set the height of the body to 100vh, and then the `align-items` attribute to `center` on the flex-container, and that did the trick.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It is what makes websites able to do things, and it is among the top 3 most popular programming languages according to GitHub and Stack Overflow.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "JavaScript is run on the 'client-side', meaning the users local computer, as opposed to a language like PHP which is run on the 'server-side', meaning the server that hosts the website.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This is why JavaScript is so powerful, because it can interact with the user's computer directly.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This takes a string as an argument and outputs that string on a pop-up.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Another command is the `prompt()` command, which acts like an `alert`, but can receive input from the user.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Remember, when instatiating variable, the `var` keyword is necessary.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "That was an error that I ran into while first trying to do things in Javascript, one of those new language adjustments.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One method of the string data type in Js is `.length`, which returns the length of a string as a number.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `.slice(x,y)` method allows me to access specific portions of a string.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Similar to slicing with array indeces, the range passed in is the lower \"fence\" and the upper fence, which includes the bottom arguement but excludes the upper one.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Also just like slicing with array indeces, if I typed `word.slice(4,)` this would select the word starting at the 5th character, up to and including the end.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Or, if I typed `word.slice(,4)` that would slice from the beginning, up to, but not including the 5th character.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Two other useful methods are `toUpperCase()` and `toLowerCase` which convert the entirety of the strings that they are called on to upper or lower case.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Both ++ and -- can be used to increment and decrement, as well as the `+=`, `-=`, `*=`, `/=`, and `%=` assignment operators.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Side note: `console.log()` is a method that will log text to the JS console, instead of a pop-up.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "It can also be used on a single argument to simply round that number down.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I do like the way that the instructor described three different types of functions: functions that take no parameters and have no output are like vanilla, functions that take parameters are like chocolate, and functions that take parameters and return values are like strawberry.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "There isn't a `randint()` method of any kind, so getting a random number between two arbitrary values can be trickier, but not very tough.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You simply multiply the random deciaml by the max range value, then round that number down, and that is your random integer.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This can be resolved by keeping the same equation and multiplying the random number by the max range value plus 1, then rounding down.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Or, if the bottom range is exclusive, you can multiple the random number by the max and then simply add one after rounding down.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The syntax is the same as well, with the curly braces denoting the code block that is executed if the condition is met.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `else if` statement is used to check for multiple conditions, and the `else` statement is used to execute code if none of the previous conditions are met.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `else` and `else if` statements are formatted similarly to PHP.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The data type, length, or fact that it is an array doesn't need to be specified, like in other languages.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "You just type the var keyword, and then include the square brackets.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Useful array methods include the `.length` attribute (not a method!",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To add an item onto the array, use the `.push()` method, and to remove the last item, use the `.pop()` method.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To remove the first item, use the `.shift()` method, and to add an item to the beginning, use the `.unshift()` method.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `for` loop syntax is the same as non-Python languages, having initialization, then condition check (both of which are followed by semicolons) and then the iteration.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "While loops are used more when a certain state or circumstance is being focused on, and for loops for when a certain number of iterations is needed.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Inline is done by assigning values to certain HTML attributes that can take Javascript code as a value, such as the `onload` attribute of the `body` tag, which exectues its value's code on loading.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Internal Javascript is added using the `script` element, where the JS code is written between the tags.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `type` attribute is not necessary to set, as the default value is `text/javascript`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "External Javascript is added by using a `script` element as well, but instead the `src` attribute is set to the path of the external JS file.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "As far as the placement of the CSS and the Js in the HTML document, the CSS should be placed in the `head` element, so that the styling will render first, and the elements won't render without styling, and then have styling applied later.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This looks clunky and unprofessional, so always put the link to the CSS file in the `head` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Javascript is the opposite, in that the link to the Javascript should be placed at the last line before the closing `</body>` tag.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This will ensure that the HTML renders before the Js tries to execute.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "If the Javascript is placed at the top of the document, it will be executed before the HTML is rendered, and thus will be trying to interact with HTML elements that don't exist yet.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The root of the tree is the `document` object, and the branches are the elements of the HTML document.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `document` object has many methods and properties that can be used to interact with the HTML document.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, if a website has an html element with a `head` element and a `body` element, the document object would be the root, and then its only child would be the `html` element, and then the `head` and `body` elements would be children of the `html` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "This underlies the way that elements are interacted with using Js.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "For example, `document.firstElementChild` would return the first child of the `document` object, which would be the `html` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Then, `document.firstElementChild.firstElementChild` would return the `head` element, and so on.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Remember a good way of describing objects is by thinking of them in terms of nouns, adjectives, and verbs.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The objects are the nouns, the properties are the adjectives, and the methods are the verbs.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Each html element is an object, and each object has properties and methods that can be used to interact with it.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Such as the `innerHTML` property, which can be used to change the inner HTML of an element, or the `style` property, which can be used to change the style of an element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Examples of methods are `click()`, `setAttribute()` and `appendChild()`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "I learned that as I was tinkering around in this lesson, so to get a child element, make sure to use `firstChildElement` or `lastChildElement`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Something to keep in mind when manipulating style using Js, is that the CSS attribute names will appear slightly differently.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Instead of being all lowercase with no dashes, they will camel cased, with no dashes in the Javascript code.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "One of the keys to doing this, when the style or look needs to change dynamically, is by manipulating the `classList` attribute that applies to every Js object/HTML element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `classList` is an attribute whose value is an array of all of the classes that are applied to the element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `classList` attribute has methods that can be used to manipulate the classes of the element, such as `add()`, `remove()`, and `toggle()`.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `toggle()` method will add the class if it is not present, and remove it if it is present.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "The `textContent` attribute will return the text content of the element, without any of the HTML tags, and thus be used to manipulate that text.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "To manipulate these, use the `getAttribute()` method, while passing in the name of the attribute to get the value for, and the `setAttribute()` method, while passing in 2 arguments: the name of the attribute to set, and the value to set it to.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "text": "Well over 80% of developers use Git as their VCS (version control system), it is the clear choice as far as VCS is concerned.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "An important point to remember is the difference between Git and Github.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Git is a local application that does the actual version control, and works locally on someone's machine.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "text": "Github is a cloud based service that stores Git repositories and enables collaboration between developers.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    }
]