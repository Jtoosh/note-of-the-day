[
    {
        "__type__": "Snippet",
        "text": "Here is my example:\nI am super excited for March Madness, so I can make a good [bracket][tournament-challenge]\n[tournament-challenge]: https://fantasy.espn.com/games/tournament-challenge-bracket-2024/\nThe syntax for a reference is \"[reference Name]: www.linktowebsite.com\"\nImages have the exact same syntax as links in Markdown, with only one minor addition: you precede them with a '!'.",
        "header": null,
        "file": "intro.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax/) and [extended syntax](https://www.markdownguide.org/extended-syntax/).",
        "header": null,
        "file": "markdown-cheat-sheet.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Find out broswer and operating system of users\nDisplay alternate web page layouts for other users, such as mobile users\nBasic and advanced math\nCreate global HTML templates\nPHP scripts can be placed anywhere within a document, HTML, for example.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "So, with this setup, to and a new page, I simply code that page in its own php file, and then enter that file name and the page title into the array in `arrays.php` and then the PHP script in `nav.php` will automatically add that page to the nav bar.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Another method used to protect against header injections (this was a more advanced move), is the `preg_replace` method, which takes in three arguments, first a regex pattern, second what to replace with, and third, the input string to examine.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "This also makes the form more accessible, as it allows screen readers to read the label when the input field is focused, and lets users click on the label to focus on the input field, which is often larger and easier to click on than the input field itself.",
        "header": null,
        "file": "php_notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.",
        "header": null,
        "file": "LICENSE.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "In the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Project maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.",
        "header": null,
        "file": "CODE_OF_CONDUCT.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "You can link your social media services you're using, including LinkedIn, X, Mastodon, ResearchGate, Facebook, Instagram, Reddit, Threads, YouTube, Udemy, Dribbble, Behance, Medium, dev, Stack Overflow, Discord, Telegram, personal website, phone and email.",
        "header": null,
        "file": "README.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here is some important information about Python type annotations from the Project 0 starter code:\nHere is a link to the commit message guidelines to follow for this class: [Git Commit Message Guidelines](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53)\nFunctions\n: Given two nonempty sets, *A* and *B*, a function *f* from *A* to *B* assigns exactly one element of *B* to each element of *A*.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "It involes a few parts:\nThe set of states *S*\nthe set of inputs *I*\nthe set of outputs *O*\nthe transition function *f*\nand the output function *g*\nStates have a small amount of memory, *s1* remembers that a 'c' has been seen, in the lecture example.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Formal Definition:\nA finite set of states *S*\nA finite set of input symbols *I*\nA transition function *f*: *S* x *I* -> *S*\nA start state *s0* \u2208 *S*\nA set of accept states *F*\nSome symbols:\nA double circle is an accept state\nThe lambda symbol is the empty string\nRegular Expressions and FSA are cousins, both pattern manager tools.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A grammar is LL(1) if\nFor all nonterminals *N*\nthe FIRST sets of all RHS of rules using N don't overlap (in other words, none of the productions have the same elements as their left most terminals)\nLL stands for Left-to-right input, Leftmost derivation.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I solved this one, by determining that in the case where the query was asking for all strings, and all the same strings, because I was using the `index()` list method, it was returning the index of the *first* occurence of the passed in value.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The problem with that method was that if the initial evaluation does not change anything, it is never evaluated again, but the evaluation of a later rule could change the relation so that the initial rule would now be able to produce something.",
        "header": null,
        "file": "notes 6.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Each data type in C has a specific size:\n`char`: 1 byte\n`int`: 4 bytes\n`short`: 2 bytes\n`long`: 8 bytes\n`float`: 4 bytes\n`double`: 8 bytes\nBecause of discrepancies in data type sizes across various hardware, the `stdint.h` library was created.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Hexadecimal is often used to represent memory addresses, because it is more compact than binary, as 1 letter of hexadecimal represents 4 bits, _so 2 letters represent 1 byte._\nHexadecimal numbers usally have a leading `x` or `0x` to indicate that they are in hexadecimal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Multiplication and division can be tricky when done arbitrarily, but multiplying and dividing by the base is easy, because you simply add or subtract a place to the number, adding a 0 to the right if multiplying by the base, or remove the rightmost 0 when dividing.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "When focusing on a bit, there are 3 main goals I can have: **1** set the bit to 1, **2** set the bit to 0, or **3** leave the bit unchanged\nTo achieve one of these goals, use the AND + OR operators between the target variable and a mask to get the desired goal.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Some examples are:\nRandom line\nLeast Recently Used (LRU), replace the line that hasn't been used for the longest time\nLeast Frequently Used (LFU), replace the line that has been used the least often\nThere are more complex replacement policies out there, but they can become more expensive and cost more time to implement.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "From the lab, I realized that each decimal number from 0-255 can really have 3 meanings: **First**, the actual decimal number value, **Second**, the hex number value (printing 16 with a `%x` format character yields 0x10), and the ASCII character that corresponds with that decimal or hexadecimal value (dividing 'A' by 5 equals 13, the same as dividing 65 by 5, 65 is the ASCII code for 'A').",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Something that I ran into in the lab, was realizing that to have the output for a byte look the way that I am used to, from right to left (with the least significant digit in the rightmost place), I need to store a byte in the opposite order that the computer normally would.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The biggest thing that I learned on the first try was that, when a different format character is being used than is the data type given (such as `%u` or `%d` for a `char`), it essentially expands or truncates the value, and behaves accordingly.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "When a label is moved to a register as an immediate value (without a `$` prefixing it), the _memory address of that label_ is what is placed in the destination register\nI learned that the \"return value\" of a bit-shift operation is not the bits \"shifted out\" by the operation, but the result of the bits originally in question, after the shift has taken effect.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Declaration of `NR(n)`: return 3n (look at line with `leaq (%rdi,%rdi,2), %rax`)\ne. Declaration of `NC(n)`: return 4n+1\nif NR == NC{\n  NR >> 3\n}\n**Question 5:**  Given the code in problem 3.67:\nA. Bro I don't want to draw the whole stack diagram.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I think one of the biggest benefits of this project was it helped me straighten some things out in my mind, such as what one increment in a memory address means, and being conscious of dealing with the data a byte at a time, or a bit at a time, and what form I am putting it into.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I also went to the temple in between my main sessions of coding this, and during one moment while I was waiting in the temple, while thinking a bit about how to solve the padding partial hex dump lines, an idea came to me, and that ended up being the solution!",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I got the coloring figured out, I was thinking I needed to assign the colors of all three bytes in each pixel by doing the pointer arithmetic, but I just needed to do it once, because the pointer that I was using appears to have edited all 3 bytes.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Keeping track of whether I was moving by one pixel (three bytes) or one byte, and remembering that the pointer I'm drilling through 3 functions is a 1-byte pointer, and working out the needed math to make iteration correct was the most difficult for me.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "In one way, there was maybe a bit too much to take in on the first pass, but I often found that when I was stuck, it was because I was stepping through the functions too fast and not figuring out what the parts that I didn't understand were doing.",
        "header": null,
        "file": "notes 2.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Obvious logic errors\nEnsuring all of the requirement cases are fully implemented\nEnsuring that the automated tests that are written are sufficient, or if new ones are needed\nNew code conforms to the style guidelines\nCode reviews are especially useful for Agile development teams, that have the work decentralized across the team.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "These tasks include:\nclean: cleans the Java byte code\ncompile: compiles the Java byte code into the source code\nassemble: creates the JAR file\ntest: runs the unit tests\nThe plugin is added by adding `apply plugin: 'java'` to the `build.gradle` file.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Functional testing (ensure the code *does* the right thing) is possible with manual testing, but performance testing (ensuring the code does the right thing *in a reasonable amount of time*) and load testing (ensuring the code does the right thing *under the expected amount of demand*) are much more difficult to do manually, and so automated testing is needed for those dimensions of testing.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "If the form requires a number between 1 and 100, the equivalence partitions would be:\n1. the numbers from 1-100 (valid input)\n2. the numbers less than 1 (invalid input)\n3. the numbers greater than 100 (invalid input)\n4. non-numeric input (invalid input)\nThese equivalence partitions represent all of the possible inputs from different types of output behavior.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "JUnit is highlighted by some of the following features:\nAnnotations to identify methods\nAssertions for identifying expected results\nTest runners to run tests\nTest suites to group tests\nGreat simplicity and ease of use\nAutomated execution with self-checking test results and providing feedback\nProgress bar with color indications\nThere is a recommendation of 2 unit tests for each requirement, one to test the positive case and one to test the negative case.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here are some examples of coreMatchers:\nallOf\nany\nanyOf\nanything\nboth\ncontainsString\ndescribedAs\neither\nendsWith\nequalTo\neveryItem\nhasItems\ninstanceOf\nis\nisA\nnot\nnotNullValue\nnullValue\nsameInstance\nstartsWith\ntheInstance\nAn example of this in use is `assertThat(\"theString\", both(containsString(\"S\")).and(containsString(\"t\")))`.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Some changes to annotations include:\n`@Before` and `@After` are now `@BeforeEach` and `@AfterEach`\n`@BeforeClass` and `@AfterClass` are now `@BeforeAll` and `@AfterAll`\n`@Ignore` is now `@Disabled`\n`@Test` can no longer have the `expected` attribute, and instead should use `assertThrows()` to test exceptions.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A DisplayNameGenerator can be set for a test class by using the `@DisplayNameGeneration` annotation, and then implementing the `DisplayNameGenerator` interface, with various different Generators, such as one for converting underscores into spaces, or one for generating complete sentences.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I'll list some of the major ones:\nAdvantages:\nGreater confidence in the code\nLess fear of change or experimentation, due to the large test suite\nComprehensive code coverage\nSelf-documenting code\nFacilitates deeper understanding of the code, and the project requirements\nReduces debugging time\nGreater emphasis on design and functionality.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The article lists a few types of functionality tests:\nFunctional Tests\nUsability Tests\nRegression Tests\nEnd-to-End Tests\nCross-Browser Tests\nPerformance Tests\n[Playwright Intro](https://playwright.dev/java/)\nPlaywright tests can be written in several langauges, not just Java.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "JMeter is an open source tool for performance testing that creates several threads, and then simulates a number of users interacting with the application at the same time, monitoring the performance of the application under different loads.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "To use SonarQube projects you'll have to get an access token, which is done on the account page (go to localhost, and whatever port the SonarQube server is running on), and after logging in navigate to the security tab, which is where tokens can be generated.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "SonarLint puts issues into 3 categories:\n**Bug**: a coding mistake that can negatively affect performance or behavior\n**Vulnerability**: a security issue that can open a window for an attacker\n**Code Smells**: a violation of a clean coding rule that can affect maintainability and readability.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "SonarLint will flag things like always-true or always-false boolean expressions, redundant or verbose expressions, overly complex methods (evaluated using the Cognitive Complexity score that SonarLint calculates), and even some language/version specific things.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here is what I found that helped me to do so:\nRun this command to check and see what versions of Java are actually installed: `/usr/libexec/java_home -V`\nThen, this is the terminal command that will actually change which version is being used:\n`export JAVA_HOME=``/usr/libexec/java_home -v <versionNumber>`\n**Lab Notes:**\nTo run a SonarLint report on the whole project: Report -> File Icon -> Analyze Project with SonarLint\nRemember to run SonarQube on Java version 17!",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A profiler has various methods of reporting, including:\nA statistical summary of the program's behavior, called a **profile**\nA visualization of the program's sequential behavior, called a **trace**\nA program can be modified to profile itself, inserting itself into a profiler at compile time.",
        "header": null,
        "file": "notes 3.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Underlying all of these should be to be a Christlike software engineer, including:\nSeeking divine help, including in coding, of what to do, where to go, and how to do something\nHaving an eternal perspective, looking past a project due date, a class, a job, or even this life.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Some basic commands that I haven't run into yet include:\ncurl - Command line client URL browser\ngrep - Regular expression search\nfind - Find files\ntop - View running processes with CPU and memory usage\ndf - View disk statistics\ncat - Output the contents of a file\n**less - Interactively output the contents of a file** I want to explore this one more.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A lot more good info on pull requests can be found [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests)\n**Lecture 9.5.24**\nOne of Prof. Ventura's biggest course objectives is for us to learn to think analytically and creatively.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "To remember the order of the properties in the CSS box model, from outside to inside, you can use the mnemonic:\n**\"My Big Purple Cat\"**\n**M**argin\n**B**order\n**P**adding\n**C**ontent\nReview of `display` property values:\n`block`: The element will take up the entire horizontal space of the browser, and it will start on a new line.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Grid and flex are a bit more complex, so here is some more info on them:\n[Grid] (<https://www.w3schools.com/css/css_grid.asp>)\n[Flex] (<https://www.w3schools.com/css/css3_flexbox.asp>)\nBootstrap is the most popular CSS framework, and Tailwind CSS is a newer one that is gaining popularity.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Bootstrap is far and away the most popular CSS framework, but its major success is also its weakness: Bootstrap styling has become the de facto look of the web, so using Bootstrap can deliver a reliable and comfortable user experience, but it won't be able to stand out and be unique.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "It can be used by downloading the files and using a package manager, or by their content delivery network (CDN) Here are their official CDN links:\nCSS: <https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css>\nJS: <https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js>\nIn Caddy, different from Apache, the `publichtml` directory is the root directory of the website.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Cross Site Request Forgery (CSRF) is a type of attack that tricks the user into performing an action that gives attackers access to their information, by using a fake website to send a fetch request to the real website, and access personal data.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The object model of Mongo starts with the `MongoClient` object, constructed using a url that connections to the MongoDB server, which contains the username, password, and host name, such as this: `mongodb+srv://${userName}:${password}@${hostname}`\nA `db` object is created from the `MongoClient` object, and then the `db` object, which is used to create and access `collection` objects.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I realized that because the file structure that led to the Card and Deck classes are odd, I just defined the classes again in the backend file, and because that was the main reason I was using ES6 on the backend, I found it easier to just use CommonJS for the backend.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I was able to find that other people had already had the exact same problem as me, with the server not being able to access the Database despite the IP address being whitelisted, and the fix was to change the MongoDB version to an earlier one.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "What I learned is that a more standard way to include dynamic values in the context object being used is to wrap all the components in a `<SomeContext.Provider>` tag, rather than making a separate function called SomeContextProvider, like I was doing before (I think what I was doing before was something generated by an LLM anyway).",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "When I was trying to handle the show state of the modal, rather than just using the setter that I associated with the state variable for the click event listeners, I had to define seperate handler functions that used the setters from the state variables, and for some reason those handlers that I defined work, but using the setters directly does not, as the console says that causes an infinite loop.",
        "header": null,
        "file": "notes 4.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "So, instead of using children in the traditional way, I made a `front` and `back` attribute for the Flashcard component, and passed in components for the front and back, because the flipping animation wouldn't work with both in there as `children`.",
        "header": null,
        "file": "notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The standard order of elements in a Java class\n  > Here is an answer provided by GitHub Copilot:\n  > In the context of the notes in the file, \"The standard order of elements in a Java class\" refers to the conventional sequence in which different parts of a Java class are typically organized.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Ideally, a data object should have the following characteristics:\nIs immutable\nHas getters for all fields\nOverrides the `equals`, `hashCode`, and `toString` methods to match the fields of the object\nThis can be done with a standard class, but it adds to the amount of boilerplate code that is needed.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "To create a record, use the following syntax:`record Person(String name, int age) {}` Record that are created this way will meet the three characteristics mentioned above, as they are immutable, have getters for all fields, and override the `equals`, `hashCode`, and `toString` methods to factor in all of the fields of the record.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Throwing an exception in a `finally` block will override any other exceptions that are thrown, and the exception thrown in the `finally` block will be the one that is caught, and the other exceptions will be inaccessible, as the suppression mechanism only works with try-with-resources blocks.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "For those that don't have a cause as a constructor parameter, the `.initCause()` method can be used to set the cause of the exception (the argument passed to `.initCause()` must be a `Throwable` object, generally it is the exception that caused the current exception).",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Primitive data types, refer to [Ch 1 Reading](./notes.md#key-things-to-understand)\nFor a lot of the other content in lecture today, reference [Java Basics Section](./notes.md#java-basics)\nAlthough subclassing seems intuitive with `ChessPiece`, because there is already a way to determine the piece type, with the ChessPiece field `type`, subclassing would give a redundant way to determine the piece type, which is a code smell.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Methods include `addFirst()`, `addLast()`, `peekFirst()`, `peekLast()`, `removeFirst()`, `removeLast()`\n[Javadoc](https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html)\nImplementing classes\nArrayDeque (resizable array implementation)\nLinkedList (linked list implementation)\nThe **stack** interface in Java is deprecated, because it does not work very well.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "However, because the lifetime of the inner class's objects are usually longer than the lifetime of the local variables, there is a protective restrction, which is that a local inner class can only use local variables that are _final_ or _effecively final_, which means that they are not mutated if they aren't declared as final.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Handling complex tasks in terms of just these built-in, low level classes would carry too much cognitive burden, so the developer creates higher level classes out of these lower level ones, to abstract out details and make complex systems more understandable.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Includes the [InputStream](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/InputStream.html) and [OutputStream](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/OutputStream.html) interfaces, and a host of implementing classes like `FileInputStream`, `URLConnection.getInputStream()`, and others.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A type parameter can have unlimited interface bounds, but only one class bound, and it must come first in the list of bounds, like this: `<T extends Person & implements Collection>`\nWildcards are used to accept the passed in class and any of its subclasses or parent classes.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The way that lambda expression work behind the scenes, is that the JVM looks at the type assigned to the parameter or variable containing the lambda expression, and will make an in-memory instantiation of that class, and the code given in the block part of the lambda expression will be the implementation of the functional interfaces abstract method.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "When specifying the column you must include the name and data type, but can also include other useful modifiers like `not null`, which requires a value to be not null, or `auto_increment` which will automatically track and increment that value each time a row is added to the table.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "A foreign key specification can include `on update` and `on delete` clauses, followed by a number of modifiers like `restrict` (blocks the operation from happening), `cascade`(will propogate any changes to a primary key to foreign keys that reference it), `set null`, `set default`, and `no action`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "AND can be used in WHERE clauses to avoid Cartesian products and ensure join\nInner join is also useful, syntax is `INNER JOIN table ON cond`\ntransactions\nsometimes you need multiple statements to pass together or fail together\ndefault is each statement in sql is its own transaction\nuse BEGIN TRANSACTION to start then COMMIT or ROLLBACK TRANSACTION\nJDBC stands for Java Database Connectivity.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here is a table of the essential client shell commands\n| Command                   | Description              | Example                       |\n|---------------------------|--------------------------|-------------------------------|\n| mysql -u `<username>` -p  | Login to the shell       | `mysql -u root -p`            |\n| help or ?",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Right click on a breakpoint and click 'more', or access through \"Run > View Breakpoints\"\nDr. Wilkerson's spiritual/life thought: When you feel yourself avoiding a certain task or project because of its difficulty and/or magnitude, as soon as you recognize that avoidance is when to start working on it.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The things that I need to do for Phase 5 are namely:\nDraw menus and handle input\nDraw ChessBoard\nInvoke Server API Endpoints (Just like in 260, send a HTTP request to the url)\nWrite tests\nA few tidbits that can be helpful:\nUse `System.exit()` to quit the program.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Below is an example:\nThe javadoc on `HttpURLConnection` describes all of the methods and fields, but here are a few fundamental ones:\n`.setReadTimeout(int milliseconds)`: sets the timeout limit, parameter is in milliseconds\n`.setRequestMethod(String method)`: sets the HTTP method that the request will be using\n`connection.connect()`: Connects to the URL that the connection was constructed with.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The slides have a helpful set of \"steps\" to both an HTTP GET and POST interaction between client and server, consult that when needed\nRather than alternating between putting in and taking out lots of `println()` statements, logging is a better way to work with and handle errors.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here are variables that can be used in the logging format configuration:\n%1$ The date/time the message was created\n%2$ The method that called the log method  \n%3$ The name of the logger\n%4$ The level the message was logged at\n%5$ The message\n%6$ The throwable\nThere are a variety of logging methods that add certain things to the log, and are extremely useful, such as logging method entry/exit, logging the throwing and catching of an exception.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Rather than generating the overhead and cost of creating lots of threads, the practice of _thread pools_ involves initializing a number of threads before they are needed, and then storing them, using them as needed, and then reusing them later.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "This class has a number of methods that can be used to create and manage thread pools, such as `newFixedThreadPool(num)` creates a pool of `num` threads that can't increase or decrease, `newCachedThreadPool()`, and `newScheduledThreadPool()`.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I found the Single Responsibility principle to hold true in this case, as making 4 different methods for each of the directions that a piece could move, rather than one with far greater complexity, was much easier, even with the shared code between the 4.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I should consider: _How could I have used records in my implementation of Phase 0?_\nSomething that helped with abstraction was learning this technique: When the body of a loop is the same and the only thing that differs is direction of iteration in 2 different uses, abstract the loop body into a method, and pass in the iterator variable as a parameter.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I think that this was because of this: I am at the point where some of the lower-level tasks I can handle just fine, but the higher level things like design choices, such as for storing the board data, or traversing the board for movement rules, I am just beginning with.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "It takes 5 parameters: `src`: the source array, `srcPos`: the starting position in the src array, `dest`: the destination array, `destPost`: the starting position in the destination array, and `length`: the number of array elements to be copied.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Okay, one bug that I found was that my method for looping through the board and checking the opposite team's pieces to see if the king was in their possible moves (indicating the opponent being in check), called `inCheckLoopBody` was that I was calling piece moves on the unmodified field `board` not the copy of the board with the move made.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "On clearData, because UserData, GameData, and AuthData are going to be on 3 separate SQL tables, it is accurate, and better practice, to have 3 separate clear methods, and call each of those, rather than one method that tries to clear all three.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Pushing myself to meet the quality code standards led me to trying something new, creating the `handleResponse` method in my Server class, which used lambda expressions as one of the parameters, which required making an interface to assign as the type for those lambdas.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I also had to change the `board` parameter to have a `ChessBoard` type, rather than `ChessPiece[][]`, in order to accomodate calling `.pieceMoves()` in the `ui.Chessboard` class, since that method takes in a `ChessBoard` type, and I didn't want to bother changing that and all it's dependencies.",
        "header": null,
        "file": "notes 5.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Desired features of the application:\nList of groceries is inputted, if certain brands a desired, those are listed as well\nStore is selected\nStore website is opened and crawled for the groceries\nPrices are compared with 3 options, and the cheapest is added to a dictionary with the grocery as the key and the price as the value\nAisle numbers of the groceries are added to the dictionary.",
        "header": null,
        "file": "grocery_doc.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Here is the syntax:\nDescendant:\n    This method of combining selectors has the following syntax:\n    \n    This will apply the CSS rule to any element that is a descendant of the specified element on the left side, regardless of how many generation deep.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Or combining element, class, and id selectors would look like this: `p#id1.classname{` When chaining, always place the element selector first if one is being chained, because id and class selectors have the special characters to help denote themselves.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "Thus, the CSS rule `h1{position: absolute; left: 25px;}` would place all h1 elements either 25 pixels left of the position of their closest ancestor element with the position value set, or 25 pixels to the left of the top left of the web page.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I think the point that this may prove is that working with the CSS is very much like a scripted program or a larger scale function, not everything is just plug-and-play, because of interactions with other pieces and dependencies that are established.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "For example, if the float property on an `img` selector is given the value of `left` then the image will be positioned to the left of other content, and the other content, like text for example, will wrap around that image on the right side.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "External Frameworks, like Bootstrap\n**Media Queries**\nThese are written in the CSS file in this way:\nThe `@media` identifier is followed by what is called the \"breakpoint\" which is the condition on which the application of the following CSS depends on.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "This method essentially works one-dimensionally, where the width or the height of the content can be set to fulfill certain ratios, which by nature makes the page responsive,\nas the dimension that is controlled by a flexbox is a ratio of the total avaliable dimension, rather than a set number.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "As I noticed in the exercise for the last lesson, something that can be problematic if not understood is whether a Flexbox attribute gets applied to the items in the Flexbox (called the children or flex items), or the Flexbox container (called the parent or simply, the container).",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "The 3 things that I was stuck on were: getting the dynamic behavior to work properly (snapping instead of wrapping), getting the row to be in the center of the screen instead of the top, and getting the bullet points to be centered by the content center, not the start of the `li` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "I do like the way that the instructor described three different types of functions: functions that take no parameters and have no output are like vanilla, functions that take parameters are like chocolate, and functions that take parameters and return values are like strawberry.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "For example, if a website has an html element with a `head` element and a `body` element, the document object would be the root, and then its only child would be the `html` element, and then the `head` and `body` elements would be children of the `html` element.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    },
    {
        "__type__": "Snippet",
        "text": "To manipulate these, use the `getAttribute()` method, while passing in the name of the attribute to get the value for, and the `setAttribute()` method, while passing in 2 arguments: the name of the attribute to set, and the value to set it to.",
        "header": null,
        "file": "Notes.md",
        "last_seen": null
    }
]